{"version":3,"sources":["lib/prelude.js","../node_modules/@protobufjs/aspromise/index.js","../node_modules/@protobufjs/base64/index.js","../node_modules/@protobufjs/codegen/index.js","../node_modules/@protobufjs/eventemitter/index.js","../node_modules/@protobufjs/fetch/index.js","../node_modules/@protobufjs/float/index.js","../node_modules/@protobufjs/inquire/index.js","../node_modules/@protobufjs/path/index.js","../node_modules/@protobufjs/pool/index.js","../node_modules/@protobufjs/utf8/index.js","../src/common.js","../src/converter.js","../src/decoder.js","../src/encoder.js","../src/enum.js","../src/field.js","../src/index-light.js","../src/index-minimal.js","../src/index","../src/mapfield.js","../src/message.js","../src/method.js","../src/namespace.js","../src/object.js","../src/oneof.js","../src/parse.js","../src/reader.js","../src/reader_buffer.js","../src/root.js","../src/roots.js","../src/rpc.js","../src/rpc/service.js","../src/service.js","../src/tokenize.js","../src/type.js","../src/types.js","../src/util.js","../src/util/longbits.js","../src/util/minimal.js","../src/verifier.js","../src/wrappers.js","../src/writer.js","../src/writer_buffer.js"],"names":["undefined","modules","cache","entries","$require","name","$module","call","exports","protobuf","util","global","define","amd","Long","isLong","configure","module","1","require","asPromise","fn","ctx","params","Array","arguments","length","offset","index","pending","Promise","resolve","reject","err","apply","base64","string","p","n","charAt","Math","ceil","b64","s64","i","encode","buffer","start","end","t","parts","chunk","j","b","push","String","fromCharCode","slice","join","decode","c","charCodeAt","Error","test","codegen","functionParams","functionName","Codegen","formatStringOrScope","source","toString","verbose","console","log","scopeKeys","Object","keys","scopeParams","scopeValues","scopeOffset","Function","formatParams","formatOffset","replace","$0","$1","value","floor","JSON","stringify","body","functionNameOverride","EventEmitter","this","_listeners","prototype","on","evt","off","listeners","splice","emit","args","fetch","filename","options","callback","xhr","fs","readFile","contents","XMLHttpRequest","binary","inquire","onreadystatechange","readyState","status","response","responseText","Uint8Array","overrideMimeType","responseType","open","send","factory","Float32Array","writeFloat_f32_cpy","val","buf","pos","f32","f8b","writeFloat_f32_rev","readFloat_f32_cpy","readFloat_f32_rev","le","writeFloatLE","writeFloatBE","readFloatLE","readFloatBE","writeFloat_ieee754","writeUint","sign","isNaN","round","exponent","LN2","mantissa","pow","readFloat_ieee754","readUint","uint","NaN","Infinity","bind","writeUintLE","writeUintBE","readUintLE","readUintBE","Float64Array","writeDouble_f64_cpy","f64","writeDouble_f64_rev","readDouble_f64_cpy","readDouble_f64_rev","writeDoubleLE","writeDoubleBE","readDoubleLE","readDoubleBE","writeDouble_ieee754","off0","off1","readDouble_ieee754","lo","hi","moduleName","mod","eval","e","path","isAbsolute","normalize","split","absolute","prefix","shift","originPath","includePath","alreadyNormalized","pool","alloc","size","SIZE","MAX","slab","utf8","len","read","write","c1","c2","common","json","commonRe","nested","google","Any","fields","type_url","type","id","timeType","Duration","seconds","nanos","Timestamp","Empty","Struct","keyType","Value","oneofs","kind","oneof","nullValue","numberValue","stringValue","boolValue","structValue","listValue","NullValue","values","NULL_VALUE","ListValue","rule","DoubleValue","FloatValue","Int64Value","UInt64Value","Int32Value","UInt32Value","BoolValue","StringValue","BytesValue","FieldMask","paths","get","file","genValuePartial_fromObject","gen","field","fieldIndex","prop","resolvedType","Enum","repeated","typeDefault","fullName","isUnsigned","genValuePartial_toObject","converter","fromObject","mtype","fieldsArray","safeProp","map","toObject","sort","compareFieldsById","repeatedFields","mapFields","normalFields","partOf","hasKs2","_fieldsArray","indexOf","missing","decoder","filter","group","ref","types","long","basic","packed","rfield","required","genTypePartial","encoder","wireType","mapKey","optional","comment","comments","ReflectionObject","TypeError","valuesById","create","reserved","constructor","className","Namespace","fromJSON","enm","toJSON","toJSONOptions","keepComments","add","isString","isInteger","isReservedId","isReservedName","allow_alias","remove","Field","extend","isObject","ruleRe","toLowerCase","message","defaultValue","bytes","extensionField","declaringField","_packed","Type","defineProperty","getOption","setOption","ifNotSet","resolved","defaults","parent","lookupTypeOrEnum","fromNumber","freeze","newBuffer","emptyObject","emptyArray","ctor","d","fieldId","fieldType","fieldRule","decorateType","decorateEnum","fieldName","default","_configure","Type_","load","root","Root","loadSync","build","verifier","OneOf","MapField","Service","Method","Message","wrappers","Reader","BufferReader","Writer","BufferWriter","rpc","roots","tokenize","parse","resolvedKeyType","fieldKeyType","fieldValueType","properties","$type","writer","encodeDelimited","reader","decodeDelimited","verify","object","requestType","requestStream","responseStream","resolvedRequestType","resolvedResponseType","lookupType","arrayToJSON","array","obj","_nestedArray","clearCache","namespace","addJSON","toArray","nestedArray","nestedJson","ns","names","methods","getEnum","prev","setOptions","onAdd","onRemove","isArray","ptr","part","resolveAll","lookup","filterTypes","parentAlreadyChecked","found","lookupEnum","lookupService","Service_","Enum_","defineProperties","unshift","_handleAdd","_handleRemove","Root_","fieldNames","addFieldsToParent","self","oneofName","oneOfGetter","set","oneOfSetter","illegal","token","insideTryCatch","tn","line","readString","next","skip","peek","readValue","acceptTypeRef","parseNumber","typeRefRe","readRanges","target","acceptStrings","parseId","substring","base10Re","parseInt","base16Re","base8Re","numberRe","parseFloat","acceptNegative","base10NegRe","base16NegRe","base8NegRe","parseCommon","parseOption","parseType","parseEnum","parseService","parseExtension","ifBlock","fnIf","fnElse","trailingLine","cmnt","nameRe","parseMapField","parseField","parseOneOf","extensions","isProto3","parseGroup","applyCase","parseInlineOptions","lcFirst","ucFirst","valueType","parseEnumValue","dummy","isCustom","fqTypeRefRe","parseOptionValue","service","parseMethod","method","reference","pkg","imports","weakImports","syntax","alternateCommentMode","head","keepCase","camelCase","whichImports","package","indexOutOfRange","writeLength","RangeError","readLongVarint","bits","LongBits","readFixed32_end","readFixed64","create_array","Buffer","isBuffer","_slice","subarray","uint32","int32","sint32","bool","fixed32","sfixed32","float","double","skipType","BufferReader_","merge","int64","uint64","sint64","zzDecode","fixed64","sfixed64","utf8Slice","min","deferred","files","SYNC","tryHandleExtension","extendedType","sisterField","resolvePath","finish","cb","sync","process","parsed","queued","weak","idx","lastIndexOf","altname","setTimeout","readFileSync","isNode","exposeRe","parse_","common_","rpcImpl","requestDelimited","responseDelimited","rpcCall","requestCtor","responseCtor","request","endedByRPC","_methodsArray","inherited","methodsArray","rpcService","methodName","isReserved","m","q","s","unescape","str","unescapeRe","unescapeMap","subject","re","stringDelim","stringSingleRe","stringDoubleRe","lastIndex","match","exec","setComment","commentType","commentLine","commentLineEmpty","lookback","commentOffset","lines","setCommentSplitRe","setCommentAltRe","setCommentRe","trim","commentText","isDoubleSlashCommentLine","startOffset","endOffset","findEndOfLine","cursor","stack","repeat","curr","isDoc","whitespaceRe","delimRe","expected","actual","ret","0","r","_fieldsById","_oneofsArray","_ctor","fieldsById","oneofsArray","generateConstructor","ctorProperties","setup","wrapper","originalThis","fork","ldelim","typeName","bake","o","key","safePropBackslashRe","safePropQuoteRe","toUpperCase","camelCaseRe","a","decorateRoot","enumerable","decorateEnumIndex","zero","toNumber","zzEncode","zeroHash","from","fromString","low","high","unsigned","toLong","fromHash","hash","toHash","mask","part0","part1","part2","dst","src","newError","CustomError","captureStackTrace","window","versions","node","Number","isFinite","isset","isSet","hasOwnProperty","utf8Write","_Buffer_from","_Buffer_allocUnsafe","sizeOrArray","dcodeIO","key2Re","key32Re","key64Re","longToHash","longFromHash","fromBits","ProtocolError","fieldMap","longs","enums","encoding","allocUnsafe","invalid","genVerifyValue","genVerifyKey","seenFirstField","oneofProp","substr","Op","noop","State","tail","states","writeByte","writeVarint32","VarintOp","writeVarint64","writeFixed32","_push","writeBytes","reset","BufferWriter_","writeStringBuffer","writeBytesBuffer","copy","byteLength"],"mappings":"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","file":"protobuf.min.js","sourcesContent":["(function prelude(modules, cache, entries) {\r\n\r\n    // This is the prelude used to bundle protobuf.js for the browser. Wraps up the CommonJS\r\n    // sources through a conflict-free require shim and is again wrapped within an iife that\r\n    // provides a minification-friendly `undefined` var plus a global \"use strict\" directive\r\n    // so that minification can remove the directives of each module.\r\n\r\n    function $require(name) {\r\n        var $module = cache[name];\r\n        if (!$module)\r\n            modules[name][0].call($module = cache[name] = { exports: {} }, $require, $module, $module.exports);\r\n        return $module.exports;\r\n    }\r\n\r\n    var protobuf = $require(entries[0]);\r\n\r\n    // Expose globally\r\n    protobuf.util.global.protobuf = protobuf;\r\n\r\n    // Be nice to AMD\r\n    if (typeof define === \"function\" && define.amd)\r\n        define([\"long\"], function(Long) {\r\n            if (Long && Long.isLong) {\r\n                protobuf.util.Long = Long;\r\n                protobuf.configure();\r\n            }\r\n            return protobuf;\r\n        });\r\n\r\n    // Be nice to CommonJS\r\n    if (typeof module === \"object\" && module && module.exports)\r\n        module.exports = protobuf;\r\n\r\n})/* end of prelude */","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Callback as used by {@link util.asPromise}.\r\n * @typedef asPromiseCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {...*} params Additional arguments\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {asPromiseCallback} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params  = new Array(arguments.length - 1),\r\n        offset  = 0,\r\n        index   = 2,\r\n        pending = true;\r\n    while (index < arguments.length)\r\n        params[offset++] = arguments[index++];\r\n    return new Promise(function executor(resolve, reject) {\r\n        params[offset] = function callback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var params = new Array(arguments.length - 1),\r\n                        offset = 0;\r\n                    while (offset < params.length)\r\n                        params[offset++] = arguments[offset];\r\n                    resolve.apply(null, params);\r\n                }\r\n            }\r\n        };\r\n        try {\r\n            fn.apply(ctx || null, params);\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var parts = null,\r\n        chunk = [];\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                chunk[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                chunk[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                chunk[i++] = b64[t | b >> 6];\r\n                chunk[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (j) {\r\n        chunk[i++] = b64[t];\r\n        chunk[i++] = 61;\r\n        if (j === 1)\r\n            chunk[i++] = 61;\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = codegen;\r\n\r\n/**\r\n * Begins generating a function.\r\n * @memberof util\r\n * @param {string[]} functionParams Function parameter names\r\n * @param {string} [functionName] Function name if not anonymous\r\n * @returns {Codegen} Appender that appends code to the function's body\r\n */\r\nfunction codegen(functionParams, functionName) {\r\n\r\n    /* istanbul ignore if */\r\n    if (typeof functionParams === \"string\") {\r\n        functionName = functionParams;\r\n        functionParams = undefined;\r\n    }\r\n\r\n    var body = [];\r\n\r\n    /**\r\n     * Appends code to the function's body or finishes generation.\r\n     * @typedef Codegen\r\n     * @type {function}\r\n     * @param {string|Object.<string,*>} [formatStringOrScope] Format string or, to finish the function, an object of additional scope variables, if any\r\n     * @param {...*} [formatParams] Format parameters\r\n     * @returns {Codegen|Function} Itself or the generated function if finished\r\n     * @throws {Error} If format parameter counts do not match\r\n     */\r\n\r\n    function Codegen(formatStringOrScope) {\r\n        // note that explicit array handling below makes this ~50% faster\r\n\r\n        // finish the function\r\n        if (typeof formatStringOrScope !== \"string\") {\r\n            var source = toString();\r\n            if (codegen.verbose)\r\n                console.log(\"codegen: \" + source); // eslint-disable-line no-console\r\n            source = \"return \" + source;\r\n            if (formatStringOrScope) {\r\n                var scopeKeys   = Object.keys(formatStringOrScope),\r\n                    scopeParams = new Array(scopeKeys.length + 1),\r\n                    scopeValues = new Array(scopeKeys.length),\r\n                    scopeOffset = 0;\r\n                while (scopeOffset < scopeKeys.length) {\r\n                    scopeParams[scopeOffset] = scopeKeys[scopeOffset];\r\n                    scopeValues[scopeOffset] = formatStringOrScope[scopeKeys[scopeOffset++]];\r\n                }\r\n                scopeParams[scopeOffset] = source;\r\n                return Function.apply(null, scopeParams).apply(null, scopeValues); // eslint-disable-line no-new-func\r\n            }\r\n            return Function(source)(); // eslint-disable-line no-new-func\r\n        }\r\n\r\n        // otherwise append to body\r\n        var formatParams = new Array(arguments.length - 1),\r\n            formatOffset = 0;\r\n        while (formatOffset < formatParams.length)\r\n            formatParams[formatOffset] = arguments[++formatOffset];\r\n        formatOffset = 0;\r\n        formatStringOrScope = formatStringOrScope.replace(/%([%dfijs])/g, function replace($0, $1) {\r\n            var value = formatParams[formatOffset++];\r\n            switch ($1) {\r\n                case \"d\": case \"f\": return String(Number(value));\r\n                case \"i\": return String(Math.floor(value));\r\n                case \"j\": return JSON.stringify(value);\r\n                case \"s\": return String(value);\r\n            }\r\n            return \"%\";\r\n        });\r\n        if (formatOffset !== formatParams.length)\r\n            throw Error(\"parameter count mismatch\");\r\n        body.push(formatStringOrScope);\r\n        return Codegen;\r\n    }\r\n\r\n    function toString(functionNameOverride) {\r\n        return \"function \" + (functionNameOverride || functionName || \"\") + \"(\" + (functionParams && functionParams.join(\",\") || \"\") + \"){\\n  \" + body.join(\"\\n  \") + \"\\n}\";\r\n    }\r\n\r\n    Codegen.toString = toString;\r\n    return Codegen;\r\n}\r\n\r\n/**\r\n * Begins generating a function.\r\n * @memberof util\r\n * @function codegen\r\n * @param {string} [functionName] Function name if not anonymous\r\n * @returns {Codegen} Appender that appends code to the function's body\r\n * @variation 2\r\n */\r\n\r\n/**\r\n * When set to `true`, codegen will log generated code to console. Useful for debugging.\r\n * @name util.codegen.verbose\r\n * @type {boolean}\r\n */\r\ncodegen.verbose = false;\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = fetch;\r\n\r\nvar asPromise = require(1),\r\n    inquire   = require(7);\r\n\r\nvar fs = inquire(\"fs\");\r\n\r\n/**\r\n * Node-style callback as used by {@link util.fetch}.\r\n * @typedef FetchCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {string} [contents] File contents, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Options as used by {@link util.fetch}.\r\n * @typedef FetchOptions\r\n * @type {Object}\r\n * @property {boolean} [binary=false] Whether expecting a binary response\r\n * @property {boolean} [xhr=false] If `true`, forces the use of XMLHttpRequest\r\n */\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @memberof util\r\n * @param {string} filename File path or url\r\n * @param {FetchOptions} options Fetch options\r\n * @param {FetchCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\nfunction fetch(filename, options, callback) {\r\n    if (typeof options === \"function\") {\r\n        callback = options;\r\n        options = {};\r\n    } else if (!options)\r\n        options = {};\r\n\r\n    if (!callback)\r\n        return asPromise(fetch, this, filename, options); // eslint-disable-line no-invalid-this\r\n\r\n    // if a node-like filesystem is present, try it first but fall back to XHR if nothing is found.\r\n    if (!options.xhr && fs && fs.readFile)\r\n        return fs.readFile(filename, function fetchReadFileCallback(err, contents) {\r\n            return err && typeof XMLHttpRequest !== \"undefined\"\r\n                ? fetch.xhr(filename, options, callback)\r\n                : err\r\n                ? callback(err)\r\n                : callback(null, options.binary ? contents : contents.toString(\"utf8\"));\r\n        });\r\n\r\n    // use the XHR version otherwise.\r\n    return fetch.xhr(filename, options, callback);\r\n}\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @name util.fetch\r\n * @function\r\n * @param {string} path File path or url\r\n * @param {FetchCallback} callback Callback function\r\n * @returns {undefined}\r\n * @variation 2\r\n */\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @name util.fetch\r\n * @function\r\n * @param {string} path File path or url\r\n * @param {FetchOptions} [options] Fetch options\r\n * @returns {Promise<string|Uint8Array>} Promise\r\n * @variation 3\r\n */\r\n\r\n/**/\r\nfetch.xhr = function fetch_xhr(filename, options, callback) {\r\n    var xhr = new XMLHttpRequest();\r\n    xhr.onreadystatechange /* works everywhere */ = function fetchOnReadyStateChange() {\r\n\r\n        if (xhr.readyState !== 4)\r\n            return undefined;\r\n\r\n        // local cors security errors return status 0 / empty string, too. afaik this cannot be\r\n        // reliably distinguished from an actually empty file for security reasons. feel free\r\n        // to send a pull request if you are aware of a solution.\r\n        if (xhr.status !== 0 && xhr.status !== 200)\r\n            return callback(Error(\"status \" + xhr.status));\r\n\r\n        // if binary data is expected, make sure that some sort of array is returned, even if\r\n        // ArrayBuffers are not supported. the binary string fallback, however, is unsafe.\r\n        if (options.binary) {\r\n            var buffer = xhr.response;\r\n            if (!buffer) {\r\n                buffer = [];\r\n                for (var i = 0; i < xhr.responseText.length; ++i)\r\n                    buffer.push(xhr.responseText.charCodeAt(i) & 255);\r\n            }\r\n            return callback(null, typeof Uint8Array !== \"undefined\" ? new Uint8Array(buffer) : buffer);\r\n        }\r\n        return callback(null, xhr.responseText);\r\n    };\r\n\r\n    if (options.binary) {\r\n        // ref: https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Sending_and_Receiving_Binary_Data#Receiving_binary_data_in_older_browsers\r\n        if (\"overrideMimeType\" in xhr)\r\n            xhr.overrideMimeType(\"text/plain; charset=x-user-defined\");\r\n        xhr.responseType = \"arraybuffer\";\r\n    }\r\n\r\n    xhr.open(\"GET\", filename);\r\n    xhr.send();\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = factory(factory);\r\n\r\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n// Factory function for the purpose of node-based testing in modified global environments\r\nfunction factory(exports) {\r\n\r\n    // float: typed array\r\n    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n        var f32 = new Float32Array([ -0 ]),\r\n            f8b = new Uint8Array(f32.buffer),\r\n            le  = f8b[3] === 128;\r\n\r\n        function writeFloat_f32_cpy(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n        }\r\n\r\n        function writeFloat_f32_rev(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[3];\r\n            buf[pos + 1] = f8b[2];\r\n            buf[pos + 2] = f8b[1];\r\n            buf[pos + 3] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n        function readFloat_f32_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        function readFloat_f32_rev(buf, pos) {\r\n            f8b[3] = buf[pos    ];\r\n            f8b[2] = buf[pos + 1];\r\n            f8b[1] = buf[pos + 2];\r\n            f8b[0] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n    // float: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0)\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n            else if (isNaN(val))\r\n                writeUint(2143289344, buf, pos);\r\n            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n            else if (val < 1.1754943508222875e-38) // denormal\r\n                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n            else {\r\n                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n            }\r\n        }\r\n\r\n        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n        function readFloat_ieee754(readUint, buf, pos) {\r\n            var uint = readUint(buf, pos),\r\n                sign = (uint >> 31) * 2 + 1,\r\n                exponent = uint >>> 23 & 255,\r\n                mantissa = uint & 8388607;\r\n            return exponent === 255\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 1.401298464324817e-45 * mantissa\r\n                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n        }\r\n\r\n        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n    })();\r\n\r\n    // double: typed array\r\n    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n        var f64 = new Float64Array([-0]),\r\n            f8b = new Uint8Array(f64.buffer),\r\n            le  = f8b[7] === 128;\r\n\r\n        function writeDouble_f64_cpy(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n            buf[pos + 4] = f8b[4];\r\n            buf[pos + 5] = f8b[5];\r\n            buf[pos + 6] = f8b[6];\r\n            buf[pos + 7] = f8b[7];\r\n        }\r\n\r\n        function writeDouble_f64_rev(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[7];\r\n            buf[pos + 1] = f8b[6];\r\n            buf[pos + 2] = f8b[5];\r\n            buf[pos + 3] = f8b[4];\r\n            buf[pos + 4] = f8b[3];\r\n            buf[pos + 5] = f8b[2];\r\n            buf[pos + 6] = f8b[1];\r\n            buf[pos + 7] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n        function readDouble_f64_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            f8b[4] = buf[pos + 4];\r\n            f8b[5] = buf[pos + 5];\r\n            f8b[6] = buf[pos + 6];\r\n            f8b[7] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        function readDouble_f64_rev(buf, pos) {\r\n            f8b[7] = buf[pos    ];\r\n            f8b[6] = buf[pos + 1];\r\n            f8b[5] = buf[pos + 2];\r\n            f8b[4] = buf[pos + 3];\r\n            f8b[3] = buf[pos + 4];\r\n            f8b[2] = buf[pos + 5];\r\n            f8b[1] = buf[pos + 6];\r\n            f8b[0] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n    // double: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n            } else if (isNaN(val)) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(2146959360, buf, pos + off1);\r\n            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n            } else {\r\n                var mantissa;\r\n                if (val < 2.2250738585072014e-308) { // denormal\r\n                    mantissa = val / 5e-324;\r\n                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n                } else {\r\n                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n                    if (exponent === 1024)\r\n                        exponent = 1023;\r\n                    mantissa = val * Math.pow(2, -exponent);\r\n                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n                }\r\n            }\r\n        }\r\n\r\n        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n            var lo = readUint(buf, pos + off0),\r\n                hi = readUint(buf, pos + off1);\r\n            var sign = (hi >> 31) * 2 + 1,\r\n                exponent = hi >>> 20 & 2047,\r\n                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n            return exponent === 2047\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 5e-324 * mantissa\r\n                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n        }\r\n\r\n        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n    })();\r\n\r\n    return exports;\r\n}\r\n\r\n// uint helpers\r\n\r\nfunction writeUintLE(val, buf, pos) {\r\n    buf[pos    ] =  val        & 255;\r\n    buf[pos + 1] =  val >>> 8  & 255;\r\n    buf[pos + 2] =  val >>> 16 & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\nfunction writeUintBE(val, buf, pos) {\r\n    buf[pos    ] =  val >>> 24;\r\n    buf[pos + 1] =  val >>> 16 & 255;\r\n    buf[pos + 2] =  val >>> 8  & 255;\r\n    buf[pos + 3] =  val        & 255;\r\n}\r\n\r\nfunction readUintLE(buf, pos) {\r\n    return (buf[pos    ]\r\n          | buf[pos + 1] << 8\r\n          | buf[pos + 2] << 16\r\n          | buf[pos + 3] << 24) >>> 0;\r\n}\r\n\r\nfunction readUintBE(buf, pos) {\r\n    return (buf[pos    ] << 24\r\n          | buf[pos + 1] << 16\r\n          | buf[pos + 2] << 8\r\n          | buf[pos + 3]) >>> 0;\r\n}\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal path module to resolve Unix, Windows and URL paths alike.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar path = exports;\r\n\r\nvar isAbsolute =\r\n/**\r\n * Tests if the specified path is absolute.\r\n * @param {string} path Path to test\r\n * @returns {boolean} `true` if path is absolute\r\n */\r\npath.isAbsolute = function isAbsolute(path) {\r\n    return /^(?:\\/|\\w+:)/.test(path);\r\n};\r\n\r\nvar normalize =\r\n/**\r\n * Normalizes the specified path.\r\n * @param {string} path Path to normalize\r\n * @returns {string} Normalized path\r\n */\r\npath.normalize = function normalize(path) {\r\n    path = path.replace(/\\\\/g, \"/\")\r\n               .replace(/\\/{2,}/g, \"/\");\r\n    var parts    = path.split(\"/\"),\r\n        absolute = isAbsolute(path),\r\n        prefix   = \"\";\r\n    if (absolute)\r\n        prefix = parts.shift() + \"/\";\r\n    for (var i = 0; i < parts.length;) {\r\n        if (parts[i] === \"..\") {\r\n            if (i > 0 && parts[i - 1] !== \"..\")\r\n                parts.splice(--i, 2);\r\n            else if (absolute)\r\n                parts.splice(i, 1);\r\n            else\r\n                ++i;\r\n        } else if (parts[i] === \".\")\r\n            parts.splice(i, 1);\r\n        else\r\n            ++i;\r\n    }\r\n    return prefix + parts.join(\"/\");\r\n};\r\n\r\n/**\r\n * Resolves the specified include path against the specified origin path.\r\n * @param {string} originPath Path to the origin file\r\n * @param {string} includePath Include path relative to origin path\r\n * @param {boolean} [alreadyNormalized=false] `true` if both paths are already known to be normalized\r\n * @returns {string} Path to the include file\r\n */\r\npath.resolve = function resolve(originPath, includePath, alreadyNormalized) {\r\n    if (!alreadyNormalized)\r\n        includePath = normalize(includePath);\r\n    if (isAbsolute(includePath))\r\n        return includePath;\r\n    if (!alreadyNormalized)\r\n        originPath = normalize(originPath);\r\n    return (originPath = originPath.replace(/(?:\\/|^)[^/]+$/, \"\")).length ? normalize(originPath + \"/\" + includePath) : includePath;\r\n};\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\nmodule.exports = common;\r\n\r\nvar commonRe = /\\/|\\./;\r\n\r\n/**\r\n * Provides common type definitions.\r\n * Can also be used to provide additional google types or your own custom types.\r\n * @param {string} name Short name as in `google/protobuf/[name].proto` or full file name\r\n * @param {Object.<string,*>} json JSON definition within `google.protobuf` if a short name, otherwise the file's root definition\r\n * @returns {undefined}\r\n * @property {INamespace} google/protobuf/any.proto Any\r\n * @property {INamespace} google/protobuf/duration.proto Duration\r\n * @property {INamespace} google/protobuf/empty.proto Empty\r\n * @property {INamespace} google/protobuf/field_mask.proto FieldMask\r\n * @property {INamespace} google/protobuf/struct.proto Struct, Value, NullValue and ListValue\r\n * @property {INamespace} google/protobuf/timestamp.proto Timestamp\r\n * @property {INamespace} google/protobuf/wrappers.proto Wrappers\r\n * @example\r\n * // manually provides descriptor.proto (assumes google/protobuf/ namespace and .proto extension)\r\n * protobuf.common(\"descriptor\", descriptorJson);\r\n *\r\n * // manually provides a custom definition (uses my.foo namespace)\r\n * protobuf.common(\"my/foo/bar.proto\", myFooBarJson);\r\n */\r\nfunction common(name, json) {\r\n    if (!commonRe.test(name)) {\r\n        name = \"google/protobuf/\" + name + \".proto\";\r\n        json = { nested: { google: { nested: { protobuf: { nested: json } } } } };\r\n    }\r\n    common[name] = json;\r\n}\r\n\r\n// Not provided because of limited use (feel free to discuss or to provide yourself):\r\n//\r\n// google/protobuf/descriptor.proto\r\n// google/protobuf/source_context.proto\r\n// google/protobuf/type.proto\r\n//\r\n// Stripped and pre-parsed versions of these non-bundled files are instead available as part of\r\n// the repository or package within the google/protobuf directory.\r\n\r\ncommon(\"any\", {\r\n\r\n    /**\r\n     * Properties of a google.protobuf.Any message.\r\n     * @interface IAny\r\n     * @type {Object}\r\n     * @property {string} [typeUrl]\r\n     * @property {Uint8Array} [bytes]\r\n     * @memberof common\r\n     */\r\n    Any: {\r\n        fields: {\r\n            type_url: {\r\n                type: \"string\",\r\n                id: 1\r\n            },\r\n            value: {\r\n                type: \"bytes\",\r\n                id: 2\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\nvar timeType;\r\n\r\ncommon(\"duration\", {\r\n\r\n    /**\r\n     * Properties of a google.protobuf.Duration message.\r\n     * @interface IDuration\r\n     * @type {Object}\r\n     * @property {number|Long} [seconds]\r\n     * @property {number} [nanos]\r\n     * @memberof common\r\n     */\r\n    Duration: timeType = {\r\n        fields: {\r\n            seconds: {\r\n                type: \"int64\",\r\n                id: 1\r\n            },\r\n            nanos: {\r\n                type: \"int32\",\r\n                id: 2\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\ncommon(\"timestamp\", {\r\n\r\n    /**\r\n     * Properties of a google.protobuf.Timestamp message.\r\n     * @interface ITimestamp\r\n     * @type {Object}\r\n     * @property {number|Long} [seconds]\r\n     * @property {number} [nanos]\r\n     * @memberof common\r\n     */\r\n    Timestamp: timeType\r\n});\r\n\r\ncommon(\"empty\", {\r\n\r\n    /**\r\n     * Properties of a google.protobuf.Empty message.\r\n     * @interface IEmpty\r\n     * @memberof common\r\n     */\r\n    Empty: {\r\n        fields: {}\r\n    }\r\n});\r\n\r\ncommon(\"struct\", {\r\n\r\n    /**\r\n     * Properties of a google.protobuf.Struct message.\r\n     * @interface IStruct\r\n     * @type {Object}\r\n     * @property {Object.<string,IValue>} [fields]\r\n     * @memberof common\r\n     */\r\n    Struct: {\r\n        fields: {\r\n            fields: {\r\n                keyType: \"string\",\r\n                type: \"Value\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Properties of a google.protobuf.Value message.\r\n     * @interface IValue\r\n     * @type {Object}\r\n     * @property {string} [kind]\r\n     * @property {0} [nullValue]\r\n     * @property {number} [numberValue]\r\n     * @property {string} [stringValue]\r\n     * @property {boolean} [boolValue]\r\n     * @property {IStruct} [structValue]\r\n     * @property {IListValue} [listValue]\r\n     * @memberof common\r\n     */\r\n    Value: {\r\n        oneofs: {\r\n            kind: {\r\n                oneof: [\r\n                    \"nullValue\",\r\n                    \"numberValue\",\r\n                    \"stringValue\",\r\n                    \"boolValue\",\r\n                    \"structValue\",\r\n                    \"listValue\"\r\n                ]\r\n            }\r\n        },\r\n        fields: {\r\n            nullValue: {\r\n                type: \"NullValue\",\r\n                id: 1\r\n            },\r\n            numberValue: {\r\n                type: \"double\",\r\n                id: 2\r\n            },\r\n            stringValue: {\r\n                type: \"string\",\r\n                id: 3\r\n            },\r\n            boolValue: {\r\n                type: \"bool\",\r\n                id: 4\r\n            },\r\n            structValue: {\r\n                type: \"Struct\",\r\n                id: 5\r\n            },\r\n            listValue: {\r\n                type: \"ListValue\",\r\n                id: 6\r\n            }\r\n        }\r\n    },\r\n\r\n    NullValue: {\r\n        values: {\r\n            NULL_VALUE: 0\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Properties of a google.protobuf.ListValue message.\r\n     * @interface IListValue\r\n     * @type {Object}\r\n     * @property {Array.<IValue>} [values]\r\n     * @memberof common\r\n     */\r\n    ListValue: {\r\n        fields: {\r\n            values: {\r\n                rule: \"repeated\",\r\n                type: \"Value\",\r\n                id: 1\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\ncommon(\"wrappers\", {\r\n\r\n    /**\r\n     * Properties of a google.protobuf.DoubleValue message.\r\n     * @interface IDoubleValue\r\n     * @type {Object}\r\n     * @property {number} [value]\r\n     * @memberof common\r\n     */\r\n    DoubleValue: {\r\n        fields: {\r\n            value: {\r\n                type: \"double\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Properties of a google.protobuf.FloatValue message.\r\n     * @interface IFloatValue\r\n     * @type {Object}\r\n     * @property {number} [value]\r\n     * @memberof common\r\n     */\r\n    FloatValue: {\r\n        fields: {\r\n            value: {\r\n                type: \"float\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Properties of a google.protobuf.Int64Value message.\r\n     * @interface IInt64Value\r\n     * @type {Object}\r\n     * @property {number|Long} [value]\r\n     * @memberof common\r\n     */\r\n    Int64Value: {\r\n        fields: {\r\n            value: {\r\n                type: \"int64\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Properties of a google.protobuf.UInt64Value message.\r\n     * @interface IUInt64Value\r\n     * @type {Object}\r\n     * @property {number|Long} [value]\r\n     * @memberof common\r\n     */\r\n    UInt64Value: {\r\n        fields: {\r\n            value: {\r\n                type: \"uint64\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Properties of a google.protobuf.Int32Value message.\r\n     * @interface IInt32Value\r\n     * @type {Object}\r\n     * @property {number} [value]\r\n     * @memberof common\r\n     */\r\n    Int32Value: {\r\n        fields: {\r\n            value: {\r\n                type: \"int32\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Properties of a google.protobuf.UInt32Value message.\r\n     * @interface IUInt32Value\r\n     * @type {Object}\r\n     * @property {number} [value]\r\n     * @memberof common\r\n     */\r\n    UInt32Value: {\r\n        fields: {\r\n            value: {\r\n                type: \"uint32\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Properties of a google.protobuf.BoolValue message.\r\n     * @interface IBoolValue\r\n     * @type {Object}\r\n     * @property {boolean} [value]\r\n     * @memberof common\r\n     */\r\n    BoolValue: {\r\n        fields: {\r\n            value: {\r\n                type: \"bool\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Properties of a google.protobuf.StringValue message.\r\n     * @interface IStringValue\r\n     * @type {Object}\r\n     * @property {string} [value]\r\n     * @memberof common\r\n     */\r\n    StringValue: {\r\n        fields: {\r\n            value: {\r\n                type: \"string\",\r\n                id: 1\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Properties of a google.protobuf.BytesValue message.\r\n     * @interface IBytesValue\r\n     * @type {Object}\r\n     * @property {Uint8Array} [value]\r\n     * @memberof common\r\n     */\r\n    BytesValue: {\r\n        fields: {\r\n            value: {\r\n                type: \"bytes\",\r\n                id: 1\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\ncommon(\"field_mask\", {\r\n\r\n    /**\r\n     * Properties of a google.protobuf.FieldMask message.\r\n     * @interface IDoubleValue\r\n     * @type {Object}\r\n     * @property {number} [value]\r\n     * @memberof common\r\n     */\r\n    FieldMask: {\r\n        fields: {\r\n            paths: {\r\n                rule: \"repeated\",\r\n                type: \"string\",\r\n                id: 1\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n * Gets the root definition of the specified common proto file.\r\n *\r\n * Bundled definitions are:\r\n * - google/protobuf/any.proto\r\n * - google/protobuf/duration.proto\r\n * - google/protobuf/empty.proto\r\n * - google/protobuf/field_mask.proto\r\n * - google/protobuf/struct.proto\r\n * - google/protobuf/timestamp.proto\r\n * - google/protobuf/wrappers.proto\r\n *\r\n * @param {string} file Proto file name\r\n * @returns {INamespace|null} Root definition or `null` if not defined\r\n */\r\ncommon.get = function get(file) {\r\n    return common[file] || null;\r\n};\r\n","\"use strict\";\r\n/**\r\n * Runtime message from/to plain object converters.\r\n * @namespace\r\n */\r\nvar converter = exports;\r\n\r\nvar Enum = require(15),\r\n    util = require(37);\r\n\r\n/**\r\n * Generates a partial value fromObject conveter.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} prop Property reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genValuePartial_fromObject(gen, field, fieldIndex, prop) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    if (field.resolvedType) {\r\n        if (field.resolvedType instanceof Enum) { gen\r\n            (\"switch(d%s){\", prop);\r\n            for (var values = field.resolvedType.values, keys = Object.keys(values), i = 0; i < keys.length; ++i) {\r\n                if (field.repeated && values[keys[i]] === field.typeDefault) gen\r\n                (\"default:\");\r\n                gen\r\n                (\"case%j:\", keys[i])\r\n                (\"case %i:\", values[keys[i]])\r\n                    (\"m%s=%j\", prop, values[keys[i]])\r\n                    (\"break\");\r\n            } gen\r\n            (\"}\");\r\n        } else gen\r\n            (\"if(typeof d%s!==\\\"object\\\")\", prop)\r\n                (\"throw TypeError(%j)\", field.fullName + \": object expected\")\r\n            (\"m%s=types[%i].fromObject(d%s)\", prop, fieldIndex, prop);\r\n    } else {\r\n        var isUnsigned = false;\r\n        switch (field.type) {\r\n            case \"double\":\r\n            case \"float\": gen\r\n                (\"m%s=Number(d%s)\", prop, prop); // also catches \"NaN\", \"Infinity\"\r\n                break;\r\n            case \"uint32\":\r\n            case \"fixed32\": gen\r\n                (\"m%s=d%s>>>0\", prop, prop);\r\n                break;\r\n            case \"int32\":\r\n            case \"sint32\":\r\n            case \"sfixed32\": gen\r\n                (\"m%s=d%s|0\", prop, prop);\r\n                break;\r\n            case \"uint64\":\r\n                isUnsigned = true;\r\n                // eslint-disable-line no-fallthrough\r\n            case \"int64\":\r\n            case \"sint64\":\r\n            case \"fixed64\":\r\n            case \"sfixed64\": gen\r\n                (\"if(util.Long)\")\r\n                    (\"(m%s=util.Long.fromValue(d%s)).unsigned=%j\", prop, prop, isUnsigned)\r\n                (\"else if(typeof d%s===\\\"string\\\")\", prop)\r\n                    (\"m%s=parseInt(d%s,10)\", prop, prop)\r\n                (\"else if(typeof d%s===\\\"number\\\")\", prop)\r\n                    (\"m%s=d%s\", prop, prop)\r\n                (\"else if(typeof d%s===\\\"object\\\")\", prop)\r\n                    (\"m%s=new util.LongBits(d%s.low>>>0,d%s.high>>>0).toNumber(%s)\", prop, prop, prop, isUnsigned ? \"true\" : \"\");\r\n                break;\r\n            case \"bytes\": gen\r\n                (\"if(typeof d%s===\\\"string\\\")\", prop)\r\n                    (\"util.base64.decode(d%s,m%s=util.newBuffer(util.base64.length(d%s)),0)\", prop, prop, prop)\r\n                (\"else if(d%s.length)\", prop)\r\n                    (\"m%s=d%s\", prop, prop);\r\n                break;\r\n            case \"string\": gen\r\n                (\"m%s=String(d%s)\", prop, prop);\r\n                break;\r\n            case \"bool\": gen\r\n                (\"m%s=Boolean(d%s)\", prop, prop);\r\n                break;\r\n            /* default: gen\r\n                (\"m%s=d%s\", prop, prop);\r\n                break; */\r\n        }\r\n    }\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n}\r\n\r\n/**\r\n * Generates a plain object to runtime message converter specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nconverter.fromObject = function fromObject(mtype) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    var fields = mtype.fieldsArray;\r\n    var gen = util.codegen([\"d\"], mtype.name + \"$fromObject\")\r\n    (\"if(d instanceof this.ctor)\")\r\n        (\"return d\");\r\n    if (!fields.length) return gen\r\n    (\"return new this.ctor\");\r\n    gen\r\n    (\"var m=new this.ctor\");\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field  = fields[i].resolve(),\r\n            prop   = util.safeProp(field.name);\r\n\r\n        // Map fields\r\n        if (field.map) { gen\r\n    (\"if(d%s){\", prop)\r\n        (\"if(typeof d%s!==\\\"object\\\")\", prop)\r\n            (\"throw TypeError(%j)\", field.fullName + \": object expected\")\r\n        (\"m%s={}\", prop)\r\n        (\"for(var ks=Object.keys(d%s),i=0;i<ks.length;++i){\", prop);\r\n            genValuePartial_fromObject(gen, field, /* not sorted */ i, prop + \"[ks[i]]\")\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) { gen\r\n    (\"if(d%s){\", prop)\r\n        (\"if(!Array.isArray(d%s))\", prop)\r\n            (\"throw TypeError(%j)\", field.fullName + \": array expected\")\r\n        (\"m%s=[]\", prop)\r\n        (\"for(var i=0;i<d%s.length;++i){\", prop);\r\n            genValuePartial_fromObject(gen, field, /* not sorted */ i, prop + \"[i]\")\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n        // Non-repeated fields\r\n        } else {\r\n            if (!(field.resolvedType instanceof Enum)) gen // no need to test for null/undefined if an enum (uses switch)\r\n    (\"if(d%s!=null){\", prop); // !== undefined && !== null\r\n        genValuePartial_fromObject(gen, field, /* not sorted */ i, prop);\r\n            if (!(field.resolvedType instanceof Enum)) gen\r\n    (\"}\");\r\n        }\r\n    } return gen\r\n    (\"return m\");\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n};\r\n\r\n/**\r\n * Generates a partial value toObject converter.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} prop Property reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genValuePartial_toObject(gen, field, fieldIndex, prop) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    if (field.resolvedType) {\r\n        if (field.resolvedType instanceof Enum) gen\r\n            (\"d%s=o.enums===String?types[%i].values[m%s]:m%s\", prop, fieldIndex, prop, prop);\r\n        else gen\r\n            (\"d%s=types[%i].toObject(m%s,o)\", prop, fieldIndex, prop);\r\n    } else {\r\n        var isUnsigned = false;\r\n        switch (field.type) {\r\n            case \"double\":\r\n            case \"float\": gen\r\n            (\"d%s=o.json&&!isFinite(m%s)?String(m%s):m%s\", prop, prop, prop, prop);\r\n                break;\r\n            case \"uint64\":\r\n                isUnsigned = true;\r\n                // eslint-disable-line no-fallthrough\r\n            case \"int64\":\r\n            case \"sint64\":\r\n            case \"fixed64\":\r\n            case \"sfixed64\": gen\r\n            (\"if(typeof m%s===\\\"number\\\")\", prop)\r\n                (\"d%s=o.longs===String?String(m%s):m%s\", prop, prop, prop)\r\n            (\"else\") // Long-like\r\n                (\"d%s=o.longs===String?util.Long.prototype.toString.call(m%s):o.longs===Number?new util.LongBits(m%s.low>>>0,m%s.high>>>0).toNumber(%s):m%s\", prop, prop, prop, prop, isUnsigned ? \"true\": \"\", prop);\r\n                break;\r\n            case \"bytes\": gen\r\n            (\"d%s=o.bytes===String?util.base64.encode(m%s,0,m%s.length):o.bytes===Array?Array.prototype.slice.call(m%s):m%s\", prop, prop, prop, prop, prop);\r\n                break;\r\n            default: gen\r\n            (\"d%s=m%s\", prop, prop);\r\n                break;\r\n        }\r\n    }\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n}\r\n\r\n/**\r\n * Generates a runtime message to plain object converter specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nconverter.toObject = function toObject(mtype) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    var fields = mtype.fieldsArray.slice().sort(util.compareFieldsById);\r\n    if (!fields.length)\r\n        return util.codegen()(\"return {}\");\r\n    var gen = util.codegen([\"m\", \"o\"], mtype.name + \"$toObject\")\r\n    (\"if(!o)\")\r\n        (\"o={}\")\r\n    (\"var d={}\");\r\n\r\n    var repeatedFields = [],\r\n        mapFields = [],\r\n        normalFields = [],\r\n        i = 0;\r\n    for (; i < fields.length; ++i)\r\n        if (!fields[i].partOf)\r\n            ( fields[i].resolve().repeated ? repeatedFields\r\n            : fields[i].map ? mapFields\r\n            : normalFields).push(fields[i]);\r\n\r\n    if (repeatedFields.length) { gen\r\n    (\"if(o.arrays||o.defaults){\");\r\n        for (i = 0; i < repeatedFields.length; ++i) gen\r\n        (\"d%s=[]\", util.safeProp(repeatedFields[i].name));\r\n        gen\r\n    (\"}\");\r\n    }\r\n\r\n    if (mapFields.length) { gen\r\n    (\"if(o.objects||o.defaults){\");\r\n        for (i = 0; i < mapFields.length; ++i) gen\r\n        (\"d%s={}\", util.safeProp(mapFields[i].name));\r\n        gen\r\n    (\"}\");\r\n    }\r\n\r\n    if (normalFields.length) { gen\r\n    (\"if(o.defaults){\");\r\n        for (i = 0; i < normalFields.length; ++i) {\r\n            var field = normalFields[i],\r\n                prop  = util.safeProp(field.name);\r\n            if (field.resolvedType instanceof Enum) gen\r\n        (\"d%s=o.enums===String?%j:%j\", prop, field.resolvedType.valuesById[field.typeDefault], field.typeDefault);\r\n            else if (field.long) gen\r\n        (\"if(util.Long){\")\r\n            (\"var n=new util.Long(%i,%i,%j)\", field.typeDefault.low, field.typeDefault.high, field.typeDefault.unsigned)\r\n            (\"d%s=o.longs===String?n.toString():o.longs===Number?n.toNumber():n\", prop)\r\n        (\"}else\")\r\n            (\"d%s=o.longs===String?%j:%i\", prop, field.typeDefault.toString(), field.typeDefault.toNumber());\r\n            else if (field.bytes) gen\r\n        (\"d%s=o.bytes===String?%j:%s\", prop, String.fromCharCode.apply(String, field.typeDefault), \"[\" + Array.prototype.slice.call(field.typeDefault).join(\",\") + \"]\");\r\n            else gen\r\n        (\"d%s=%j\", prop, field.typeDefault); // also messages (=null)\r\n        } gen\r\n    (\"}\");\r\n    }\r\n    var hasKs2 = false;\r\n    for (i = 0; i < fields.length; ++i) {\r\n        var field = fields[i],\r\n            index = mtype._fieldsArray.indexOf(field),\r\n            prop  = util.safeProp(field.name);\r\n        if (field.map) {\r\n            if (!hasKs2) { hasKs2 = true; gen\r\n    (\"var ks2\");\r\n            } gen\r\n    (\"if(m%s&&(ks2=Object.keys(m%s)).length){\", prop, prop)\r\n        (\"d%s={}\", prop)\r\n        (\"for(var j=0;j<ks2.length;++j){\");\r\n            genValuePartial_toObject(gen, field, /* sorted */ index, prop + \"[ks2[j]]\")\r\n        (\"}\");\r\n        } else if (field.repeated) { gen\r\n    (\"if(m%s&&m%s.length){\", prop, prop)\r\n        (\"d%s=[]\", prop)\r\n        (\"for(var j=0;j<m%s.length;++j){\", prop);\r\n            genValuePartial_toObject(gen, field, /* sorted */ index, prop + \"[j]\")\r\n        (\"}\");\r\n        } else { gen\r\n    (\"if(m%s!=null&&m.hasOwnProperty(%j)){\", prop, field.name); // !== undefined && !== null\r\n        genValuePartial_toObject(gen, field, /* sorted */ index, prop);\r\n        if (field.partOf) gen\r\n        (\"if(o.oneofs)\")\r\n            (\"d%s=%j\", util.safeProp(field.partOf.name), field.name);\r\n        }\r\n        gen\r\n    (\"}\");\r\n    }\r\n    return gen\r\n    (\"return d\");\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n};\r\n","\"use strict\";\r\nmodule.exports = decoder;\r\n\r\nvar Enum    = require(15),\r\n    types   = require(36),\r\n    util    = require(37);\r\n\r\nfunction missing(field) {\r\n    return \"missing required '\" + field.name + \"'\";\r\n}\r\n\r\n/**\r\n * Generates a decoder specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nfunction decoder(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var gen = util.codegen([\"r\", \"l\"], mtype.name + \"$decode\")\r\n    (\"if(!(r instanceof Reader))\")\r\n        (\"r=Reader.create(r)\")\r\n    (\"var c=l===undefined?r.len:r.pos+l,m=new this.ctor\" + (mtype.fieldsArray.filter(function(field) { return field.map; }).length ? \",k\" : \"\"))\r\n    (\"while(r.pos<c){\")\r\n        (\"var t=r.uint32()\");\r\n    if (mtype.group) gen\r\n        (\"if((t&7)===4)\")\r\n            (\"break\");\r\n    gen\r\n        (\"switch(t>>>3){\");\r\n\r\n    var i = 0;\r\n    for (; i < /* initializes */ mtype.fieldsArray.length; ++i) {\r\n        var field = mtype._fieldsArray[i].resolve(),\r\n            type  = field.resolvedType instanceof Enum ? \"int32\" : field.type,\r\n            ref   = \"m\" + util.safeProp(field.name); gen\r\n            (\"case %i:\", field.id);\r\n\r\n        // Map fields\r\n        if (field.map) { gen\r\n                (\"r.skip().pos++\") // assumes id 1 + key wireType\r\n                (\"if(%s===util.emptyObject)\", ref)\r\n                    (\"%s={}\", ref)\r\n                (\"k=r.%s()\", field.keyType)\r\n                (\"r.pos++\"); // assumes id 2 + value wireType\r\n            if (types.long[field.keyType] !== undefined) {\r\n                if (types.basic[type] === undefined) gen\r\n                (\"%s[typeof k===\\\"object\\\"?util.longToHash(k):k]=types[%i].decode(r,r.uint32())\", ref, i); // can't be groups\r\n                else gen\r\n                (\"%s[typeof k===\\\"object\\\"?util.longToHash(k):k]=r.%s()\", ref, type);\r\n            } else {\r\n                if (types.basic[type] === undefined) gen\r\n                (\"%s[k]=types[%i].decode(r,r.uint32())\", ref, i); // can't be groups\r\n                else gen\r\n                (\"%s[k]=r.%s()\", ref, type);\r\n            }\r\n\r\n        // Repeated fields\r\n        } else if (field.repeated) { gen\r\n\r\n                (\"if(!(%s&&%s.length))\", ref, ref)\r\n                    (\"%s=[]\", ref);\r\n\r\n            // Packable (always check for forward and backward compatiblity)\r\n            if (types.packed[type] !== undefined) gen\r\n                (\"if((t&7)===2){\")\r\n                    (\"var c2=r.uint32()+r.pos\")\r\n                    (\"while(r.pos<c2)\")\r\n                        (\"%s.push(r.%s())\", ref, type)\r\n                (\"}else\");\r\n\r\n            // Non-packed\r\n            if (types.basic[type] === undefined) gen(field.resolvedType.group\r\n                    ? \"%s.push(types[%i].decode(r))\"\r\n                    : \"%s.push(types[%i].decode(r,r.uint32()))\", ref, i);\r\n            else gen\r\n                    (\"%s.push(r.%s())\", ref, type);\r\n\r\n        // Non-repeated\r\n        } else if (types.basic[type] === undefined) gen(field.resolvedType.group\r\n                ? \"%s=types[%i].decode(r)\"\r\n                : \"%s=types[%i].decode(r,r.uint32())\", ref, i);\r\n        else gen\r\n                (\"%s=r.%s()\", ref, type);\r\n        gen\r\n                (\"break\");\r\n    // Unknown fields\r\n    } gen\r\n            (\"default:\")\r\n                (\"r.skipType(t&7)\")\r\n                (\"break\")\r\n\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n    // Field presence\r\n    for (i = 0; i < mtype._fieldsArray.length; ++i) {\r\n        var rfield = mtype._fieldsArray[i];\r\n        if (rfield.required) gen\r\n    (\"if(!m.hasOwnProperty(%j))\", rfield.name)\r\n        (\"throw util.ProtocolError(%j,{instance:m})\", missing(rfield));\r\n    }\r\n\r\n    return gen\r\n    (\"return m\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n","\"use strict\";\r\nmodule.exports = encoder;\r\n\r\nvar Enum     = require(15),\r\n    types    = require(36),\r\n    util     = require(37);\r\n\r\n/**\r\n * Generates a partial message type encoder.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} ref Variable reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genTypePartial(gen, field, fieldIndex, ref) {\r\n    return field.resolvedType.group\r\n        ? gen(\"types[%i].encode(%s,w.uint32(%i)).uint32(%i)\", fieldIndex, ref, (field.id << 3 | 3) >>> 0, (field.id << 3 | 4) >>> 0)\r\n        : gen(\"types[%i].encode(%s,w.uint32(%i).fork()).ldelim()\", fieldIndex, ref, (field.id << 3 | 2) >>> 0);\r\n}\r\n\r\n/**\r\n * Generates an encoder specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nfunction encoder(mtype) {\r\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n    var gen = util.codegen([\"m\", \"w\"], mtype.name + \"$encode\")\r\n    (\"if(!w)\")\r\n        (\"w=Writer.create()\");\r\n\r\n    var i, ref;\r\n\r\n    // \"when a message is serialized its known fields should be written sequentially by field number\"\r\n    var fields = /* initializes */ mtype.fieldsArray.slice().sort(util.compareFieldsById);\r\n\r\n    for (var i = 0; i < fields.length; ++i) {\r\n        var field    = fields[i].resolve(),\r\n            index    = mtype._fieldsArray.indexOf(field),\r\n            type     = field.resolvedType instanceof Enum ? \"int32\" : field.type,\r\n            wireType = types.basic[type];\r\n            ref      = \"m\" + util.safeProp(field.name);\r\n\r\n        // Map fields\r\n        if (field.map) {\r\n            gen\r\n    (\"if(%s!=null&&m.hasOwnProperty(%j)){\", ref, field.name) // !== undefined && !== null\r\n        (\"for(var ks=Object.keys(%s),i=0;i<ks.length;++i){\", ref)\r\n            (\"w.uint32(%i).fork().uint32(%i).%s(ks[i])\", (field.id << 3 | 2) >>> 0, 8 | types.mapKey[field.keyType], field.keyType);\r\n            if (wireType === undefined) gen\r\n            (\"types[%i].encode(%s[ks[i]],w.uint32(18).fork()).ldelim().ldelim()\", index, ref); // can't be groups\r\n            else gen\r\n            (\".uint32(%i).%s(%s[ks[i]]).ldelim()\", 16 | wireType, type, ref);\r\n            gen\r\n        (\"}\")\r\n    (\"}\");\r\n\r\n            // Repeated fields\r\n        } else if (field.repeated) { gen\r\n    (\"if(%s!=null&&%s.length){\", ref, ref); // !== undefined && !== null\r\n\r\n            // Packed repeated\r\n            if (field.packed && types.packed[type] !== undefined) { gen\r\n\r\n        (\"w.uint32(%i).fork()\", (field.id << 3 | 2) >>> 0)\r\n        (\"for(var i=0;i<%s.length;++i)\", ref)\r\n            (\"w.%s(%s[i])\", type, ref)\r\n        (\"w.ldelim()\");\r\n\r\n            // Non-packed\r\n            } else { gen\r\n\r\n        (\"for(var i=0;i<%s.length;++i)\", ref);\r\n                if (wireType === undefined)\r\n            genTypePartial(gen, field, index, ref + \"[i]\");\r\n                else gen\r\n            (\"w.uint32(%i).%s(%s[i])\", (field.id << 3 | wireType) >>> 0, type, ref);\r\n\r\n            } gen\r\n    (\"}\");\r\n\r\n        // Non-repeated\r\n        } else {\r\n            if (field.optional) gen\r\n    (\"if(%s!=null&&m.hasOwnProperty(%j))\", ref, field.name); // !== undefined && !== null\r\n\r\n            if (wireType === undefined)\r\n        genTypePartial(gen, field, index, ref);\r\n            else gen\r\n        (\"w.uint32(%i).%s(%s)\", (field.id << 3 | wireType) >>> 0, type, ref);\r\n\r\n        }\r\n    }\r\n\r\n    return gen\r\n    (\"return w\");\r\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\r\n}","\"use strict\";\r\nmodule.exports = Enum;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(24);\r\n((Enum.prototype = Object.create(ReflectionObject.prototype)).constructor = Enum).className = \"Enum\";\r\n\r\nvar Namespace = require(23),\r\n    util = require(37);\r\n\r\n/**\r\n * Constructs a new enum instance.\r\n * @classdesc Reflected enum.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {Object.<string,number>} [values] Enum values as an object, by name\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @param {string} [comment] The comment for this enum\r\n * @param {Object.<string,string>} [comments] The value comments for this enum\r\n */\r\nfunction Enum(name, values, options, comment, comments) {\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    if (values && typeof values !== \"object\")\r\n        throw TypeError(\"values must be an object\");\r\n\r\n    /**\r\n     * Enum values by id.\r\n     * @type {Object.<number,string>}\r\n     */\r\n    this.valuesById = {};\r\n\r\n    /**\r\n     * Enum values by name.\r\n     * @type {Object.<string,number>}\r\n     */\r\n    this.values = Object.create(this.valuesById); // toJSON, marker\r\n\r\n    /**\r\n     * Enum comment text.\r\n     * @type {string|null}\r\n     */\r\n    this.comment = comment;\r\n\r\n    /**\r\n     * Value comment texts, if any.\r\n     * @type {Object.<string,string>}\r\n     */\r\n    this.comments = comments || {};\r\n\r\n    /**\r\n     * Reserved ranges, if any.\r\n     * @type {Array.<number[]|string>}\r\n     */\r\n    this.reserved = undefined; // toJSON\r\n\r\n    // Note that values inherit valuesById on their prototype which makes them a TypeScript-\r\n    // compatible enum. This is used by pbts to write actual enum definitions that work for\r\n    // static and reflection code alike instead of emitting generic object definitions.\r\n\r\n    if (values)\r\n        for (var keys = Object.keys(values), i = 0; i < keys.length; ++i)\r\n            if (typeof values[keys[i]] === \"number\") // use forward entries only\r\n                this.valuesById[ this.values[keys[i]] = values[keys[i]] ] = keys[i];\r\n}\r\n\r\n/**\r\n * Enum descriptor.\r\n * @interface IEnum\r\n * @property {Object.<string,number>} values Enum values\r\n * @property {Object.<string,*>} [options] Enum options\r\n */\r\n\r\n/**\r\n * Constructs an enum from an enum descriptor.\r\n * @param {string} name Enum name\r\n * @param {IEnum} json Enum descriptor\r\n * @returns {Enum} Created enum\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nEnum.fromJSON = function fromJSON(name, json) {\r\n    var enm = new Enum(name, json.values, json.options, json.comment, json.comments);\r\n    enm.reserved = json.reserved;\r\n    return enm;\r\n};\r\n\r\n/**\r\n * Converts this enum to an enum descriptor.\r\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\r\n * @returns {IEnum} Enum descriptor\r\n */\r\nEnum.prototype.toJSON = function toJSON(toJSONOptions) {\r\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\r\n    return util.toObject([\r\n        \"options\"  , this.options,\r\n        \"values\"   , this.values,\r\n        \"reserved\" , this.reserved && this.reserved.length ? this.reserved : undefined,\r\n        \"comment\"  , keepComments ? this.comment : undefined,\r\n        \"comments\" , keepComments ? this.comments : undefined\r\n    ]);\r\n};\r\n\r\n/**\r\n * Adds a value to this enum.\r\n * @param {string} name Value name\r\n * @param {number} id Value id\r\n * @param {string} [comment] Comment, if any\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a value with this name or id\r\n */\r\nEnum.prototype.add = function add(name, id, comment) {\r\n    // utilized by the parser but not by .fromJSON\r\n\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name must be a string\");\r\n\r\n    if (!util.isInteger(id))\r\n        throw TypeError(\"id must be an integer\");\r\n\r\n    if (this.values[name] !== undefined)\r\n        throw Error(\"duplicate name '\" + name + \"' in \" + this);\r\n\r\n    if (this.isReservedId(id))\r\n        throw Error(\"id \" + id + \" is reserved in \" + this);\r\n\r\n    if (this.isReservedName(name))\r\n        throw Error(\"name '\" + name + \"' is reserved in \" + this);\r\n\r\n    if (this.valuesById[id] !== undefined) {\r\n        if (!(this.options && this.options.allow_alias))\r\n            throw Error(\"duplicate id \" + id + \" in \" + this);\r\n        this.values[name] = id;\r\n    } else\r\n        this.valuesById[this.values[name] = id] = name;\r\n\r\n    this.comments[name] = comment || null;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes a value from this enum\r\n * @param {string} name Value name\r\n * @returns {Enum} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `name` is not a name of this enum\r\n */\r\nEnum.prototype.remove = function remove(name) {\r\n\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name must be a string\");\r\n\r\n    var val = this.values[name];\r\n    if (val == null)\r\n        throw Error(\"name '\" + name + \"' does not exist in \" + this);\r\n\r\n    delete this.valuesById[val];\r\n    delete this.values[name];\r\n    delete this.comments[name];\r\n\r\n    return this;\r\n};\r\n\r\n/**\r\n * Tests if the specified id is reserved.\r\n * @param {number} id Id to test\r\n * @returns {boolean} `true` if reserved, otherwise `false`\r\n */\r\nEnum.prototype.isReservedId = function isReservedId(id) {\r\n    return Namespace.isReservedId(this.reserved, id);\r\n};\r\n\r\n/**\r\n * Tests if the specified name is reserved.\r\n * @param {string} name Name to test\r\n * @returns {boolean} `true` if reserved, otherwise `false`\r\n */\r\nEnum.prototype.isReservedName = function isReservedName(name) {\r\n    return Namespace.isReservedName(this.reserved, name);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Field;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(24);\r\n((Field.prototype = Object.create(ReflectionObject.prototype)).constructor = Field).className = \"Field\";\r\n\r\nvar Enum  = require(15),\r\n    types = require(36),\r\n    util  = require(37);\r\n\r\nvar Type; // cyclic\r\n\r\nvar ruleRe = /^required|optional|repeated$/;\r\n\r\n/**\r\n * Constructs a new message field instance. Note that {@link MapField|map fields} have their own class.\r\n * @name Field\r\n * @classdesc Reflected message field.\r\n * @extends FieldBase\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} type Value type\r\n * @param {string|Object.<string,*>} [rule=\"optional\"] Field rule\r\n * @param {string|Object.<string,*>} [extend] Extended type if different from parent\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\n\r\n/**\r\n * Constructs a field from a field descriptor.\r\n * @param {string} name Field name\r\n * @param {IField} json Field descriptor\r\n * @returns {Field} Created field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nField.fromJSON = function fromJSON(name, json) {\r\n    return new Field(name, json.id, json.type, json.rule, json.extend, json.options, json.comment);\r\n};\r\n\r\n/**\r\n * Not an actual constructor. Use {@link Field} instead.\r\n * @classdesc Base class of all reflected message fields. This is not an actual class but here for the sake of having consistent type definitions.\r\n * @exports FieldBase\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} type Value type\r\n * @param {string|Object.<string,*>} [rule=\"optional\"] Field rule\r\n * @param {string|Object.<string,*>} [extend] Extended type if different from parent\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @param {string} [comment] Comment associated with this field\r\n */\r\nfunction Field(name, id, type, rule, extend, options, comment) {\r\n\r\n    if (util.isObject(rule)) {\r\n        comment = extend;\r\n        options = rule;\r\n        rule = extend = undefined;\r\n    } else if (util.isObject(extend)) {\r\n        comment = options;\r\n        options = extend;\r\n        extend = undefined;\r\n    }\r\n\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    if (!util.isInteger(id) || id < 0)\r\n        throw TypeError(\"id must be a non-negative integer\");\r\n\r\n    if (!util.isString(type))\r\n        throw TypeError(\"type must be a string\");\r\n\r\n    if (rule !== undefined && !ruleRe.test(rule = rule.toString().toLowerCase()))\r\n        throw TypeError(\"rule must be a string rule\");\r\n\r\n    if (extend !== undefined && !util.isString(extend))\r\n        throw TypeError(\"extend must be a string\");\r\n\r\n    /**\r\n     * Field rule, if any.\r\n     * @type {string|undefined}\r\n     */\r\n    this.rule = rule && rule !== \"optional\" ? rule : undefined; // toJSON\r\n\r\n    /**\r\n     * Field type.\r\n     * @type {string}\r\n     */\r\n    this.type = type; // toJSON\r\n\r\n    /**\r\n     * Unique field id.\r\n     * @type {number}\r\n     */\r\n    this.id = id; // toJSON, marker\r\n\r\n    /**\r\n     * Extended type if different from parent.\r\n     * @type {string|undefined}\r\n     */\r\n    this.extend = extend || undefined; // toJSON\r\n\r\n    /**\r\n     * Whether this field is required.\r\n     * @type {boolean}\r\n     */\r\n    this.required = rule === \"required\";\r\n\r\n    /**\r\n     * Whether this field is optional.\r\n     * @type {boolean}\r\n     */\r\n    this.optional = !this.required;\r\n\r\n    /**\r\n     * Whether this field is repeated.\r\n     * @type {boolean}\r\n     */\r\n    this.repeated = rule === \"repeated\";\r\n\r\n    /**\r\n     * Whether this field is a map or not.\r\n     * @type {boolean}\r\n     */\r\n    this.map = false;\r\n\r\n    /**\r\n     * Message this field belongs to.\r\n     * @type {Type|null}\r\n     */\r\n    this.message = null;\r\n\r\n    /**\r\n     * OneOf this field belongs to, if any,\r\n     * @type {OneOf|null}\r\n     */\r\n    this.partOf = null;\r\n\r\n    /**\r\n     * The field type's default value.\r\n     * @type {*}\r\n     */\r\n    this.typeDefault = null;\r\n\r\n    /**\r\n     * The field's default value on prototypes.\r\n     * @type {*}\r\n     */\r\n    this.defaultValue = null;\r\n\r\n    /**\r\n     * Whether this field's value should be treated as a long.\r\n     * @type {boolean}\r\n     */\r\n    this.long = util.Long ? types.long[type] !== undefined : /* istanbul ignore next */ false;\r\n\r\n    /**\r\n     * Whether this field's value is a buffer.\r\n     * @type {boolean}\r\n     */\r\n    this.bytes = type === \"bytes\";\r\n\r\n    /**\r\n     * Resolved type if not a basic type.\r\n     * @type {Type|Enum|null}\r\n     */\r\n    this.resolvedType = null;\r\n\r\n    /**\r\n     * Sister-field within the extended type if a declaring extension field.\r\n     * @type {Field|null}\r\n     */\r\n    this.extensionField = null;\r\n\r\n    /**\r\n     * Sister-field within the declaring namespace if an extended field.\r\n     * @type {Field|null}\r\n     */\r\n    this.declaringField = null;\r\n\r\n    /**\r\n     * Internally remembers whether this field is packed.\r\n     * @type {boolean|null}\r\n     * @private\r\n     */\r\n    this._packed = null;\r\n\r\n    /**\r\n     * Comment for this field.\r\n     * @type {string|null}\r\n     */\r\n    this.comment = comment;\r\n}\r\n\r\n/**\r\n * Determines whether this field is packed. Only relevant when repeated and working with proto2.\r\n * @name Field#packed\r\n * @type {boolean}\r\n * @readonly\r\n */\r\nObject.defineProperty(Field.prototype, \"packed\", {\r\n    get: function() {\r\n        // defaults to packed=true if not explicity set to false\r\n        if (this._packed === null)\r\n            this._packed = this.getOption(\"packed\") !== false;\r\n        return this._packed;\r\n    }\r\n});\r\n\r\n/**\r\n * @override\r\n */\r\nField.prototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (name === \"packed\") // clear cached before setting\r\n        this._packed = null;\r\n    return ReflectionObject.prototype.setOption.call(this, name, value, ifNotSet);\r\n};\r\n\r\n/**\r\n * Field descriptor.\r\n * @interface IField\r\n * @property {string} [rule=\"optional\"] Field rule\r\n * @property {string} type Field type\r\n * @property {number} id Field id\r\n * @property {Object.<string,*>} [options] Field options\r\n */\r\n\r\n/**\r\n * Extension field descriptor.\r\n * @interface IExtensionField\r\n * @extends IField\r\n * @property {string} extend Extended type\r\n */\r\n\r\n/**\r\n * Converts this field to a field descriptor.\r\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\r\n * @returns {IField} Field descriptor\r\n */\r\nField.prototype.toJSON = function toJSON(toJSONOptions) {\r\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\r\n    return util.toObject([\r\n        \"rule\"    , this.rule !== \"optional\" && this.rule || undefined,\r\n        \"type\"    , this.type,\r\n        \"id\"      , this.id,\r\n        \"extend\"  , this.extend,\r\n        \"options\" , this.options,\r\n        \"comment\" , keepComments ? this.comment : undefined\r\n    ]);\r\n};\r\n\r\n/**\r\n * Resolves this field's type references.\r\n * @returns {Field} `this`\r\n * @throws {Error} If any reference cannot be resolved\r\n */\r\nField.prototype.resolve = function resolve() {\r\n\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    if ((this.typeDefault = types.defaults[this.type]) === undefined) { // if not a basic type, resolve it\r\n        this.resolvedType = (this.declaringField ? this.declaringField.parent : this.parent).lookupTypeOrEnum(this.type);\r\n        if (this.resolvedType instanceof Type)\r\n            this.typeDefault = null;\r\n        else // instanceof Enum\r\n            this.typeDefault = this.resolvedType.values[Object.keys(this.resolvedType.values)[0]]; // first defined\r\n    }\r\n\r\n    // use explicitly set default value if present\r\n    if (this.options && this.options[\"default\"] != null) {\r\n        this.typeDefault = this.options[\"default\"];\r\n        if (this.resolvedType instanceof Enum && typeof this.typeDefault === \"string\")\r\n            this.typeDefault = this.resolvedType.values[this.typeDefault];\r\n    }\r\n\r\n    // remove unnecessary options\r\n    if (this.options) {\r\n        if (this.options.packed === true || this.options.packed !== undefined && this.resolvedType && !(this.resolvedType instanceof Enum))\r\n            delete this.options.packed;\r\n        if (!Object.keys(this.options).length)\r\n            this.options = undefined;\r\n    }\r\n\r\n    // convert to internal data type if necesssary\r\n    if (this.long) {\r\n        this.typeDefault = util.Long.fromNumber(this.typeDefault, this.type.charAt(0) === \"u\");\r\n\r\n        /* istanbul ignore else */\r\n        if (Object.freeze)\r\n            Object.freeze(this.typeDefault); // long instances are meant to be immutable anyway (i.e. use small int cache that even requires it)\r\n\r\n    } else if (this.bytes && typeof this.typeDefault === \"string\") {\r\n        var buf;\r\n        if (util.base64.test(this.typeDefault))\r\n            util.base64.decode(this.typeDefault, buf = util.newBuffer(util.base64.length(this.typeDefault)), 0);\r\n        else\r\n            util.utf8.write(this.typeDefault, buf = util.newBuffer(util.utf8.length(this.typeDefault)), 0);\r\n        this.typeDefault = buf;\r\n    }\r\n\r\n    // take special care of maps and repeated fields\r\n    if (this.map)\r\n        this.defaultValue = util.emptyObject;\r\n    else if (this.repeated)\r\n        this.defaultValue = util.emptyArray;\r\n    else\r\n        this.defaultValue = this.typeDefault;\r\n\r\n    // ensure proper value on prototype\r\n    if (this.parent instanceof Type)\r\n        this.parent.ctor.prototype[this.name] = this.defaultValue;\r\n\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * Decorator function as returned by {@link Field.d} and {@link MapField.d} (TypeScript).\r\n * @typedef FieldDecorator\r\n * @type {function}\r\n * @param {Object} prototype Target prototype\r\n * @param {string} fieldName Field name\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Field decorator (TypeScript).\r\n * @name Field.d\r\n * @function\r\n * @param {number} fieldId Field id\r\n * @param {\"double\"|\"float\"|\"int32\"|\"uint32\"|\"sint32\"|\"fixed32\"|\"sfixed32\"|\"int64\"|\"uint64\"|\"sint64\"|\"fixed64\"|\"sfixed64\"|\"string\"|\"bool\"|\"bytes\"|Object} fieldType Field type\r\n * @param {\"optional\"|\"required\"|\"repeated\"} [fieldRule=\"optional\"] Field rule\r\n * @param {T} [defaultValue] Default value\r\n * @returns {FieldDecorator} Decorator function\r\n * @template T extends number | number[] | Long | Long[] | string | string[] | boolean | boolean[] | Uint8Array | Uint8Array[] | Buffer | Buffer[]\r\n */\r\nField.d = function decorateField(fieldId, fieldType, fieldRule, defaultValue) {\r\n\r\n    // submessage: decorate the submessage and use its name as the type\r\n    if (typeof fieldType === \"function\")\r\n        fieldType = util.decorateType(fieldType).name;\r\n\r\n    // enum reference: create a reflected copy of the enum and keep reuseing it\r\n    else if (fieldType && typeof fieldType === \"object\")\r\n        fieldType = util.decorateEnum(fieldType).name;\r\n\r\n    return function fieldDecorator(prototype, fieldName) {\r\n        util.decorateType(prototype.constructor)\r\n            .add(new Field(fieldName, fieldId, fieldType, fieldRule, { \"default\": defaultValue }));\r\n    };\r\n};\r\n\r\n/**\r\n * Field decorator (TypeScript).\r\n * @name Field.d\r\n * @function\r\n * @param {number} fieldId Field id\r\n * @param {Constructor<T>|string} fieldType Field type\r\n * @param {\"optional\"|\"required\"|\"repeated\"} [fieldRule=\"optional\"] Field rule\r\n * @returns {FieldDecorator} Decorator function\r\n * @template T extends Message<T>\r\n * @variation 2\r\n */\r\n// like Field.d but without a default value\r\n\r\n// Sets up cyclic dependencies (called in index-light)\r\nField._configure = function configure(Type_) {\r\n    Type = Type_;\r\n};\r\n","\"use strict\";\r\nvar protobuf = module.exports = require(18);\r\n\r\nprotobuf.build = \"light\";\r\n\r\n/**\r\n * A node-style callback as used by {@link load} and {@link Root#load}.\r\n * @typedef LoadCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any, otherwise `null`\r\n * @param {Root} [root] Root, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} root Root namespace, defaults to create a new one if omitted.\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @see {@link Root#load}\r\n */\r\nfunction load(filename, root, callback) {\r\n    if (typeof root === \"function\") {\r\n        callback = root;\r\n        root = new protobuf.Root();\r\n    } else if (!root)\r\n        root = new protobuf.Root();\r\n    return root.load(filename, callback);\r\n}\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\r\n * @name load\r\n * @function\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @see {@link Root#load}\r\n * @variation 2\r\n */\r\n// function load(filename:string, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and returns a promise.\r\n * @name load\r\n * @function\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\r\n * @returns {Promise<Root>} Promise\r\n * @see {@link Root#load}\r\n * @variation 3\r\n */\r\n// function load(filename:string, [root:Root]):Promise<Root>\r\n\r\nprotobuf.load = load;\r\n\r\n/**\r\n * Synchronously loads one or multiple .proto or preprocessed .json files into a common root namespace (node only).\r\n * @param {string|string[]} filename One or multiple files to load\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\r\n * @returns {Root} Root namespace\r\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\r\n * @see {@link Root#loadSync}\r\n */\r\nfunction loadSync(filename, root) {\r\n    if (!root)\r\n        root = new protobuf.Root();\r\n    return root.loadSync(filename);\r\n}\r\n\r\nprotobuf.loadSync = loadSync;\r\n\r\n// Serialization\r\nprotobuf.encoder          = require(14);\r\nprotobuf.decoder          = require(13);\r\nprotobuf.verifier         = require(40);\r\nprotobuf.converter        = require(12);\r\n\r\n// Reflection\r\nprotobuf.ReflectionObject = require(24);\r\nprotobuf.Namespace        = require(23);\r\nprotobuf.Root             = require(29);\r\nprotobuf.Enum             = require(15);\r\nprotobuf.Type             = require(35);\r\nprotobuf.Field            = require(16);\r\nprotobuf.OneOf            = require(25);\r\nprotobuf.MapField         = require(20);\r\nprotobuf.Service          = require(33);\r\nprotobuf.Method           = require(22);\r\n\r\n// Runtime\r\nprotobuf.Message          = require(21);\r\nprotobuf.wrappers         = require(41);\r\n\r\n// Utility\r\nprotobuf.types            = require(36);\r\nprotobuf.util             = require(37);\r\n\r\n// Set up possibly cyclic reflection dependencies\r\nprotobuf.ReflectionObject._configure(protobuf.Root);\r\nprotobuf.Namespace._configure(protobuf.Type, protobuf.Service, protobuf.Enum);\r\nprotobuf.Root._configure(protobuf.Type);\r\nprotobuf.Field._configure(protobuf.Type);\r\n","\"use strict\";\r\nvar protobuf = exports;\r\n\r\n/**\r\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\r\n * @name build\r\n * @type {string}\r\n * @const\r\n */\r\nprotobuf.build = \"minimal\";\r\n\r\n// Serialization\r\nprotobuf.Writer       = require(42);\r\nprotobuf.BufferWriter = require(43);\r\nprotobuf.Reader       = require(27);\r\nprotobuf.BufferReader = require(28);\r\n\r\n// Utility\r\nprotobuf.util         = require(39);\r\nprotobuf.rpc          = require(31);\r\nprotobuf.roots        = require(30);\r\nprotobuf.configure    = configure;\r\n\r\n/* istanbul ignore next */\r\n/**\r\n * Reconfigures the library according to the environment.\r\n * @returns {undefined}\r\n */\r\nfunction configure() {\r\n    protobuf.Reader._configure(protobuf.BufferReader);\r\n    protobuf.util._configure();\r\n}\r\n\r\n// Set up buffer utility according to the environment\r\nprotobuf.Writer._configure(protobuf.BufferWriter);\r\nconfigure();\r\n","\"use strict\";\r\nvar protobuf = module.exports = require(17);\r\n\r\nprotobuf.build = \"full\";\r\n\r\n// Parser\r\nprotobuf.tokenize         = require(34);\r\nprotobuf.parse            = require(26);\r\nprotobuf.common           = require(11);\r\n\r\n// Configure parser\r\nprotobuf.Root._configure(protobuf.Type, protobuf.parse, protobuf.common);\r\n","\"use strict\";\r\nmodule.exports = MapField;\r\n\r\n// extends Field\r\nvar Field = require(16);\r\n((MapField.prototype = Object.create(Field.prototype)).constructor = MapField).className = \"MapField\";\r\n\r\nvar types   = require(36),\r\n    util    = require(37);\r\n\r\n/**\r\n * Constructs a new map field instance.\r\n * @classdesc Reflected map field.\r\n * @extends FieldBase\r\n * @constructor\r\n * @param {string} name Unique name within its namespace\r\n * @param {number} id Unique id within its namespace\r\n * @param {string} keyType Key type\r\n * @param {string} type Value type\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @param {string} [comment] Comment associated with this field\r\n */\r\nfunction MapField(name, id, keyType, type, options, comment) {\r\n    Field.call(this, name, id, type, undefined, undefined, options, comment);\r\n\r\n    /* istanbul ignore if */\r\n    if (!util.isString(keyType))\r\n        throw TypeError(\"keyType must be a string\");\r\n\r\n    /**\r\n     * Key type.\r\n     * @type {string}\r\n     */\r\n    this.keyType = keyType; // toJSON, marker\r\n\r\n    /**\r\n     * Resolved key type if not a basic type.\r\n     * @type {ReflectionObject|null}\r\n     */\r\n    this.resolvedKeyType = null;\r\n\r\n    // Overrides Field#map\r\n    this.map = true;\r\n}\r\n\r\n/**\r\n * Map field descriptor.\r\n * @interface IMapField\r\n * @extends {IField}\r\n * @property {string} keyType Key type\r\n */\r\n\r\n/**\r\n * Extension map field descriptor.\r\n * @interface IExtensionMapField\r\n * @extends IMapField\r\n * @property {string} extend Extended type\r\n */\r\n\r\n/**\r\n * Constructs a map field from a map field descriptor.\r\n * @param {string} name Field name\r\n * @param {IMapField} json Map field descriptor\r\n * @returns {MapField} Created map field\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nMapField.fromJSON = function fromJSON(name, json) {\r\n    return new MapField(name, json.id, json.keyType, json.type, json.options, json.comment);\r\n};\r\n\r\n/**\r\n * Converts this map field to a map field descriptor.\r\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\r\n * @returns {IMapField} Map field descriptor\r\n */\r\nMapField.prototype.toJSON = function toJSON(toJSONOptions) {\r\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\r\n    return util.toObject([\r\n        \"keyType\" , this.keyType,\r\n        \"type\"    , this.type,\r\n        \"id\"      , this.id,\r\n        \"extend\"  , this.extend,\r\n        \"options\" , this.options,\r\n        \"comment\" , keepComments ? this.comment : undefined\r\n    ]);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMapField.prototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    // Besides a value type, map fields have a key type that may be \"any scalar type except for floating point types and bytes\"\r\n    if (types.mapKey[this.keyType] === undefined)\r\n        throw Error(\"invalid key type: \" + this.keyType);\r\n\r\n    return Field.prototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * Map field decorator (TypeScript).\r\n * @name MapField.d\r\n * @function\r\n * @param {number} fieldId Field id\r\n * @param {\"int32\"|\"uint32\"|\"sint32\"|\"fixed32\"|\"sfixed32\"|\"int64\"|\"uint64\"|\"sint64\"|\"fixed64\"|\"sfixed64\"|\"bool\"|\"string\"} fieldKeyType Field key type\r\n * @param {\"double\"|\"float\"|\"int32\"|\"uint32\"|\"sint32\"|\"fixed32\"|\"sfixed32\"|\"int64\"|\"uint64\"|\"sint64\"|\"fixed64\"|\"sfixed64\"|\"bool\"|\"string\"|\"bytes\"|Object|Constructor<{}>} fieldValueType Field value type\r\n * @returns {FieldDecorator} Decorator function\r\n * @template T extends { [key: string]: number | Long | string | boolean | Uint8Array | Buffer | number[] | Message<{}> }\r\n */\r\nMapField.d = function decorateMapField(fieldId, fieldKeyType, fieldValueType) {\r\n\r\n    // submessage value: decorate the submessage and use its name as the type\r\n    if (typeof fieldValueType === \"function\")\r\n        fieldValueType = util.decorateType(fieldValueType).name;\r\n\r\n    // enum reference value: create a reflected copy of the enum and keep reuseing it\r\n    else if (fieldValueType && typeof fieldValueType === \"object\")\r\n        fieldValueType = util.decorateEnum(fieldValueType).name;\r\n\r\n    return function mapFieldDecorator(prototype, fieldName) {\r\n        util.decorateType(prototype.constructor)\r\n            .add(new MapField(fieldName, fieldId, fieldKeyType, fieldValueType));\r\n    };\r\n};\r\n","\"use strict\";\r\nmodule.exports = Message;\r\n\r\nvar util = require(39);\r\n\r\n/**\r\n * Constructs a new message instance.\r\n * @classdesc Abstract runtime message.\r\n * @constructor\r\n * @param {Properties<T>} [properties] Properties to set\r\n * @template T extends object\r\n */\r\nfunction Message(properties) {\r\n    // not used internally\r\n    if (properties)\r\n        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\r\n            this[keys[i]] = properties[keys[i]];\r\n}\r\n\r\n/**\r\n * Reference to the reflected type.\r\n * @name Message.$type\r\n * @type {Type}\r\n * @readonly\r\n */\r\n\r\n/**\r\n * Reference to the reflected type.\r\n * @name Message#$type\r\n * @type {Type}\r\n * @readonly\r\n */\r\n\r\n/*eslint-disable valid-jsdoc*/\r\n\r\n/**\r\n * Creates a new message of this type using the specified properties.\r\n * @param {Object.<string,*>} [properties] Properties to set\r\n * @returns {Message<T>} Message instance\r\n * @template T extends Message<T>\r\n * @this Constructor<T>\r\n */\r\nMessage.create = function create(properties) {\r\n    return this.$type.create(properties);\r\n};\r\n\r\n/**\r\n * Encodes a message of this type.\r\n * @param {T|Object.<string,*>} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n * @template T extends Message<T>\r\n * @this Constructor<T>\r\n */\r\nMessage.encode = function encode(message, writer) {\r\n    return this.$type.encode(message, writer);\r\n};\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its length as a varint.\r\n * @param {T|Object.<string,*>} message Message to encode\r\n * @param {Writer} [writer] Writer to use\r\n * @returns {Writer} Writer\r\n * @template T extends Message<T>\r\n * @this Constructor<T>\r\n */\r\nMessage.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.$type.encodeDelimited(message, writer);\r\n};\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @name Message.decode\r\n * @function\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\r\n * @returns {T} Decoded message\r\n * @template T extends Message<T>\r\n * @this Constructor<T>\r\n */\r\nMessage.decode = function decode(reader) {\r\n    return this.$type.decode(reader);\r\n};\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its length as a varint.\r\n * @name Message.decodeDelimited\r\n * @function\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\r\n * @returns {T} Decoded message\r\n * @template T extends Message<T>\r\n * @this Constructor<T>\r\n */\r\nMessage.decodeDelimited = function decodeDelimited(reader) {\r\n    return this.$type.decodeDelimited(reader);\r\n};\r\n\r\n/**\r\n * Verifies a message of this type.\r\n * @name Message.verify\r\n * @function\r\n * @param {Object.<string,*>} message Plain object to verify\r\n * @returns {string|null} `null` if valid, otherwise the reason why it is not\r\n */\r\nMessage.verify = function verify(message) {\r\n    return this.$type.verify(message);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {T} Message instance\r\n * @template T extends Message<T>\r\n * @this Constructor<T>\r\n */\r\nMessage.fromObject = function fromObject(object) {\r\n    return this.$type.fromObject(object);\r\n};\r\n\r\n/**\r\n * Creates a plain object from a message of this type. Also converts values to other types if specified.\r\n * @param {T} message Message instance\r\n * @param {IConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} Plain object\r\n * @template T extends Message<T>\r\n * @this Constructor<T>\r\n */\r\nMessage.toObject = function toObject(message, options) {\r\n    return this.$type.toObject(message, options);\r\n};\r\n\r\n/**\r\n * Converts this message to JSON.\r\n * @returns {Object.<string,*>} JSON object\r\n */\r\nMessage.prototype.toJSON = function toJSON() {\r\n    return this.$type.toObject(this, util.toJSONOptions);\r\n};\r\n\r\n/*eslint-enable valid-jsdoc*/","\"use strict\";\r\nmodule.exports = Method;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(24);\r\n((Method.prototype = Object.create(ReflectionObject.prototype)).constructor = Method).className = \"Method\";\r\n\r\nvar util = require(37);\r\n\r\n/**\r\n * Constructs a new service method instance.\r\n * @classdesc Reflected service method.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Method name\r\n * @param {string|undefined} type Method type, usually `\"rpc\"`\r\n * @param {string} requestType Request message type\r\n * @param {string} responseType Response message type\r\n * @param {boolean|Object.<string,*>} [requestStream] Whether the request is streamed\r\n * @param {boolean|Object.<string,*>} [responseStream] Whether the response is streamed\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @param {string} [comment] The comment for this method\r\n */\r\nfunction Method(name, type, requestType, responseType, requestStream, responseStream, options, comment) {\r\n\r\n    /* istanbul ignore next */\r\n    if (util.isObject(requestStream)) {\r\n        options = requestStream;\r\n        requestStream = responseStream = undefined;\r\n    } else if (util.isObject(responseStream)) {\r\n        options = responseStream;\r\n        responseStream = undefined;\r\n    }\r\n\r\n    /* istanbul ignore if */\r\n    if (!(type === undefined || util.isString(type)))\r\n        throw TypeError(\"type must be a string\");\r\n\r\n    /* istanbul ignore if */\r\n    if (!util.isString(requestType))\r\n        throw TypeError(\"requestType must be a string\");\r\n\r\n    /* istanbul ignore if */\r\n    if (!util.isString(responseType))\r\n        throw TypeError(\"responseType must be a string\");\r\n\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Method type.\r\n     * @type {string}\r\n     */\r\n    this.type = type || \"rpc\"; // toJSON\r\n\r\n    /**\r\n     * Request type.\r\n     * @type {string}\r\n     */\r\n    this.requestType = requestType; // toJSON, marker\r\n\r\n    /**\r\n     * Whether requests are streamed or not.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.requestStream = requestStream ? true : undefined; // toJSON\r\n\r\n    /**\r\n     * Response type.\r\n     * @type {string}\r\n     */\r\n    this.responseType = responseType; // toJSON\r\n\r\n    /**\r\n     * Whether responses are streamed or not.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.responseStream = responseStream ? true : undefined; // toJSON\r\n\r\n    /**\r\n     * Resolved request type.\r\n     * @type {Type|null}\r\n     */\r\n    this.resolvedRequestType = null;\r\n\r\n    /**\r\n     * Resolved response type.\r\n     * @type {Type|null}\r\n     */\r\n    this.resolvedResponseType = null;\r\n\r\n    /**\r\n     * Comment for this method\r\n     * @type {string|null}\r\n     */\r\n    this.comment = comment;\r\n}\r\n\r\n/**\r\n * Method descriptor.\r\n * @interface IMethod\r\n * @property {string} [type=\"rpc\"] Method type\r\n * @property {string} requestType Request type\r\n * @property {string} responseType Response type\r\n * @property {boolean} [requestStream=false] Whether requests are streamed\r\n * @property {boolean} [responseStream=false] Whether responses are streamed\r\n * @property {Object.<string,*>} [options] Method options\r\n */\r\n\r\n/**\r\n * Constructs a method from a method descriptor.\r\n * @param {string} name Method name\r\n * @param {IMethod} json Method descriptor\r\n * @returns {Method} Created method\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nMethod.fromJSON = function fromJSON(name, json) {\r\n    return new Method(name, json.type, json.requestType, json.responseType, json.requestStream, json.responseStream, json.options, json.comment);\r\n};\r\n\r\n/**\r\n * Converts this method to a method descriptor.\r\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\r\n * @returns {IMethod} Method descriptor\r\n */\r\nMethod.prototype.toJSON = function toJSON(toJSONOptions) {\r\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\r\n    return util.toObject([\r\n        \"type\"           , this.type !== \"rpc\" && /* istanbul ignore next */ this.type || undefined,\r\n        \"requestType\"    , this.requestType,\r\n        \"requestStream\"  , this.requestStream,\r\n        \"responseType\"   , this.responseType,\r\n        \"responseStream\" , this.responseStream,\r\n        \"options\"        , this.options,\r\n        \"comment\"        , keepComments ? this.comment : undefined\r\n    ]);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nMethod.prototype.resolve = function resolve() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.resolved)\r\n        return this;\r\n\r\n    this.resolvedRequestType = this.parent.lookupType(this.requestType);\r\n    this.resolvedResponseType = this.parent.lookupType(this.responseType);\r\n\r\n    return ReflectionObject.prototype.resolve.call(this);\r\n};\r\n","\"use strict\";\r\nmodule.exports = Namespace;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(24);\r\n((Namespace.prototype = Object.create(ReflectionObject.prototype)).constructor = Namespace).className = \"Namespace\";\r\n\r\nvar Field    = require(16),\r\n    util     = require(37);\r\n\r\nvar Type,    // cyclic\r\n    Service,\r\n    Enum;\r\n\r\n/**\r\n * Constructs a new namespace instance.\r\n * @name Namespace\r\n * @classdesc Reflected namespace.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {string} name Namespace name\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\n\r\n/**\r\n * Constructs a namespace from JSON.\r\n * @memberof Namespace\r\n * @function\r\n * @param {string} name Namespace name\r\n * @param {Object.<string,*>} json JSON object\r\n * @returns {Namespace} Created namespace\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nNamespace.fromJSON = function fromJSON(name, json) {\r\n    return new Namespace(name, json.options).addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * Converts an array of reflection objects to JSON.\r\n * @memberof Namespace\r\n * @param {ReflectionObject[]} array Object array\r\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\r\n * @returns {Object.<string,*>|undefined} JSON object or `undefined` when array is empty\r\n */\r\nfunction arrayToJSON(array, toJSONOptions) {\r\n    if (!(array && array.length))\r\n        return undefined;\r\n    var obj = {};\r\n    for (var i = 0; i < array.length; ++i)\r\n        obj[array[i].name] = array[i].toJSON(toJSONOptions);\r\n    return obj;\r\n}\r\n\r\nNamespace.arrayToJSON = arrayToJSON;\r\n\r\n/**\r\n * Tests if the specified id is reserved.\r\n * @param {Array.<number[]|string>|undefined} reserved Array of reserved ranges and names\r\n * @param {number} id Id to test\r\n * @returns {boolean} `true` if reserved, otherwise `false`\r\n */\r\nNamespace.isReservedId = function isReservedId(reserved, id) {\r\n    if (reserved)\r\n        for (var i = 0; i < reserved.length; ++i)\r\n            if (typeof reserved[i] !== \"string\" && reserved[i][0] <= id && reserved[i][1] >= id)\r\n                return true;\r\n    return false;\r\n};\r\n\r\n/**\r\n * Tests if the specified name is reserved.\r\n * @param {Array.<number[]|string>|undefined} reserved Array of reserved ranges and names\r\n * @param {string} name Name to test\r\n * @returns {boolean} `true` if reserved, otherwise `false`\r\n */\r\nNamespace.isReservedName = function isReservedName(reserved, name) {\r\n    if (reserved)\r\n        for (var i = 0; i < reserved.length; ++i)\r\n            if (reserved[i] === name)\r\n                return true;\r\n    return false;\r\n};\r\n\r\n/**\r\n * Not an actual constructor. Use {@link Namespace} instead.\r\n * @classdesc Base class of all reflection objects containing nested objects. This is not an actual class but here for the sake of having consistent type definitions.\r\n * @exports NamespaceBase\r\n * @extends ReflectionObject\r\n * @abstract\r\n * @constructor\r\n * @param {string} name Namespace name\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @see {@link Namespace}\r\n */\r\nfunction Namespace(name, options) {\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /**\r\n     * Nested objects by name.\r\n     * @type {Object.<string,ReflectionObject>|undefined}\r\n     */\r\n    this.nested = undefined; // toJSON\r\n\r\n    /**\r\n     * Cached nested objects as an array.\r\n     * @type {ReflectionObject[]|null}\r\n     * @private\r\n     */\r\n    this._nestedArray = null;\r\n}\r\n\r\nfunction clearCache(namespace) {\r\n    namespace._nestedArray = null;\r\n    return namespace;\r\n}\r\n\r\n/**\r\n * Nested objects of this namespace as an array for iteration.\r\n * @name NamespaceBase#nestedArray\r\n * @type {ReflectionObject[]}\r\n * @readonly\r\n */\r\nObject.defineProperty(Namespace.prototype, \"nestedArray\", {\r\n    get: function() {\r\n        return this._nestedArray || (this._nestedArray = util.toArray(this.nested));\r\n    }\r\n});\r\n\r\n/**\r\n * Namespace descriptor.\r\n * @interface INamespace\r\n * @property {Object.<string,*>} [options] Namespace options\r\n * @property {Object.<string,AnyNestedObject>} [nested] Nested object descriptors\r\n */\r\n\r\n/**\r\n * Any extension field descriptor.\r\n * @typedef AnyExtensionField\r\n * @type {IExtensionField|IExtensionMapField}\r\n */\r\n\r\n/**\r\n * Any nested object descriptor.\r\n * @typedef AnyNestedObject\r\n * @type {IEnum|IType|IService|AnyExtensionField|INamespace}\r\n */\r\n// ^ BEWARE: VSCode hangs forever when using more than 5 types (that's why AnyExtensionField exists in the first place)\r\n\r\n/**\r\n * Converts this namespace to a namespace descriptor.\r\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\r\n * @returns {INamespace} Namespace descriptor\r\n */\r\nNamespace.prototype.toJSON = function toJSON(toJSONOptions) {\r\n    return util.toObject([\r\n        \"options\" , this.options,\r\n        \"nested\"  , arrayToJSON(this.nestedArray, toJSONOptions)\r\n    ]);\r\n};\r\n\r\n/**\r\n * Adds nested objects to this namespace from nested object descriptors.\r\n * @param {Object.<string,AnyNestedObject>} nestedJson Any nested object descriptors\r\n * @returns {Namespace} `this`\r\n */\r\nNamespace.prototype.addJSON = function addJSON(nestedJson) {\r\n    var ns = this;\r\n    /* istanbul ignore else */\r\n    if (nestedJson) {\r\n        for (var names = Object.keys(nestedJson), i = 0, nested; i < names.length; ++i) {\r\n            nested = nestedJson[names[i]];\r\n            ns.add( // most to least likely\r\n                ( nested.fields !== undefined\r\n                ? Type.fromJSON\r\n                : nested.values !== undefined\r\n                ? Enum.fromJSON\r\n                : nested.methods !== undefined\r\n                ? Service.fromJSON\r\n                : nested.id !== undefined\r\n                ? Field.fromJSON\r\n                : Namespace.fromJSON )(names[i], nested)\r\n            );\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets the nested object of the specified name.\r\n * @param {string} name Nested object name\r\n * @returns {ReflectionObject|null} The reflection object or `null` if it doesn't exist\r\n */\r\nNamespace.prototype.get = function get(name) {\r\n    return this.nested && this.nested[name]\r\n        || null;\r\n};\r\n\r\n/**\r\n * Gets the values of the nested {@link Enum|enum} of the specified name.\r\n * This methods differs from {@link Namespace#get|get} in that it returns an enum's values directly and throws instead of returning `null`.\r\n * @param {string} name Nested enum name\r\n * @returns {Object.<string,number>} Enum values\r\n * @throws {Error} If there is no such enum\r\n */\r\nNamespace.prototype.getEnum = function getEnum(name) {\r\n    if (this.nested && this.nested[name] instanceof Enum)\r\n        return this.nested[name].values;\r\n    throw Error(\"no such enum: \" + name);\r\n};\r\n\r\n/**\r\n * Adds a nested object to this namespace.\r\n * @param {ReflectionObject} object Nested object to add\r\n * @returns {Namespace} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a nested object with this name\r\n */\r\nNamespace.prototype.add = function add(object) {\r\n\r\n    if (!(object instanceof Field && object.extend !== undefined || object instanceof Type || object instanceof Enum || object instanceof Service || object instanceof Namespace))\r\n        throw TypeError(\"object must be a valid nested object\");\r\n\r\n    if (!this.nested)\r\n        this.nested = {};\r\n    else {\r\n        var prev = this.get(object.name);\r\n        if (prev) {\r\n            if (prev instanceof Namespace && object instanceof Namespace && !(prev instanceof Type || prev instanceof Service)) {\r\n                // replace plain namespace but keep existing nested elements and options\r\n                var nested = prev.nestedArray;\r\n                for (var i = 0; i < nested.length; ++i)\r\n                    object.add(nested[i]);\r\n                this.remove(prev);\r\n                if (!this.nested)\r\n                    this.nested = {};\r\n                object.setOptions(prev.options, true);\r\n\r\n            } else\r\n                throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n        }\r\n    }\r\n    this.nested[object.name] = object;\r\n    object.onAdd(this);\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Removes a nested object from this namespace.\r\n * @param {ReflectionObject} object Nested object to remove\r\n * @returns {Namespace} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `object` is not a member of this namespace\r\n */\r\nNamespace.prototype.remove = function remove(object) {\r\n\r\n    if (!(object instanceof ReflectionObject))\r\n        throw TypeError(\"object must be a ReflectionObject\");\r\n    if (object.parent !== this)\r\n        throw Error(object + \" is not a member of \" + this);\r\n\r\n    delete this.nested[object.name];\r\n    if (!Object.keys(this.nested).length)\r\n        this.nested = undefined;\r\n\r\n    object.onRemove(this);\r\n    return clearCache(this);\r\n};\r\n\r\n/**\r\n * Defines additial namespaces within this one if not yet existing.\r\n * @param {string|string[]} path Path to create\r\n * @param {*} [json] Nested types to create from JSON\r\n * @returns {Namespace} Pointer to the last namespace created or `this` if path is empty\r\n */\r\nNamespace.prototype.define = function define(path, json) {\r\n\r\n    if (util.isString(path))\r\n        path = path.split(\".\");\r\n    else if (!Array.isArray(path))\r\n        throw TypeError(\"illegal path\");\r\n    if (path && path.length && path[0] === \"\")\r\n        throw Error(\"path must be relative\");\r\n\r\n    var ptr = this;\r\n    while (path.length > 0) {\r\n        var part = path.shift();\r\n        if (ptr.nested && ptr.nested[part]) {\r\n            ptr = ptr.nested[part];\r\n            if (!(ptr instanceof Namespace))\r\n                throw Error(\"path conflicts with non-namespace objects\");\r\n        } else\r\n            ptr.add(ptr = new Namespace(part));\r\n    }\r\n    if (json)\r\n        ptr.addJSON(json);\r\n    return ptr;\r\n};\r\n\r\n/**\r\n * Resolves this namespace's and all its nested objects' type references. Useful to validate a reflection tree, but comes at a cost.\r\n * @returns {Namespace} `this`\r\n */\r\nNamespace.prototype.resolveAll = function resolveAll() {\r\n    var nested = this.nestedArray, i = 0;\r\n    while (i < nested.length)\r\n        if (nested[i] instanceof Namespace)\r\n            nested[i++].resolveAll();\r\n        else\r\n            nested[i++].resolve();\r\n    return this.resolve();\r\n};\r\n\r\n/**\r\n * Recursively looks up the reflection object matching the specified path in the scope of this namespace.\r\n * @param {string|string[]} path Path to look up\r\n * @param {*|Array.<*>} filterTypes Filter types, any combination of the constructors of `protobuf.Type`, `protobuf.Enum`, `protobuf.Service` etc.\r\n * @param {boolean} [parentAlreadyChecked=false] If known, whether the parent has already been checked\r\n * @returns {ReflectionObject|null} Looked up object or `null` if none could be found\r\n */\r\nNamespace.prototype.lookup = function lookup(path, filterTypes, parentAlreadyChecked) {\r\n\r\n    /* istanbul ignore next */\r\n    if (typeof filterTypes === \"boolean\") {\r\n        parentAlreadyChecked = filterTypes;\r\n        filterTypes = undefined;\r\n    } else if (filterTypes && !Array.isArray(filterTypes))\r\n        filterTypes = [ filterTypes ];\r\n\r\n    if (util.isString(path) && path.length) {\r\n        if (path === \".\")\r\n            return this.root;\r\n        path = path.split(\".\");\r\n    } else if (!path.length)\r\n        return this;\r\n\r\n    // Start at root if path is absolute\r\n    if (path[0] === \"\")\r\n        return this.root.lookup(path.slice(1), filterTypes);\r\n\r\n    // Test if the first part matches any nested object, and if so, traverse if path contains more\r\n    var found = this.get(path[0]);\r\n    if (found) {\r\n        if (path.length === 1) {\r\n            if (!filterTypes || filterTypes.indexOf(found.constructor) > -1)\r\n                return found;\r\n        } else if (found instanceof Namespace && (found = found.lookup(path.slice(1), filterTypes, true)))\r\n            return found;\r\n\r\n    // Otherwise try each nested namespace\r\n    } else\r\n        for (var i = 0; i < this.nestedArray.length; ++i)\r\n            if (this._nestedArray[i] instanceof Namespace && (found = this._nestedArray[i].lookup(path, filterTypes, true)))\r\n                return found;\r\n\r\n    // If there hasn't been a match, try again at the parent\r\n    if (this.parent === null || parentAlreadyChecked)\r\n        return null;\r\n    return this.parent.lookup(path, filterTypes);\r\n};\r\n\r\n/**\r\n * Looks up the reflection object at the specified path, relative to this namespace.\r\n * @name NamespaceBase#lookup\r\n * @function\r\n * @param {string|string[]} path Path to look up\r\n * @param {boolean} [parentAlreadyChecked=false] Whether the parent has already been checked\r\n * @returns {ReflectionObject|null} Looked up object or `null` if none could be found\r\n * @variation 2\r\n */\r\n// lookup(path: string, [parentAlreadyChecked: boolean])\r\n\r\n/**\r\n * Looks up the {@link Type|type} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Type} Looked up type\r\n * @throws {Error} If `path` does not point to a type\r\n */\r\nNamespace.prototype.lookupType = function lookupType(path) {\r\n    var found = this.lookup(path, [ Type ]);\r\n    if (!found)\r\n        throw Error(\"no such type: \" + path);\r\n    return found;\r\n};\r\n\r\n/**\r\n * Looks up the values of the {@link Enum|enum} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Enum} Looked up enum\r\n * @throws {Error} If `path` does not point to an enum\r\n */\r\nNamespace.prototype.lookupEnum = function lookupEnum(path) {\r\n    var found = this.lookup(path, [ Enum ]);\r\n    if (!found)\r\n        throw Error(\"no such Enum '\" + path + \"' in \" + this);\r\n    return found;\r\n};\r\n\r\n/**\r\n * Looks up the {@link Type|type} or {@link Enum|enum} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Type} Looked up type or enum\r\n * @throws {Error} If `path` does not point to a type or enum\r\n */\r\nNamespace.prototype.lookupTypeOrEnum = function lookupTypeOrEnum(path) {\r\n    var found = this.lookup(path, [ Type, Enum ]);\r\n    if (!found)\r\n        throw Error(\"no such Type or Enum '\" + path + \"' in \" + this);\r\n    return found;\r\n};\r\n\r\n/**\r\n * Looks up the {@link Service|service} at the specified path, relative to this namespace.\r\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\r\n * @param {string|string[]} path Path to look up\r\n * @returns {Service} Looked up service\r\n * @throws {Error} If `path` does not point to a service\r\n */\r\nNamespace.prototype.lookupService = function lookupService(path) {\r\n    var found = this.lookup(path, [ Service ]);\r\n    if (!found)\r\n        throw Error(\"no such Service '\" + path + \"' in \" + this);\r\n    return found;\r\n};\r\n\r\n// Sets up cyclic dependencies (called in index-light)\r\nNamespace._configure = function(Type_, Service_, Enum_) {\r\n    Type    = Type_;\r\n    Service = Service_;\r\n    Enum    = Enum_;\r\n};\r\n","\"use strict\";\r\nmodule.exports = ReflectionObject;\r\n\r\nReflectionObject.className = \"ReflectionObject\";\r\n\r\nvar util = require(37);\r\n\r\nvar Root; // cyclic\r\n\r\n/**\r\n * Constructs a new reflection object instance.\r\n * @classdesc Base class of all reflection objects.\r\n * @constructor\r\n * @param {string} name Object name\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @abstract\r\n */\r\nfunction ReflectionObject(name, options) {\r\n\r\n    if (!util.isString(name))\r\n        throw TypeError(\"name must be a string\");\r\n\r\n    if (options && !util.isObject(options))\r\n        throw TypeError(\"options must be an object\");\r\n\r\n    /**\r\n     * Options.\r\n     * @type {Object.<string,*>|undefined}\r\n     */\r\n    this.options = options; // toJSON\r\n\r\n    /**\r\n     * Unique name within its namespace.\r\n     * @type {string}\r\n     */\r\n    this.name = name;\r\n\r\n    /**\r\n     * Parent namespace.\r\n     * @type {Namespace|null}\r\n     */\r\n    this.parent = null;\r\n\r\n    /**\r\n     * Whether already resolved or not.\r\n     * @type {boolean}\r\n     */\r\n    this.resolved = false;\r\n\r\n    /**\r\n     * Comment text, if any.\r\n     * @type {string|null}\r\n     */\r\n    this.comment = null;\r\n\r\n    /**\r\n     * Defining file name.\r\n     * @type {string|null}\r\n     */\r\n    this.filename = null;\r\n}\r\n\r\nObject.defineProperties(ReflectionObject.prototype, {\r\n\r\n    /**\r\n     * Reference to the root namespace.\r\n     * @name ReflectionObject#root\r\n     * @type {Root}\r\n     * @readonly\r\n     */\r\n    root: {\r\n        get: function() {\r\n            var ptr = this;\r\n            while (ptr.parent !== null)\r\n                ptr = ptr.parent;\r\n            return ptr;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Full name including leading dot.\r\n     * @name ReflectionObject#fullName\r\n     * @type {string}\r\n     * @readonly\r\n     */\r\n    fullName: {\r\n        get: function() {\r\n            var path = [ this.name ],\r\n                ptr = this.parent;\r\n            while (ptr) {\r\n                path.unshift(ptr.name);\r\n                ptr = ptr.parent;\r\n            }\r\n            return path.join(\".\");\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n * Converts this reflection object to its descriptor representation.\r\n * @returns {Object.<string,*>} Descriptor\r\n * @abstract\r\n */\r\nReflectionObject.prototype.toJSON = /* istanbul ignore next */ function toJSON() {\r\n    throw Error(); // not implemented, shouldn't happen\r\n};\r\n\r\n/**\r\n * Called when this object is added to a parent.\r\n * @param {ReflectionObject} parent Parent added to\r\n * @returns {undefined}\r\n */\r\nReflectionObject.prototype.onAdd = function onAdd(parent) {\r\n    if (this.parent && this.parent !== parent)\r\n        this.parent.remove(this);\r\n    this.parent = parent;\r\n    this.resolved = false;\r\n    var root = parent.root;\r\n    if (root instanceof Root)\r\n        root._handleAdd(this);\r\n};\r\n\r\n/**\r\n * Called when this object is removed from a parent.\r\n * @param {ReflectionObject} parent Parent removed from\r\n * @returns {undefined}\r\n */\r\nReflectionObject.prototype.onRemove = function onRemove(parent) {\r\n    var root = parent.root;\r\n    if (root instanceof Root)\r\n        root._handleRemove(this);\r\n    this.parent = null;\r\n    this.resolved = false;\r\n};\r\n\r\n/**\r\n * Resolves this objects type references.\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObject.prototype.resolve = function resolve() {\r\n    if (this.resolved)\r\n        return this;\r\n    if (this.root instanceof Root)\r\n        this.resolved = true; // only if part of a root\r\n    return this;\r\n};\r\n\r\n/**\r\n * Gets an option value.\r\n * @param {string} name Option name\r\n * @returns {*} Option value or `undefined` if not set\r\n */\r\nReflectionObject.prototype.getOption = function getOption(name) {\r\n    if (this.options)\r\n        return this.options[name];\r\n    return undefined;\r\n};\r\n\r\n/**\r\n * Sets an option.\r\n * @param {string} name Option name\r\n * @param {*} value Option value\r\n * @param {boolean} [ifNotSet] Sets the option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObject.prototype.setOption = function setOption(name, value, ifNotSet) {\r\n    if (!ifNotSet || !this.options || this.options[name] === undefined)\r\n        (this.options || (this.options = {}))[name] = value;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Sets multiple options.\r\n * @param {Object.<string,*>} options Options to set\r\n * @param {boolean} [ifNotSet] Sets an option only if it isn't currently set\r\n * @returns {ReflectionObject} `this`\r\n */\r\nReflectionObject.prototype.setOptions = function setOptions(options, ifNotSet) {\r\n    if (options)\r\n        for (var keys = Object.keys(options), i = 0; i < keys.length; ++i)\r\n            this.setOption(keys[i], options[keys[i]], ifNotSet);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Converts this instance to its string representation.\r\n * @returns {string} Class name[, space, full name]\r\n */\r\nReflectionObject.prototype.toString = function toString() {\r\n    var className = this.constructor.className,\r\n        fullName  = this.fullName;\r\n    if (fullName.length)\r\n        return className + \" \" + fullName;\r\n    return className;\r\n};\r\n\r\n// Sets up cyclic dependencies (called in index-light)\r\nReflectionObject._configure = function(Root_) {\r\n    Root = Root_;\r\n};\r\n","\"use strict\";\r\nmodule.exports = OneOf;\r\n\r\n// extends ReflectionObject\r\nvar ReflectionObject = require(24);\r\n((OneOf.prototype = Object.create(ReflectionObject.prototype)).constructor = OneOf).className = \"OneOf\";\r\n\r\nvar Field = require(16),\r\n    util  = require(37);\r\n\r\n/**\r\n * Constructs a new oneof instance.\r\n * @classdesc Reflected oneof.\r\n * @extends ReflectionObject\r\n * @constructor\r\n * @param {string} name Oneof name\r\n * @param {string[]|Object.<string,*>} [fieldNames] Field names\r\n * @param {Object.<string,*>} [options] Declared options\r\n * @param {string} [comment] Comment associated with this field\r\n */\r\nfunction OneOf(name, fieldNames, options, comment) {\r\n    if (!Array.isArray(fieldNames)) {\r\n        options = fieldNames;\r\n        fieldNames = undefined;\r\n    }\r\n    ReflectionObject.call(this, name, options);\r\n\r\n    /* istanbul ignore if */\r\n    if (!(fieldNames === undefined || Array.isArray(fieldNames)))\r\n        throw TypeError(\"fieldNames must be an Array\");\r\n\r\n    /**\r\n     * Field names that belong to this oneof.\r\n     * @type {string[]}\r\n     */\r\n    this.oneof = fieldNames || []; // toJSON, marker\r\n\r\n    /**\r\n     * Fields that belong to this oneof as an array for iteration.\r\n     * @type {Field[]}\r\n     * @readonly\r\n     */\r\n    this.fieldsArray = []; // declared readonly for conformance, possibly not yet added to parent\r\n\r\n    /**\r\n     * Comment for this field.\r\n     * @type {string|null}\r\n     */\r\n    this.comment = comment;\r\n}\r\n\r\n/**\r\n * Oneof descriptor.\r\n * @interface IOneOf\r\n * @property {Array.<string>} oneof Oneof field names\r\n * @property {Object.<string,*>} [options] Oneof options\r\n */\r\n\r\n/**\r\n * Constructs a oneof from a oneof descriptor.\r\n * @param {string} name Oneof name\r\n * @param {IOneOf} json Oneof descriptor\r\n * @returns {OneOf} Created oneof\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nOneOf.fromJSON = function fromJSON(name, json) {\r\n    return new OneOf(name, json.oneof, json.options, json.comment);\r\n};\r\n\r\n/**\r\n * Converts this oneof to a oneof descriptor.\r\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\r\n * @returns {IOneOf} Oneof descriptor\r\n */\r\nOneOf.prototype.toJSON = function toJSON(toJSONOptions) {\r\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\r\n    return util.toObject([\r\n        \"options\" , this.options,\r\n        \"oneof\"   , this.oneof,\r\n        \"comment\" , keepComments ? this.comment : undefined\r\n    ]);\r\n};\r\n\r\n/**\r\n * Adds the fields of the specified oneof to the parent if not already done so.\r\n * @param {OneOf} oneof The oneof\r\n * @returns {undefined}\r\n * @inner\r\n * @ignore\r\n */\r\nfunction addFieldsToParent(oneof) {\r\n    if (oneof.parent)\r\n        for (var i = 0; i < oneof.fieldsArray.length; ++i)\r\n            if (!oneof.fieldsArray[i].parent)\r\n                oneof.parent.add(oneof.fieldsArray[i]);\r\n}\r\n\r\n/**\r\n * Adds a field to this oneof and removes it from its current parent, if any.\r\n * @param {Field} field Field to add\r\n * @returns {OneOf} `this`\r\n */\r\nOneOf.prototype.add = function add(field) {\r\n\r\n    /* istanbul ignore if */\r\n    if (!(field instanceof Field))\r\n        throw TypeError(\"field must be a Field\");\r\n\r\n    if (field.parent && field.parent !== this.parent)\r\n        field.parent.remove(field);\r\n    this.oneof.push(field.name);\r\n    this.fieldsArray.push(field);\r\n    field.partOf = this; // field.parent remains null\r\n    addFieldsToParent(this);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes a field from this oneof and puts it back to the oneof's parent.\r\n * @param {Field} field Field to remove\r\n * @returns {OneOf} `this`\r\n */\r\nOneOf.prototype.remove = function remove(field) {\r\n\r\n    /* istanbul ignore if */\r\n    if (!(field instanceof Field))\r\n        throw TypeError(\"field must be a Field\");\r\n\r\n    var index = this.fieldsArray.indexOf(field);\r\n\r\n    /* istanbul ignore if */\r\n    if (index < 0)\r\n        throw Error(field + \" is not a member of \" + this);\r\n\r\n    this.fieldsArray.splice(index, 1);\r\n    index = this.oneof.indexOf(field.name);\r\n\r\n    /* istanbul ignore else */\r\n    if (index > -1) // theoretical\r\n        this.oneof.splice(index, 1);\r\n\r\n    field.partOf = null;\r\n    return this;\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOf.prototype.onAdd = function onAdd(parent) {\r\n    ReflectionObject.prototype.onAdd.call(this, parent);\r\n    var self = this;\r\n    // Collect present fields\r\n    for (var i = 0; i < this.oneof.length; ++i) {\r\n        var field = parent.get(this.oneof[i]);\r\n        if (field && !field.partOf) {\r\n            field.partOf = self;\r\n            self.fieldsArray.push(field);\r\n        }\r\n    }\r\n    // Add not yet present fields\r\n    addFieldsToParent(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nOneOf.prototype.onRemove = function onRemove(parent) {\r\n    for (var i = 0, field; i < this.fieldsArray.length; ++i)\r\n        if ((field = this.fieldsArray[i]).parent)\r\n            field.parent.remove(field);\r\n    ReflectionObject.prototype.onRemove.call(this, parent);\r\n};\r\n\r\n/**\r\n * Decorator function as returned by {@link OneOf.d} (TypeScript).\r\n * @typedef OneOfDecorator\r\n * @type {function}\r\n * @param {Object} prototype Target prototype\r\n * @param {string} oneofName OneOf name\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * OneOf decorator (TypeScript).\r\n * @function\r\n * @param {...string} fieldNames Field names\r\n * @returns {OneOfDecorator} Decorator function\r\n * @template T extends string\r\n */\r\nOneOf.d = function decorateOneOf() {\r\n    var fieldNames = new Array(arguments.length),\r\n        index = 0;\r\n    while (index < arguments.length)\r\n        fieldNames[index] = arguments[index++];\r\n    return function oneOfDecorator(prototype, oneofName) {\r\n        util.decorateType(prototype.constructor)\r\n            .add(new OneOf(oneofName, fieldNames));\r\n        Object.defineProperty(prototype, oneofName, {\r\n            get: util.oneOfGetter(fieldNames),\r\n            set: util.oneOfSetter(fieldNames)\r\n        });\r\n    };\r\n};\r\n","\"use strict\";\r\nmodule.exports = parse;\r\n\r\nparse.filename = null;\r\nparse.defaults = { keepCase: false };\r\n\r\nvar tokenize  = require(34),\r\n    Root      = require(29),\r\n    Type      = require(35),\r\n    Field     = require(16),\r\n    MapField  = require(20),\r\n    OneOf     = require(25),\r\n    Enum      = require(15),\r\n    Service   = require(33),\r\n    Method    = require(22),\r\n    types     = require(36),\r\n    util      = require(37);\r\n\r\nvar base10Re    = /^[1-9][0-9]*$/,\r\n    base10NegRe = /^-?[1-9][0-9]*$/,\r\n    base16Re    = /^0[x][0-9a-fA-F]+$/,\r\n    base16NegRe = /^-?0[x][0-9a-fA-F]+$/,\r\n    base8Re     = /^0[0-7]+$/,\r\n    base8NegRe  = /^-?0[0-7]+$/,\r\n    numberRe    = /^(?![eE])[0-9]*(?:\\.[0-9]*)?(?:[eE][+-]?[0-9]+)?$/,\r\n    nameRe      = /^[a-zA-Z_][a-zA-Z_0-9]*$/,\r\n    typeRefRe   = /^(?:\\.?[a-zA-Z_][a-zA-Z_0-9]*)(?:\\.[a-zA-Z_][a-zA-Z_0-9]*)*$/,\r\n    fqTypeRefRe = /^(?:\\.[a-zA-Z_][a-zA-Z_0-9]*)+$/;\r\n\r\n/**\r\n * Result object returned from {@link parse}.\r\n * @interface IParserResult\r\n * @property {string|undefined} package Package name, if declared\r\n * @property {string[]|undefined} imports Imports, if any\r\n * @property {string[]|undefined} weakImports Weak imports, if any\r\n * @property {string|undefined} syntax Syntax, if specified (either `\"proto2\"` or `\"proto3\"`)\r\n * @property {Root} root Populated root instance\r\n */\r\n\r\n/**\r\n * Options modifying the behavior of {@link parse}.\r\n * @interface IParseOptions\r\n * @property {boolean} [keepCase=false] Keeps field casing instead of converting to camel case\r\n * @property {boolean} [alternateCommentMode=false] Recognize double-slash comments in addition to doc-block comments.\r\n */\r\n\r\n/**\r\n * Options modifying the behavior of JSON serialization.\r\n * @interface IToJSONOptions\r\n * @property {boolean} [keepComments=false] Serializes comments.\r\n */\r\n\r\n/**\r\n * Parses the given .proto source and returns an object with the parsed contents.\r\n * @param {string} source Source contents\r\n * @param {Root} root Root to populate\r\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {IParserResult} Parser result\r\n * @property {string} filename=null Currently processing file name for error reporting, if known\r\n * @property {IParseOptions} defaults Default {@link IParseOptions}\r\n */\r\nfunction parse(source, root, options) {\r\n    /* eslint-disable callback-return */\r\n    if (!(root instanceof Root)) {\r\n        options = root;\r\n        root = new Root();\r\n    }\r\n    if (!options)\r\n        options = parse.defaults;\r\n\r\n    var tn = tokenize(source, options.alternateCommentMode || false),\r\n        next = tn.next,\r\n        push = tn.push,\r\n        peek = tn.peek,\r\n        skip = tn.skip,\r\n        cmnt = tn.cmnt;\r\n\r\n    var head = true,\r\n        pkg,\r\n        imports,\r\n        weakImports,\r\n        syntax,\r\n        isProto3 = false;\r\n\r\n    var ptr = root;\r\n\r\n    var applyCase = options.keepCase ? function(name) { return name; } : util.camelCase;\r\n\r\n    /* istanbul ignore next */\r\n    function illegal(token, name, insideTryCatch) {\r\n        var filename = parse.filename;\r\n        if (!insideTryCatch)\r\n            parse.filename = null;\r\n        return Error(\"illegal \" + (name || \"token\") + \" '\" + token + \"' (\" + (filename ? filename + \", \" : \"\") + \"line \" + tn.line + \")\");\r\n    }\r\n\r\n    function readString() {\r\n        var values = [],\r\n            token;\r\n        do {\r\n            /* istanbul ignore if */\r\n            if ((token = next()) !== \"\\\"\" && token !== \"'\")\r\n                throw illegal(token);\r\n\r\n            values.push(next());\r\n            skip(token);\r\n            token = peek();\r\n        } while (token === \"\\\"\" || token === \"'\");\r\n        return values.join(\"\");\r\n    }\r\n\r\n    function readValue(acceptTypeRef) {\r\n        var token = next();\r\n        switch (token) {\r\n            case \"'\":\r\n            case \"\\\"\":\r\n                push(token);\r\n                return readString();\r\n            case \"true\": case \"TRUE\":\r\n                return true;\r\n            case \"false\": case \"FALSE\":\r\n                return false;\r\n        }\r\n        try {\r\n            return parseNumber(token, /* insideTryCatch */ true);\r\n        } catch (e) {\r\n\r\n            /* istanbul ignore else */\r\n            if (acceptTypeRef && typeRefRe.test(token))\r\n                return token;\r\n\r\n            /* istanbul ignore next */\r\n            throw illegal(token, \"value\");\r\n        }\r\n    }\r\n\r\n    function readRanges(target, acceptStrings) {\r\n        var token, start;\r\n        do {\r\n            if (acceptStrings && ((token = peek()) === \"\\\"\" || token === \"'\"))\r\n                target.push(readString());\r\n            else\r\n                target.push([ start = parseId(next()), skip(\"to\", true) ? parseId(next()) : start ]);\r\n        } while (skip(\",\", true));\r\n        skip(\";\");\r\n    }\r\n\r\n    function parseNumber(token, insideTryCatch) {\r\n        var sign = 1;\r\n        if (token.charAt(0) === \"-\") {\r\n            sign = -1;\r\n            token = token.substring(1);\r\n        }\r\n        switch (token) {\r\n            case \"inf\": case \"INF\": case \"Inf\":\r\n                return sign * Infinity;\r\n            case \"nan\": case \"NAN\": case \"Nan\": case \"NaN\":\r\n                return NaN;\r\n            case \"0\":\r\n                return 0;\r\n        }\r\n        if (base10Re.test(token))\r\n            return sign * parseInt(token, 10);\r\n        if (base16Re.test(token))\r\n            return sign * parseInt(token, 16);\r\n        if (base8Re.test(token))\r\n            return sign * parseInt(token, 8);\r\n\r\n        /* istanbul ignore else */\r\n        if (numberRe.test(token))\r\n            return sign * parseFloat(token);\r\n\r\n        /* istanbul ignore next */\r\n        throw illegal(token, \"number\", insideTryCatch);\r\n    }\r\n\r\n    function parseId(token, acceptNegative) {\r\n        switch (token) {\r\n            case \"max\": case \"MAX\": case \"Max\":\r\n                return 536870911;\r\n            case \"0\":\r\n                return 0;\r\n        }\r\n\r\n        /* istanbul ignore if */\r\n        if (!acceptNegative && token.charAt(0) === \"-\")\r\n            throw illegal(token, \"id\");\r\n\r\n        if (base10NegRe.test(token))\r\n            return parseInt(token, 10);\r\n        if (base16NegRe.test(token))\r\n            return parseInt(token, 16);\r\n\r\n        /* istanbul ignore else */\r\n        if (base8NegRe.test(token))\r\n            return parseInt(token, 8);\r\n\r\n        /* istanbul ignore next */\r\n        throw illegal(token, \"id\");\r\n    }\r\n\r\n    function parsePackage() {\r\n\r\n        /* istanbul ignore if */\r\n        if (pkg !== undefined)\r\n            throw illegal(\"package\");\r\n\r\n        pkg = next();\r\n\r\n        /* istanbul ignore if */\r\n        if (!typeRefRe.test(pkg))\r\n            throw illegal(pkg, \"name\");\r\n\r\n        ptr = ptr.define(pkg);\r\n        skip(\";\");\r\n    }\r\n\r\n    function parseImport() {\r\n        var token = peek();\r\n        var whichImports;\r\n        switch (token) {\r\n            case \"weak\":\r\n                whichImports = weakImports || (weakImports = []);\r\n                next();\r\n                break;\r\n            case \"public\":\r\n                next();\r\n                // eslint-disable-line no-fallthrough\r\n            default:\r\n                whichImports = imports || (imports = []);\r\n                break;\r\n        }\r\n        token = readString();\r\n        skip(\";\");\r\n        whichImports.push(token);\r\n    }\r\n\r\n    function parseSyntax() {\r\n        skip(\"=\");\r\n        syntax = readString();\r\n        isProto3 = syntax === \"proto3\";\r\n\r\n        /* istanbul ignore if */\r\n        if (!isProto3 && syntax !== \"proto2\")\r\n            throw illegal(syntax, \"syntax\");\r\n\r\n        skip(\";\");\r\n    }\r\n\r\n    function parseCommon(parent, token) {\r\n        switch (token) {\r\n\r\n            case \"option\":\r\n                parseOption(parent, token);\r\n                skip(\";\");\r\n                return true;\r\n\r\n            case \"message\":\r\n                parseType(parent, token);\r\n                return true;\r\n\r\n            case \"enum\":\r\n                parseEnum(parent, token);\r\n                return true;\r\n\r\n            case \"service\":\r\n                parseService(parent, token);\r\n                return true;\r\n\r\n            case \"extend\":\r\n                parseExtension(parent, token);\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function ifBlock(obj, fnIf, fnElse) {\r\n        var trailingLine = tn.line;\r\n        if (obj) {\r\n            obj.comment = cmnt(); // try block-type comment\r\n            obj.filename = parse.filename;\r\n        }\r\n        if (skip(\"{\", true)) {\r\n            var token;\r\n            while ((token = next()) !== \"}\")\r\n                fnIf(token);\r\n            skip(\";\", true);\r\n        } else {\r\n            if (fnElse)\r\n                fnElse();\r\n            skip(\";\");\r\n            if (obj && typeof obj.comment !== \"string\")\r\n                obj.comment = cmnt(trailingLine); // try line-type comment if no block\r\n        }\r\n    }\r\n\r\n    function parseType(parent, token) {\r\n\r\n        /* istanbul ignore if */\r\n        if (!nameRe.test(token = next()))\r\n            throw illegal(token, \"type name\");\r\n\r\n        var type = new Type(token);\r\n        ifBlock(type, function parseType_block(token) {\r\n            if (parseCommon(type, token))\r\n                return;\r\n\r\n            switch (token) {\r\n\r\n                case \"map\":\r\n                    parseMapField(type, token);\r\n                    break;\r\n\r\n                case \"required\":\r\n                case \"optional\":\r\n                case \"repeated\":\r\n                    parseField(type, token);\r\n                    break;\r\n\r\n                case \"oneof\":\r\n                    parseOneOf(type, token);\r\n                    break;\r\n\r\n                case \"extensions\":\r\n                    readRanges(type.extensions || (type.extensions = []));\r\n                    break;\r\n\r\n                case \"reserved\":\r\n                    readRanges(type.reserved || (type.reserved = []), true);\r\n                    break;\r\n\r\n                default:\r\n                    /* istanbul ignore if */\r\n                    if (!isProto3 || !typeRefRe.test(token))\r\n                        throw illegal(token);\r\n\r\n                    push(token);\r\n                    parseField(type, \"optional\");\r\n                    break;\r\n            }\r\n        });\r\n        parent.add(type);\r\n    }\r\n\r\n    function parseField(parent, rule, extend) {\r\n        var type = next();\r\n        if (type === \"group\") {\r\n            parseGroup(parent, rule);\r\n            return;\r\n        }\r\n\r\n        /* istanbul ignore if */\r\n        if (!typeRefRe.test(type))\r\n            throw illegal(type, \"type\");\r\n\r\n        var name = next();\r\n\r\n        /* istanbul ignore if */\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, \"name\");\r\n\r\n        name = applyCase(name);\r\n        skip(\"=\");\r\n\r\n        var field = new Field(name, parseId(next()), type, rule, extend);\r\n        ifBlock(field, function parseField_block(token) {\r\n\r\n            /* istanbul ignore else */\r\n            if (token === \"option\") {\r\n                parseOption(field, token);\r\n                skip(\";\");\r\n            } else\r\n                throw illegal(token);\r\n\r\n        }, function parseField_line() {\r\n            parseInlineOptions(field);\r\n        });\r\n        parent.add(field);\r\n\r\n        // JSON defaults to packed=true if not set so we have to set packed=false explicity when\r\n        // parsing proto2 descriptors without the option, where applicable. This must be done for\r\n        // all known packable types and anything that could be an enum (= is not a basic type).\r\n        if (!isProto3 && field.repeated && (types.packed[type] !== undefined || types.basic[type] === undefined))\r\n            field.setOption(\"packed\", false, /* ifNotSet */ true);\r\n    }\r\n\r\n    function parseGroup(parent, rule) {\r\n        var name = next();\r\n\r\n        /* istanbul ignore if */\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, \"name\");\r\n\r\n        var fieldName = util.lcFirst(name);\r\n        if (name === fieldName)\r\n            name = util.ucFirst(name);\r\n        skip(\"=\");\r\n        var id = parseId(next());\r\n        var type = new Type(name);\r\n        type.group = true;\r\n        var field = new Field(fieldName, id, name, rule);\r\n        field.filename = parse.filename;\r\n        ifBlock(type, function parseGroup_block(token) {\r\n            switch (token) {\r\n\r\n                case \"option\":\r\n                    parseOption(type, token);\r\n                    skip(\";\");\r\n                    break;\r\n\r\n                case \"required\":\r\n                case \"optional\":\r\n                case \"repeated\":\r\n                    parseField(type, token);\r\n                    break;\r\n\r\n                /* istanbul ignore next */\r\n                default:\r\n                    throw illegal(token); // there are no groups with proto3 semantics\r\n            }\r\n        });\r\n        parent.add(type)\r\n              .add(field);\r\n    }\r\n\r\n    function parseMapField(parent) {\r\n        skip(\"<\");\r\n        var keyType = next();\r\n\r\n        /* istanbul ignore if */\r\n        if (types.mapKey[keyType] === undefined)\r\n            throw illegal(keyType, \"type\");\r\n\r\n        skip(\",\");\r\n        var valueType = next();\r\n\r\n        /* istanbul ignore if */\r\n        if (!typeRefRe.test(valueType))\r\n            throw illegal(valueType, \"type\");\r\n\r\n        skip(\">\");\r\n        var name = next();\r\n\r\n        /* istanbul ignore if */\r\n        if (!nameRe.test(name))\r\n            throw illegal(name, \"name\");\r\n\r\n        skip(\"=\");\r\n        var field = new MapField(applyCase(name), parseId(next()), keyType, valueType);\r\n        ifBlock(field, function parseMapField_block(token) {\r\n\r\n            /* istanbul ignore else */\r\n            if (token === \"option\") {\r\n                parseOption(field, token);\r\n                skip(\";\");\r\n            } else\r\n                throw illegal(token);\r\n\r\n        }, function parseMapField_line() {\r\n            parseInlineOptions(field);\r\n        });\r\n        parent.add(field);\r\n    }\r\n\r\n    function parseOneOf(parent, token) {\r\n\r\n        /* istanbul ignore if */\r\n        if (!nameRe.test(token = next()))\r\n            throw illegal(token, \"name\");\r\n\r\n        var oneof = new OneOf(applyCase(token));\r\n        ifBlock(oneof, function parseOneOf_block(token) {\r\n            if (token === \"option\") {\r\n                parseOption(oneof, token);\r\n                skip(\";\");\r\n            } else {\r\n                push(token);\r\n                parseField(oneof, \"optional\");\r\n            }\r\n        });\r\n        parent.add(oneof);\r\n    }\r\n\r\n    function parseEnum(parent, token) {\r\n\r\n        /* istanbul ignore if */\r\n        if (!nameRe.test(token = next()))\r\n            throw illegal(token, \"name\");\r\n\r\n        var enm = new Enum(token);\r\n        ifBlock(enm, function parseEnum_block(token) {\r\n          switch(token) {\r\n            case \"option\":\r\n              parseOption(enm, token);\r\n              skip(\";\");\r\n              break;\r\n\r\n            case \"reserved\":\r\n              readRanges(enm.reserved || (enm.reserved = []), true);\r\n              break;\r\n\r\n            default:\r\n              parseEnumValue(enm, token);\r\n          }\r\n        });\r\n        parent.add(enm);\r\n    }\r\n\r\n    function parseEnumValue(parent, token) {\r\n\r\n        /* istanbul ignore if */\r\n        if (!nameRe.test(token))\r\n            throw illegal(token, \"name\");\r\n\r\n        skip(\"=\");\r\n        var value = parseId(next(), true),\r\n            dummy = {};\r\n        ifBlock(dummy, function parseEnumValue_block(token) {\r\n\r\n            /* istanbul ignore else */\r\n            if (token === \"option\") {\r\n                parseOption(dummy, token); // skip\r\n                skip(\";\");\r\n            } else\r\n                throw illegal(token);\r\n\r\n        }, function parseEnumValue_line() {\r\n            parseInlineOptions(dummy); // skip\r\n        });\r\n        parent.add(token, value, dummy.comment);\r\n    }\r\n\r\n    function parseOption(parent, token) {\r\n        var isCustom = skip(\"(\", true);\r\n\r\n        /* istanbul ignore if */\r\n        if (!typeRefRe.test(token = next()))\r\n            throw illegal(token, \"name\");\r\n\r\n        var name = token;\r\n        if (isCustom) {\r\n            skip(\")\");\r\n            name = \"(\" + name + \")\";\r\n            token = peek();\r\n            if (fqTypeRefRe.test(token)) {\r\n                name += token;\r\n                next();\r\n            }\r\n        }\r\n        skip(\"=\");\r\n        parseOptionValue(parent, name);\r\n    }\r\n\r\n    function parseOptionValue(parent, name) {\r\n        if (skip(\"{\", true)) { // { a: \"foo\" b { c: \"bar\" } }\r\n            do {\r\n                /* istanbul ignore if */\r\n                if (!nameRe.test(token = next()))\r\n                    throw illegal(token, \"name\");\r\n\r\n                if (peek() === \"{\")\r\n                    parseOptionValue(parent, name + \".\" + token);\r\n                else {\r\n                    skip(\":\");\r\n                    if (peek() === \"{\")\r\n                        parseOptionValue(parent, name + \".\" + token);\r\n                    else\r\n                        setOption(parent, name + \".\" + token, readValue(true));\r\n                }\r\n                skip(\",\", true);\r\n            } while (!skip(\"}\", true));\r\n        } else\r\n            setOption(parent, name, readValue(true));\r\n        // Does not enforce a delimiter to be universal\r\n    }\r\n\r\n    function setOption(parent, name, value) {\r\n        if (parent.setOption)\r\n            parent.setOption(name, value);\r\n    }\r\n\r\n    function parseInlineOptions(parent) {\r\n        if (skip(\"[\", true)) {\r\n            do {\r\n                parseOption(parent, \"option\");\r\n            } while (skip(\",\", true));\r\n            skip(\"]\");\r\n        }\r\n        return parent;\r\n    }\r\n\r\n    function parseService(parent, token) {\r\n\r\n        /* istanbul ignore if */\r\n        if (!nameRe.test(token = next()))\r\n            throw illegal(token, \"service name\");\r\n\r\n        var service = new Service(token);\r\n        ifBlock(service, function parseService_block(token) {\r\n            if (parseCommon(service, token))\r\n                return;\r\n\r\n            /* istanbul ignore else */\r\n            if (token === \"rpc\")\r\n                parseMethod(service, token);\r\n            else\r\n                throw illegal(token);\r\n        });\r\n        parent.add(service);\r\n    }\r\n\r\n    function parseMethod(parent, token) {\r\n        var type = token;\r\n\r\n        /* istanbul ignore if */\r\n        if (!nameRe.test(token = next()))\r\n            throw illegal(token, \"name\");\r\n\r\n        var name = token,\r\n            requestType, requestStream,\r\n            responseType, responseStream;\r\n\r\n        skip(\"(\");\r\n        if (skip(\"stream\", true))\r\n            requestStream = true;\r\n\r\n        /* istanbul ignore if */\r\n        if (!typeRefRe.test(token = next()))\r\n            throw illegal(token);\r\n\r\n        requestType = token;\r\n        skip(\")\"); skip(\"returns\"); skip(\"(\");\r\n        if (skip(\"stream\", true))\r\n            responseStream = true;\r\n\r\n        /* istanbul ignore if */\r\n        if (!typeRefRe.test(token = next()))\r\n            throw illegal(token);\r\n\r\n        responseType = token;\r\n        skip(\")\");\r\n\r\n        var method = new Method(name, type, requestType, responseType, requestStream, responseStream);\r\n        ifBlock(method, function parseMethod_block(token) {\r\n\r\n            /* istanbul ignore else */\r\n            if (token === \"option\") {\r\n                parseOption(method, token);\r\n                skip(\";\");\r\n            } else\r\n                throw illegal(token);\r\n\r\n        });\r\n        parent.add(method);\r\n    }\r\n\r\n    function parseExtension(parent, token) {\r\n\r\n        /* istanbul ignore if */\r\n        if (!typeRefRe.test(token = next()))\r\n            throw illegal(token, \"reference\");\r\n\r\n        var reference = token;\r\n        ifBlock(null, function parseExtension_block(token) {\r\n            switch (token) {\r\n\r\n                case \"required\":\r\n                case \"repeated\":\r\n                case \"optional\":\r\n                    parseField(parent, token, reference);\r\n                    break;\r\n\r\n                default:\r\n                    /* istanbul ignore if */\r\n                    if (!isProto3 || !typeRefRe.test(token))\r\n                        throw illegal(token);\r\n                    push(token);\r\n                    parseField(parent, \"optional\", reference);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    var token;\r\n    while ((token = next()) !== null) {\r\n        switch (token) {\r\n\r\n            case \"package\":\r\n\r\n                /* istanbul ignore if */\r\n                if (!head)\r\n                    throw illegal(token);\r\n\r\n                parsePackage();\r\n                break;\r\n\r\n            case \"import\":\r\n\r\n                /* istanbul ignore if */\r\n                if (!head)\r\n                    throw illegal(token);\r\n\r\n                parseImport();\r\n                break;\r\n\r\n            case \"syntax\":\r\n\r\n                /* istanbul ignore if */\r\n                if (!head)\r\n                    throw illegal(token);\r\n\r\n                parseSyntax();\r\n                break;\r\n\r\n            case \"option\":\r\n\r\n                /* istanbul ignore if */\r\n                if (!head)\r\n                    throw illegal(token);\r\n\r\n                parseOption(ptr, token);\r\n                skip(\";\");\r\n                break;\r\n\r\n            default:\r\n\r\n                /* istanbul ignore else */\r\n                if (parseCommon(ptr, token)) {\r\n                    head = false;\r\n                    continue;\r\n                }\r\n\r\n                /* istanbul ignore next */\r\n                throw illegal(token);\r\n        }\r\n    }\r\n\r\n    parse.filename = null;\r\n    return {\r\n        \"package\"     : pkg,\r\n        \"imports\"     : imports,\r\n         weakImports  : weakImports,\r\n         syntax       : syntax,\r\n         root         : root\r\n    };\r\n}\r\n\r\n/**\r\n * Parses the given .proto source and returns an object with the parsed contents.\r\n * @name parse\r\n * @function\r\n * @param {string} source Source contents\r\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {IParserResult} Parser result\r\n * @property {string} filename=null Currently processing file name for error reporting, if known\r\n * @property {IParseOptions} defaults Default {@link IParseOptions}\r\n * @variation 2\r\n */\r\n","\"use strict\";\r\nmodule.exports = Reader;\r\n\r\nvar util      = require(39);\r\n\r\nvar BufferReader; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    utf8      = util.utf8;\r\n\r\n/* istanbul ignore next */\r\nfunction indexOutOfRange(reader, writeLength) {\r\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\r\n}\r\n\r\n/**\r\n * Constructs a new reader instance using the specified buffer.\r\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n * @param {Uint8Array} buffer Buffer to read from\r\n */\r\nfunction Reader(buffer) {\r\n\r\n    /**\r\n     * Read buffer.\r\n     * @type {Uint8Array}\r\n     */\r\n    this.buf = buffer;\r\n\r\n    /**\r\n     * Read buffer position.\r\n     * @type {number}\r\n     */\r\n    this.pos = 0;\r\n\r\n    /**\r\n     * Read buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = buffer.length;\r\n}\r\n\r\nvar create_array = typeof Uint8Array !== \"undefined\"\r\n    ? function create_typed_array(buffer) {\r\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\r\n            return new Reader(buffer);\r\n        throw Error(\"illegal buffer\");\r\n    }\r\n    /* istanbul ignore next */\r\n    : function create_array(buffer) {\r\n        if (Array.isArray(buffer))\r\n            return new Reader(buffer);\r\n        throw Error(\"illegal buffer\");\r\n    };\r\n\r\n/**\r\n * Creates a new reader using the specified buffer.\r\n * @function\r\n * @param {Uint8Array|Buffer} buffer Buffer to read from\r\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\r\n * @throws {Error} If `buffer` is not a valid buffer\r\n */\r\nReader.create = util.Buffer\r\n    ? function create_buffer_setup(buffer) {\r\n        return (Reader.create = function create_buffer(buffer) {\r\n            return util.Buffer.isBuffer(buffer)\r\n                ? new BufferReader(buffer)\r\n                /* istanbul ignore next */\r\n                : create_array(buffer);\r\n        })(buffer);\r\n    }\r\n    /* istanbul ignore next */\r\n    : create_array;\r\n\r\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\r\n\r\n/**\r\n * Reads a varint as an unsigned 32 bit value.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.uint32 = (function read_uint32_setup() {\r\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\r\n    return function read_uint32() {\r\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n\r\n        /* istanbul ignore if */\r\n        if ((this.pos += 5) > this.len) {\r\n            this.pos = this.len;\r\n            throw indexOutOfRange(this, 10);\r\n        }\r\n        return value;\r\n    };\r\n})();\r\n\r\n/**\r\n * Reads a varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.int32 = function read_int32() {\r\n    return this.uint32() | 0;\r\n};\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.sint32 = function read_sint32() {\r\n    var value = this.uint32();\r\n    return value >>> 1 ^ -(value & 1) | 0;\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readLongVarint() {\r\n    // tends to deopt with local vars for octet etc.\r\n    var bits = new LongBits(0, 0);\r\n    var i = 0;\r\n    if (this.len - this.pos > 4) { // fast route (lo)\r\n        for (; i < 4; ++i) {\r\n            // 1st..4th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        // 5th\r\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\r\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\r\n        if (this.buf[this.pos++] < 128)\r\n            return bits;\r\n        i = 0;\r\n    } else {\r\n        for (; i < 3; ++i) {\r\n            /* istanbul ignore if */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 1st..3th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        // 4th\r\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\r\n        return bits;\r\n    }\r\n    if (this.len - this.pos > 4) { // fast route (hi)\r\n        for (; i < 5; ++i) {\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    } else {\r\n        for (; i < 5; ++i) {\r\n            /* istanbul ignore if */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    }\r\n    /* istanbul ignore next */\r\n    throw Error(\"invalid varint encoding\");\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads a varint as a signed 64 bit value.\r\n * @name Reader#int64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as an unsigned 64 bit value.\r\n * @name Reader#uint64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 64 bit value.\r\n * @name Reader#sint64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as a boolean.\r\n * @returns {boolean} Value read\r\n */\r\nReader.prototype.bool = function read_bool() {\r\n    return this.uint32() !== 0;\r\n};\r\n\r\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\r\n    return (buf[end - 4]\r\n          | buf[end - 3] << 8\r\n          | buf[end - 2] << 16\r\n          | buf[end - 1] << 24) >>> 0;\r\n}\r\n\r\n/**\r\n * Reads fixed 32 bits as an unsigned 32 bit integer.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.fixed32 = function read_fixed32() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    return readFixed32_end(this.buf, this.pos += 4);\r\n};\r\n\r\n/**\r\n * Reads fixed 32 bits as a signed 32 bit integer.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.sfixed32 = function read_sfixed32() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readFixed64(/* this: Reader */) {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 8);\r\n\r\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads fixed 64 bits.\r\n * @name Reader#fixed64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 64 bits.\r\n * @name Reader#sfixed64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads a float (32 bit) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.float = function read_float() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = util.float.readFloatLE(this.buf, this.pos);\r\n    this.pos += 4;\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a double (64 bit float) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.double = function read_double() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = util.float.readDoubleLE(this.buf, this.pos);\r\n    this.pos += 8;\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @returns {Uint8Array} Value read\r\n */\r\nReader.prototype.bytes = function read_bytes() {\r\n    var length = this.uint32(),\r\n        start  = this.pos,\r\n        end    = this.pos + length;\r\n\r\n    /* istanbul ignore if */\r\n    if (end > this.len)\r\n        throw indexOutOfRange(this, length);\r\n\r\n    this.pos += length;\r\n    if (Array.isArray(this.buf)) // plain array\r\n        return this.buf.slice(start, end);\r\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\r\n        ? new this.buf.constructor(0)\r\n        : this._slice.call(this.buf, start, end);\r\n};\r\n\r\n/**\r\n * Reads a string preceeded by its byte length as a varint.\r\n * @returns {string} Value read\r\n */\r\nReader.prototype.string = function read_string() {\r\n    var bytes = this.bytes();\r\n    return utf8.read(bytes, 0, bytes.length);\r\n};\r\n\r\n/**\r\n * Skips the specified number of bytes if specified, otherwise skips a varint.\r\n * @param {number} [length] Length if known, otherwise a varint is assumed\r\n * @returns {Reader} `this`\r\n */\r\nReader.prototype.skip = function skip(length) {\r\n    if (typeof length === \"number\") {\r\n        /* istanbul ignore if */\r\n        if (this.pos + length > this.len)\r\n            throw indexOutOfRange(this, length);\r\n        this.pos += length;\r\n    } else {\r\n        do {\r\n            /* istanbul ignore if */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n        } while (this.buf[this.pos++] & 128);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Skips the next element of the specified wire type.\r\n * @param {number} wireType Wire type received\r\n * @returns {Reader} `this`\r\n */\r\nReader.prototype.skipType = function(wireType) {\r\n    switch (wireType) {\r\n        case 0:\r\n            this.skip();\r\n            break;\r\n        case 1:\r\n            this.skip(8);\r\n            break;\r\n        case 2:\r\n            this.skip(this.uint32());\r\n            break;\r\n        case 3:\r\n            do { // eslint-disable-line no-constant-condition\r\n                if ((wireType = this.uint32() & 7) === 4)\r\n                    break;\r\n                this.skipType(wireType);\r\n            } while (true);\r\n            break;\r\n        case 5:\r\n            this.skip(4);\r\n            break;\r\n\r\n        /* istanbul ignore next */\r\n        default:\r\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\r\n    }\r\n    return this;\r\n};\r\n\r\nReader._configure = function(BufferReader_) {\r\n    BufferReader = BufferReader_;\r\n\r\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\r\n    util.merge(Reader.prototype, {\r\n\r\n        int64: function read_int64() {\r\n            return readLongVarint.call(this)[fn](false);\r\n        },\r\n\r\n        uint64: function read_uint64() {\r\n            return readLongVarint.call(this)[fn](true);\r\n        },\r\n\r\n        sint64: function read_sint64() {\r\n            return readLongVarint.call(this).zzDecode()[fn](false);\r\n        },\r\n\r\n        fixed64: function read_fixed64() {\r\n            return readFixed64.call(this)[fn](true);\r\n        },\r\n\r\n        sfixed64: function read_sfixed64() {\r\n            return readFixed64.call(this)[fn](false);\r\n        }\r\n\r\n    });\r\n};\r\n","\"use strict\";\r\nmodule.exports = BufferReader;\r\n\r\n// extends Reader\r\nvar Reader = require(27);\r\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\r\n\r\nvar util = require(39);\r\n\r\n/**\r\n * Constructs a new buffer reader instance.\r\n * @classdesc Wire format reader using node buffers.\r\n * @extends Reader\r\n * @constructor\r\n * @param {Buffer} buffer Buffer to read from\r\n */\r\nfunction BufferReader(buffer) {\r\n    Reader.call(this, buffer);\r\n\r\n    /**\r\n     * Read buffer.\r\n     * @name BufferReader#buf\r\n     * @type {Buffer}\r\n     */\r\n}\r\n\r\n/* istanbul ignore else */\r\nif (util.Buffer)\r\n    BufferReader.prototype._slice = util.Buffer.prototype.slice;\r\n\r\n/**\r\n * @override\r\n */\r\nBufferReader.prototype.string = function read_string_buffer() {\r\n    var len = this.uint32(); // modifies pos\r\n    return this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len));\r\n};\r\n\r\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @name BufferReader#bytes\r\n * @function\r\n * @returns {Buffer} Value read\r\n */\r\n","\"use strict\";\r\nmodule.exports = Root;\r\n\r\n// extends Namespace\r\nvar Namespace = require(23);\r\n((Root.prototype = Object.create(Namespace.prototype)).constructor = Root).className = \"Root\";\r\n\r\nvar Field   = require(16),\r\n    Enum    = require(15),\r\n    OneOf   = require(25),\r\n    util    = require(37);\r\n\r\nvar Type,   // cyclic\r\n    parse,  // might be excluded\r\n    common; // \"\r\n\r\n/**\r\n * Constructs a new root namespace instance.\r\n * @classdesc Root namespace wrapping all types, enums, services, sub-namespaces etc. that belong together.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {Object.<string,*>} [options] Top level options\r\n */\r\nfunction Root(options) {\r\n    Namespace.call(this, \"\", options);\r\n\r\n    /**\r\n     * Deferred extension fields.\r\n     * @type {Field[]}\r\n     */\r\n    this.deferred = [];\r\n\r\n    /**\r\n     * Resolved file names of loaded files.\r\n     * @type {string[]}\r\n     */\r\n    this.files = [];\r\n}\r\n\r\n/**\r\n * Loads a namespace descriptor into a root namespace.\r\n * @param {INamespace} json Nameespace descriptor\r\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted\r\n * @returns {Root} Root namespace\r\n */\r\nRoot.fromJSON = function fromJSON(json, root) {\r\n    if (!root)\r\n        root = new Root();\r\n    if (json.options)\r\n        root.setOptions(json.options);\r\n    return root.addJSON(json.nested);\r\n};\r\n\r\n/**\r\n * Resolves the path of an imported file, relative to the importing origin.\r\n * This method exists so you can override it with your own logic in case your imports are scattered over multiple directories.\r\n * @function\r\n * @param {string} origin The file name of the importing file\r\n * @param {string} target The file name being imported\r\n * @returns {string|null} Resolved path to `target` or `null` to skip the file\r\n */\r\nRoot.prototype.resolvePath = util.path.resolve;\r\n\r\n// A symbol-like function to safely signal synchronous loading\r\n/* istanbul ignore next */\r\nfunction SYNC() {} // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {IParseOptions} options Parse options\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\nRoot.prototype.load = function load(filename, options, callback) {\r\n    if (typeof options === \"function\") {\r\n        callback = options;\r\n        options = undefined;\r\n    }\r\n    var self = this;\r\n    if (!callback)\r\n        return util.asPromise(load, self, filename, options);\r\n\r\n    var sync = callback === SYNC; // undocumented\r\n\r\n    // Finishes loading by calling the callback (exactly once)\r\n    function finish(err, root) {\r\n        /* istanbul ignore if */\r\n        if (!callback)\r\n            return;\r\n        var cb = callback;\r\n        callback = null;\r\n        if (sync)\r\n            throw err;\r\n        cb(err, root);\r\n    }\r\n\r\n    // Processes a single file\r\n    function process(filename, source) {\r\n        try {\r\n            if (util.isString(source) && source.charAt(0) === \"{\")\r\n                source = JSON.parse(source);\r\n            if (!util.isString(source))\r\n                self.setOptions(source.options).addJSON(source.nested);\r\n            else {\r\n                parse.filename = filename;\r\n                var parsed = parse(source, self, options),\r\n                    resolved,\r\n                    i = 0;\r\n                if (parsed.imports)\r\n                    for (; i < parsed.imports.length; ++i)\r\n                        if (resolved = self.resolvePath(filename, parsed.imports[i]))\r\n                            fetch(resolved);\r\n                if (parsed.weakImports)\r\n                    for (i = 0; i < parsed.weakImports.length; ++i)\r\n                        if (resolved = self.resolvePath(filename, parsed.weakImports[i]))\r\n                            fetch(resolved, true);\r\n            }\r\n        } catch (err) {\r\n            finish(err);\r\n        }\r\n        if (!sync && !queued)\r\n            finish(null, self); // only once anyway\r\n    }\r\n\r\n    // Fetches a single file\r\n    function fetch(filename, weak) {\r\n\r\n        // Strip path if this file references a bundled definition\r\n        var idx = filename.lastIndexOf(\"google/protobuf/\");\r\n        if (idx > -1) {\r\n            var altname = filename.substring(idx);\r\n            if (altname in common)\r\n                filename = altname;\r\n        }\r\n\r\n        // Skip if already loaded / attempted\r\n        if (self.files.indexOf(filename) > -1)\r\n            return;\r\n        self.files.push(filename);\r\n\r\n        // Shortcut bundled definitions\r\n        if (filename in common) {\r\n            if (sync)\r\n                process(filename, common[filename]);\r\n            else {\r\n                ++queued;\r\n                setTimeout(function() {\r\n                    --queued;\r\n                    process(filename, common[filename]);\r\n                });\r\n            }\r\n            return;\r\n        }\r\n\r\n        // Otherwise fetch from disk or network\r\n        if (sync) {\r\n            var source;\r\n            try {\r\n                source = util.fs.readFileSync(filename).toString(\"utf8\");\r\n            } catch (err) {\r\n                if (!weak)\r\n                    finish(err);\r\n                return;\r\n            }\r\n            process(filename, source);\r\n        } else {\r\n            ++queued;\r\n            util.fetch(filename, function(err, source) {\r\n                --queued;\r\n                /* istanbul ignore if */\r\n                if (!callback)\r\n                    return; // terminated meanwhile\r\n                if (err) {\r\n                    /* istanbul ignore else */\r\n                    if (!weak)\r\n                        finish(err);\r\n                    else if (!queued) // can't be covered reliably\r\n                        finish(null, self);\r\n                    return;\r\n                }\r\n                process(filename, source);\r\n            });\r\n        }\r\n    }\r\n    var queued = 0;\r\n\r\n    // Assembling the root namespace doesn't require working type\r\n    // references anymore, so we can load everything in parallel\r\n    if (util.isString(filename))\r\n        filename = [ filename ];\r\n    for (var i = 0, resolved; i < filename.length; ++i)\r\n        if (resolved = self.resolvePath(\"\", filename[i]))\r\n            fetch(resolved);\r\n\r\n    if (sync)\r\n        return self;\r\n    if (!queued)\r\n        finish(null, self);\r\n    return undefined;\r\n};\r\n// function load(filename:string, options:IParseOptions, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\r\n * @function Root#load\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {LoadCallback} callback Callback function\r\n * @returns {undefined}\r\n * @variation 2\r\n */\r\n// function load(filename:string, callback:LoadCallback):undefined\r\n\r\n/**\r\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and returns a promise.\r\n * @function Root#load\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {Promise<Root>} Promise\r\n * @variation 3\r\n */\r\n// function load(filename:string, [options:IParseOptions]):Promise<Root>\r\n\r\n/**\r\n * Synchronously loads one or multiple .proto or preprocessed .json files into this root namespace (node only).\r\n * @function Root#loadSync\r\n * @param {string|string[]} filename Names of one or multiple files to load\r\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\r\n * @returns {Root} Root namespace\r\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\r\n */\r\nRoot.prototype.loadSync = function loadSync(filename, options) {\r\n    if (!util.isNode)\r\n        throw Error(\"not supported\");\r\n    return this.load(filename, options, SYNC);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nRoot.prototype.resolveAll = function resolveAll() {\r\n    if (this.deferred.length)\r\n        throw Error(\"unresolvable extensions: \" + this.deferred.map(function(field) {\r\n            return \"'extend \" + field.extend + \"' in \" + field.parent.fullName;\r\n        }).join(\", \"));\r\n    return Namespace.prototype.resolveAll.call(this);\r\n};\r\n\r\n// only uppercased (and thus conflict-free) children are exposed, see below\r\nvar exposeRe = /^[A-Z]/;\r\n\r\n/**\r\n * Handles a deferred declaring extension field by creating a sister field to represent it within its extended type.\r\n * @param {Root} root Root instance\r\n * @param {Field} field Declaring extension field witin the declaring type\r\n * @returns {boolean} `true` if successfully added to the extended type, `false` otherwise\r\n * @inner\r\n * @ignore\r\n */\r\nfunction tryHandleExtension(root, field) {\r\n    var extendedType = field.parent.lookup(field.extend);\r\n    if (extendedType) {\r\n        var sisterField = new Field(field.fullName, field.id, field.type, field.rule, undefined, field.options);\r\n        sisterField.declaringField = field;\r\n        field.extensionField = sisterField;\r\n        extendedType.add(sisterField);\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * Called when any object is added to this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object added\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRoot.prototype._handleAdd = function _handleAdd(object) {\r\n    if (object instanceof Field) {\r\n\r\n        if (/* an extension field (implies not part of a oneof) */ object.extend !== undefined && /* not already handled */ !object.extensionField)\r\n            if (!tryHandleExtension(this, object))\r\n                this.deferred.push(object);\r\n\r\n    } else if (object instanceof Enum) {\r\n\r\n        if (exposeRe.test(object.name))\r\n            object.parent[object.name] = object.values; // expose enum values as property of its parent\r\n\r\n    } else if (!(object instanceof OneOf)) /* everything else is a namespace */ {\r\n\r\n        if (object instanceof Type) // Try to handle any deferred extensions\r\n            for (var i = 0; i < this.deferred.length;)\r\n                if (tryHandleExtension(this, this.deferred[i]))\r\n                    this.deferred.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        for (var j = 0; j < /* initializes */ object.nestedArray.length; ++j) // recurse into the namespace\r\n            this._handleAdd(object._nestedArray[j]);\r\n        if (exposeRe.test(object.name))\r\n            object.parent[object.name] = object; // expose namespace as property of its parent\r\n    }\r\n\r\n    // The above also adds uppercased (and thus conflict-free) nested types, services and enums as\r\n    // properties of namespaces just like static code does. This allows using a .d.ts generated for\r\n    // a static module with reflection-based solutions where the condition is met.\r\n};\r\n\r\n/**\r\n * Called when any object is removed from this root or its sub-namespaces.\r\n * @param {ReflectionObject} object Object removed\r\n * @returns {undefined}\r\n * @private\r\n */\r\nRoot.prototype._handleRemove = function _handleRemove(object) {\r\n    if (object instanceof Field) {\r\n\r\n        if (/* an extension field */ object.extend !== undefined) {\r\n            if (/* already handled */ object.extensionField) { // remove its sister field\r\n                object.extensionField.parent.remove(object.extensionField);\r\n                object.extensionField = null;\r\n            } else { // cancel the extension\r\n                var index = this.deferred.indexOf(object);\r\n                /* istanbul ignore else */\r\n                if (index > -1)\r\n                    this.deferred.splice(index, 1);\r\n            }\r\n        }\r\n\r\n    } else if (object instanceof Enum) {\r\n\r\n        if (exposeRe.test(object.name))\r\n            delete object.parent[object.name]; // unexpose enum values\r\n\r\n    } else if (object instanceof Namespace) {\r\n\r\n        for (var i = 0; i < /* initializes */ object.nestedArray.length; ++i) // recurse into the namespace\r\n            this._handleRemove(object._nestedArray[i]);\r\n\r\n        if (exposeRe.test(object.name))\r\n            delete object.parent[object.name]; // unexpose namespaces\r\n\r\n    }\r\n};\r\n\r\n// Sets up cyclic dependencies (called in index-light)\r\nRoot._configure = function(Type_, parse_, common_) {\r\n    Type   = Type_;\r\n    parse  = parse_;\r\n    common = common_;\r\n};\r\n","\"use strict\";\r\nmodule.exports = {};\r\n\r\n/**\r\n * Named roots.\r\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\r\n * Can also be used manually to make roots available accross modules.\r\n * @name roots\r\n * @type {Object.<string,Root>}\r\n * @example\r\n * // pbjs -r myroot -o compiled.js ...\r\n *\r\n * // in another module:\r\n * require(\"./compiled.js\");\r\n *\r\n * // in any subsequent module:\r\n * var root = protobuf.roots[\"myroot\"];\r\n */\r\n","\"use strict\";\r\n\r\n/**\r\n * Streaming RPC helpers.\r\n * @namespace\r\n */\r\nvar rpc = exports;\r\n\r\n/**\r\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\r\n * @typedef RPCImpl\r\n * @type {function}\r\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\r\n * @param {Uint8Array} requestData Request data\r\n * @param {RPCImplCallback} callback Callback function\r\n * @returns {undefined}\r\n * @example\r\n * function rpcImpl(method, requestData, callback) {\r\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\r\n *         throw Error(\"no such method\");\r\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\r\n *         callback(err, responseData);\r\n *     });\r\n * }\r\n */\r\n\r\n/**\r\n * Node-style callback as used by {@link RPCImpl}.\r\n * @typedef RPCImplCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any, otherwise `null`\r\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\nrpc.Service = require(32);\r\n","\"use strict\";\r\nmodule.exports = Service;\r\n\r\nvar util = require(39);\r\n\r\n// Extends EventEmitter\r\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\r\n\r\n/**\r\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\r\n *\r\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\r\n * @typedef rpc.ServiceMethodCallback\r\n * @template TRes extends Message<TRes>\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {TRes} [response] Response message\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\r\n * @typedef rpc.ServiceMethod\r\n * @template TReq extends Message<TReq>\r\n * @template TRes extends Message<TRes>\r\n * @type {function}\r\n * @param {TReq|Properties<TReq>} request Request message or plain object\r\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\r\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\r\n */\r\n\r\n/**\r\n * Constructs a new RPC service instance.\r\n * @classdesc An RPC service as returned by {@link Service#create}.\r\n * @exports rpc.Service\r\n * @extends util.EventEmitter\r\n * @constructor\r\n * @param {RPCImpl} rpcImpl RPC implementation\r\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\r\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\r\n */\r\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\r\n\r\n    if (typeof rpcImpl !== \"function\")\r\n        throw TypeError(\"rpcImpl must be a function\");\r\n\r\n    util.EventEmitter.call(this);\r\n\r\n    /**\r\n     * RPC implementation. Becomes `null` once the service is ended.\r\n     * @type {RPCImpl|null}\r\n     */\r\n    this.rpcImpl = rpcImpl;\r\n\r\n    /**\r\n     * Whether requests are length-delimited.\r\n     * @type {boolean}\r\n     */\r\n    this.requestDelimited = Boolean(requestDelimited);\r\n\r\n    /**\r\n     * Whether responses are length-delimited.\r\n     * @type {boolean}\r\n     */\r\n    this.responseDelimited = Boolean(responseDelimited);\r\n}\r\n\r\n/**\r\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\r\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\r\n * @param {Constructor<TReq>} requestCtor Request constructor\r\n * @param {Constructor<TRes>} responseCtor Response constructor\r\n * @param {TReq|Properties<TReq>} request Request message or plain object\r\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\r\n * @returns {undefined}\r\n * @template TReq extends Message<TReq>\r\n * @template TRes extends Message<TRes>\r\n */\r\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\r\n\r\n    if (!request)\r\n        throw TypeError(\"request must be specified\");\r\n\r\n    var self = this;\r\n    if (!callback)\r\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\r\n\r\n    if (!self.rpcImpl) {\r\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\r\n        return undefined;\r\n    }\r\n\r\n    try {\r\n        return self.rpcImpl(\r\n            method,\r\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\r\n            function rpcCallback(err, response) {\r\n\r\n                if (err) {\r\n                    self.emit(\"error\", err, method);\r\n                    return callback(err);\r\n                }\r\n\r\n                if (response === null) {\r\n                    self.end(/* endedByRPC */ true);\r\n                    return undefined;\r\n                }\r\n\r\n                if (!(response instanceof responseCtor)) {\r\n                    try {\r\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\r\n                    } catch (err) {\r\n                        self.emit(\"error\", err, method);\r\n                        return callback(err);\r\n                    }\r\n                }\r\n\r\n                self.emit(\"data\", response, method);\r\n                return callback(null, response);\r\n            }\r\n        );\r\n    } catch (err) {\r\n        self.emit(\"error\", err, method);\r\n        setTimeout(function() { callback(err); }, 0);\r\n        return undefined;\r\n    }\r\n};\r\n\r\n/**\r\n * Ends this service and emits the `end` event.\r\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\r\n * @returns {rpc.Service} `this`\r\n */\r\nService.prototype.end = function end(endedByRPC) {\r\n    if (this.rpcImpl) {\r\n        if (!endedByRPC) // signal end to rpcImpl\r\n            this.rpcImpl(null, null, null);\r\n        this.rpcImpl = null;\r\n        this.emit(\"end\").off();\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Service;\r\n\r\n// extends Namespace\r\nvar Namespace = require(23);\r\n((Service.prototype = Object.create(Namespace.prototype)).constructor = Service).className = \"Service\";\r\n\r\nvar Method = require(22),\r\n    util   = require(37),\r\n    rpc    = require(31);\r\n\r\n/**\r\n * Constructs a new service instance.\r\n * @classdesc Reflected service.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {string} name Service name\r\n * @param {Object.<string,*>} [options] Service options\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nfunction Service(name, options) {\r\n    Namespace.call(this, name, options);\r\n\r\n    /**\r\n     * Service methods.\r\n     * @type {Object.<string,Method>}\r\n     */\r\n    this.methods = {}; // toJSON, marker\r\n\r\n    /**\r\n     * Cached methods as an array.\r\n     * @type {Method[]|null}\r\n     * @private\r\n     */\r\n    this._methodsArray = null;\r\n}\r\n\r\n/**\r\n * Service descriptor.\r\n * @interface IService\r\n * @extends INamespace\r\n * @property {Object.<string,IMethod>} methods Method descriptors\r\n */\r\n\r\n/**\r\n * Constructs a service from a service descriptor.\r\n * @param {string} name Service name\r\n * @param {IService} json Service descriptor\r\n * @returns {Service} Created service\r\n * @throws {TypeError} If arguments are invalid\r\n */\r\nService.fromJSON = function fromJSON(name, json) {\r\n    var service = new Service(name, json.options);\r\n    /* istanbul ignore else */\r\n    if (json.methods)\r\n        for (var names = Object.keys(json.methods), i = 0; i < names.length; ++i)\r\n            service.add(Method.fromJSON(names[i], json.methods[names[i]]));\r\n    if (json.nested)\r\n        service.addJSON(json.nested);\r\n    service.comment = json.comment;\r\n    return service;\r\n};\r\n\r\n/**\r\n * Converts this service to a service descriptor.\r\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\r\n * @returns {IService} Service descriptor\r\n */\r\nService.prototype.toJSON = function toJSON(toJSONOptions) {\r\n    var inherited = Namespace.prototype.toJSON.call(this, toJSONOptions);\r\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\r\n    return util.toObject([\r\n        \"options\" , inherited && inherited.options || undefined,\r\n        \"methods\" , Namespace.arrayToJSON(this.methodsArray, toJSONOptions) || /* istanbul ignore next */ {},\r\n        \"nested\"  , inherited && inherited.nested || undefined,\r\n        \"comment\" , keepComments ? this.comment : undefined\r\n    ]);\r\n};\r\n\r\n/**\r\n * Methods of this service as an array for iteration.\r\n * @name Service#methodsArray\r\n * @type {Method[]}\r\n * @readonly\r\n */\r\nObject.defineProperty(Service.prototype, \"methodsArray\", {\r\n    get: function() {\r\n        return this._methodsArray || (this._methodsArray = util.toArray(this.methods));\r\n    }\r\n});\r\n\r\nfunction clearCache(service) {\r\n    service._methodsArray = null;\r\n    return service;\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nService.prototype.get = function get(name) {\r\n    return this.methods[name]\r\n        || Namespace.prototype.get.call(this, name);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nService.prototype.resolveAll = function resolveAll() {\r\n    var methods = this.methodsArray;\r\n    for (var i = 0; i < methods.length; ++i)\r\n        methods[i].resolve();\r\n    return Namespace.prototype.resolve.call(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nService.prototype.add = function add(object) {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.get(object.name))\r\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n\r\n    if (object instanceof Method) {\r\n        this.methods[object.name] = object;\r\n        object.parent = this;\r\n        return clearCache(this);\r\n    }\r\n    return Namespace.prototype.add.call(this, object);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nService.prototype.remove = function remove(object) {\r\n    if (object instanceof Method) {\r\n\r\n        /* istanbul ignore if */\r\n        if (this.methods[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n\r\n        delete this.methods[object.name];\r\n        object.parent = null;\r\n        return clearCache(this);\r\n    }\r\n    return Namespace.prototype.remove.call(this, object);\r\n};\r\n\r\n/**\r\n * Creates a runtime service using the specified rpc implementation.\r\n * @param {RPCImpl} rpcImpl RPC implementation\r\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\r\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\r\n * @returns {rpc.Service} RPC service. Useful where requests and/or responses are streamed.\r\n */\r\nService.prototype.create = function create(rpcImpl, requestDelimited, responseDelimited) {\r\n    var rpcService = new rpc.Service(rpcImpl, requestDelimited, responseDelimited);\r\n    for (var i = 0, method; i < /* initializes */ this.methodsArray.length; ++i) {\r\n        var methodName = util.lcFirst((method = this._methodsArray[i]).resolve().name).replace(/[^$\\w_]/g, \"\");\r\n        rpcService[methodName] = util.codegen([\"r\",\"c\"], util.isReserved(methodName) ? methodName + \"_\" : methodName)(\"return this.rpcCall(m,q,s,r,c)\")({\r\n            m: method,\r\n            q: method.resolvedRequestType.ctor,\r\n            s: method.resolvedResponseType.ctor\r\n        });\r\n    }\r\n    return rpcService;\r\n};\r\n","\"use strict\";\r\nmodule.exports = tokenize;\r\n\r\nvar delimRe        = /[\\s{}=;:[\\],'\"()<>]/g,\r\n    stringDoubleRe = /(?:\"([^\"\\\\]*(?:\\\\.[^\"\\\\]*)*)\")/g,\r\n    stringSingleRe = /(?:'([^'\\\\]*(?:\\\\.[^'\\\\]*)*)')/g;\r\n\r\nvar setCommentRe = /^ *[*/]+ */,\r\n    setCommentAltRe = /^\\s*\\*?\\/*/,\r\n    setCommentSplitRe = /\\n/g,\r\n    whitespaceRe = /\\s/,\r\n    unescapeRe = /\\\\(.?)/g;\r\n\r\nvar unescapeMap = {\r\n    \"0\": \"\\0\",\r\n    \"r\": \"\\r\",\r\n    \"n\": \"\\n\",\r\n    \"t\": \"\\t\"\r\n};\r\n\r\n/**\r\n * Unescapes a string.\r\n * @param {string} str String to unescape\r\n * @returns {string} Unescaped string\r\n * @property {Object.<string,string>} map Special characters map\r\n * @memberof tokenize\r\n */\r\nfunction unescape(str) {\r\n    return str.replace(unescapeRe, function($0, $1) {\r\n        switch ($1) {\r\n            case \"\\\\\":\r\n            case \"\":\r\n                return $1;\r\n            default:\r\n                return unescapeMap[$1] || \"\";\r\n        }\r\n    });\r\n}\r\n\r\ntokenize.unescape = unescape;\r\n\r\n/**\r\n * Gets the next token and advances.\r\n * @typedef TokenizerHandleNext\r\n * @type {function}\r\n * @returns {string|null} Next token or `null` on eof\r\n */\r\n\r\n/**\r\n * Peeks for the next token.\r\n * @typedef TokenizerHandlePeek\r\n * @type {function}\r\n * @returns {string|null} Next token or `null` on eof\r\n */\r\n\r\n/**\r\n * Pushes a token back to the stack.\r\n * @typedef TokenizerHandlePush\r\n * @type {function}\r\n * @param {string} token Token\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Skips the next token.\r\n * @typedef TokenizerHandleSkip\r\n * @type {function}\r\n * @param {string} expected Expected token\r\n * @param {boolean} [optional=false] If optional\r\n * @returns {boolean} Whether the token matched\r\n * @throws {Error} If the token didn't match and is not optional\r\n */\r\n\r\n/**\r\n * Gets the comment on the previous line or, alternatively, the line comment on the specified line.\r\n * @typedef TokenizerHandleCmnt\r\n * @type {function}\r\n * @param {number} [line] Line number\r\n * @returns {string|null} Comment text or `null` if none\r\n */\r\n\r\n/**\r\n * Handle object returned from {@link tokenize}.\r\n * @interface ITokenizerHandle\r\n * @property {TokenizerHandleNext} next Gets the next token and advances (`null` on eof)\r\n * @property {TokenizerHandlePeek} peek Peeks for the next token (`null` on eof)\r\n * @property {TokenizerHandlePush} push Pushes a token back to the stack\r\n * @property {TokenizerHandleSkip} skip Skips a token, returns its presence and advances or, if non-optional and not present, throws\r\n * @property {TokenizerHandleCmnt} cmnt Gets the comment on the previous line or the line comment on the specified line, if any\r\n * @property {number} line Current line number\r\n */\r\n\r\n/**\r\n * Tokenizes the given .proto source and returns an object with useful utility functions.\r\n * @param {string} source Source contents\r\n * @param {boolean} alternateCommentMode Whether we should activate alternate comment parsing mode.\r\n * @returns {ITokenizerHandle} Tokenizer handle\r\n */\r\nfunction tokenize(source, alternateCommentMode) {\r\n    /* eslint-disable callback-return */\r\n    source = source.toString();\r\n\r\n    var offset = 0,\r\n        length = source.length,\r\n        line = 1,\r\n        commentType = null,\r\n        commentText = null,\r\n        commentLine = 0,\r\n        commentLineEmpty = false;\r\n\r\n    var stack = [];\r\n\r\n    var stringDelim = null;\r\n\r\n    /* istanbul ignore next */\r\n    /**\r\n     * Creates an error for illegal syntax.\r\n     * @param {string} subject Subject\r\n     * @returns {Error} Error created\r\n     * @inner\r\n     */\r\n    function illegal(subject) {\r\n        return Error(\"illegal \" + subject + \" (line \" + line + \")\");\r\n    }\r\n\r\n    /**\r\n     * Reads a string till its end.\r\n     * @returns {string} String read\r\n     * @inner\r\n     */\r\n    function readString() {\r\n        var re = stringDelim === \"'\" ? stringSingleRe : stringDoubleRe;\r\n        re.lastIndex = offset - 1;\r\n        var match = re.exec(source);\r\n        if (!match)\r\n            throw illegal(\"string\");\r\n        offset = re.lastIndex;\r\n        push(stringDelim);\r\n        stringDelim = null;\r\n        return unescape(match[1]);\r\n    }\r\n\r\n    /**\r\n     * Gets the character at `pos` within the source.\r\n     * @param {number} pos Position\r\n     * @returns {string} Character\r\n     * @inner\r\n     */\r\n    function charAt(pos) {\r\n        return source.charAt(pos);\r\n    }\r\n\r\n    /**\r\n     * Sets the current comment text.\r\n     * @param {number} start Start offset\r\n     * @param {number} end End offset\r\n     * @returns {undefined}\r\n     * @inner\r\n     */\r\n    function setComment(start, end) {\r\n        commentType = source.charAt(start++);\r\n        commentLine = line;\r\n        commentLineEmpty = false;\r\n        var lookback;\r\n        if (alternateCommentMode) {\r\n            lookback = 2;  // alternate comment parsing: \"//\" or \"/*\"\r\n        } else {\r\n            lookback = 3;  // \"///\" or \"/**\"\r\n        }\r\n        var commentOffset = start - lookback,\r\n            c;\r\n        do {\r\n            if (--commentOffset < 0 ||\r\n                    (c = source.charAt(commentOffset)) === \"\\n\") {\r\n                commentLineEmpty = true;\r\n                break;\r\n            }\r\n        } while (c === \" \" || c === \"\\t\");\r\n        var lines = source\r\n            .substring(start, end)\r\n            .split(setCommentSplitRe);\r\n        for (var i = 0; i < lines.length; ++i)\r\n            lines[i] = lines[i]\r\n                .replace(alternateCommentMode ? setCommentAltRe : setCommentRe, \"\")\r\n                .trim();\r\n        commentText = lines\r\n            .join(\"\\n\")\r\n            .trim();\r\n    }\r\n\r\n    function isDoubleSlashCommentLine(startOffset) {\r\n        var endOffset = findEndOfLine(startOffset);\r\n\r\n        // see if remaining line matches comment pattern\r\n        var lineText = source.substring(startOffset, endOffset);\r\n        // look for 1 or 2 slashes since startOffset would already point past\r\n        // the first slash that started the comment.\r\n        var isComment = /^\\s*\\/{1,2}/.test(lineText);\r\n        return isComment;\r\n    }\r\n\r\n    function findEndOfLine(cursor) {\r\n        // find end of cursor's line\r\n        var endOffset = cursor;\r\n        while (endOffset < length && charAt(endOffset) !== \"\\n\") {\r\n            endOffset++;\r\n        }\r\n        return endOffset;\r\n    }\r\n\r\n    /**\r\n     * Obtains the next token.\r\n     * @returns {string|null} Next token or `null` on eof\r\n     * @inner\r\n     */\r\n    function next() {\r\n        if (stack.length > 0)\r\n            return stack.shift();\r\n        if (stringDelim)\r\n            return readString();\r\n        var repeat,\r\n            prev,\r\n            curr,\r\n            start,\r\n            isDoc;\r\n        do {\r\n            if (offset === length)\r\n                return null;\r\n            repeat = false;\r\n            while (whitespaceRe.test(curr = charAt(offset))) {\r\n                if (curr === \"\\n\")\r\n                    ++line;\r\n                if (++offset === length)\r\n                    return null;\r\n            }\r\n\r\n            if (charAt(offset) === \"/\") {\r\n                if (++offset === length) {\r\n                    throw illegal(\"comment\");\r\n                }\r\n                if (charAt(offset) === \"/\") { // Line\r\n                    if (!alternateCommentMode) {\r\n                        // check for triple-slash comment\r\n                        isDoc = charAt(start = offset + 1) === \"/\";\r\n\r\n                        while (charAt(++offset) !== \"\\n\") {\r\n                            if (offset === length) {\r\n                                return null;\r\n                            }\r\n                        }\r\n                        ++offset;\r\n                        if (isDoc) {\r\n                            setComment(start, offset - 1);\r\n                        }\r\n                        ++line;\r\n                        repeat = true;\r\n                    } else {\r\n                        // check for double-slash comments, consolidating consecutive lines\r\n                        start = offset;\r\n                        isDoc = false;\r\n                        if (isDoubleSlashCommentLine(offset)) {\r\n                            isDoc = true;\r\n                            do {\r\n                                offset = findEndOfLine(offset);\r\n                                if (offset === length) {\r\n                                    break;\r\n                                }\r\n                                offset++;\r\n                            } while (isDoubleSlashCommentLine(offset));\r\n                        } else {\r\n                            offset = Math.min(length, findEndOfLine(offset) + 1);\r\n                        }\r\n                        if (isDoc) {\r\n                            setComment(start, offset);\r\n                        }\r\n                        line++;\r\n                        repeat = true;\r\n                    }\r\n                } else if ((curr = charAt(offset)) === \"*\") { /* Block */\r\n                    // check for /** (regular comment mode) or /* (alternate comment mode)\r\n                    start = offset + 1;\r\n                    isDoc = alternateCommentMode || charAt(start) === \"*\";\r\n                    do {\r\n                        if (curr === \"\\n\") {\r\n                            ++line;\r\n                        }\r\n                        if (++offset === length) {\r\n                            throw illegal(\"comment\");\r\n                        }\r\n                        prev = curr;\r\n                        curr = charAt(offset);\r\n                    } while (prev !== \"*\" || curr !== \"/\");\r\n                    ++offset;\r\n                    if (isDoc) {\r\n                        setComment(start, offset - 2);\r\n                    }\r\n                    repeat = true;\r\n                } else {\r\n                    return \"/\";\r\n                }\r\n            }\r\n        } while (repeat);\r\n\r\n        // offset !== length if we got here\r\n\r\n        var end = offset;\r\n        delimRe.lastIndex = 0;\r\n        var delim = delimRe.test(charAt(end++));\r\n        if (!delim)\r\n            while (end < length && !delimRe.test(charAt(end)))\r\n                ++end;\r\n        var token = source.substring(offset, offset = end);\r\n        if (token === \"\\\"\" || token === \"'\")\r\n            stringDelim = token;\r\n        return token;\r\n    }\r\n\r\n    /**\r\n     * Pushes a token back to the stack.\r\n     * @param {string} token Token\r\n     * @returns {undefined}\r\n     * @inner\r\n     */\r\n    function push(token) {\r\n        stack.push(token);\r\n    }\r\n\r\n    /**\r\n     * Peeks for the next token.\r\n     * @returns {string|null} Token or `null` on eof\r\n     * @inner\r\n     */\r\n    function peek() {\r\n        if (!stack.length) {\r\n            var token = next();\r\n            if (token === null)\r\n                return null;\r\n            push(token);\r\n        }\r\n        return stack[0];\r\n    }\r\n\r\n    /**\r\n     * Skips a token.\r\n     * @param {string} expected Expected token\r\n     * @param {boolean} [optional=false] Whether the token is optional\r\n     * @returns {boolean} `true` when skipped, `false` if not\r\n     * @throws {Error} When a required token is not present\r\n     * @inner\r\n     */\r\n    function skip(expected, optional) {\r\n        var actual = peek(),\r\n            equals = actual === expected;\r\n        if (equals) {\r\n            next();\r\n            return true;\r\n        }\r\n        if (!optional)\r\n            throw illegal(\"token '\" + actual + \"', '\" + expected + \"' expected\");\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Gets a comment.\r\n     * @param {number} [trailingLine] Line number if looking for a trailing comment\r\n     * @returns {string|null} Comment text\r\n     * @inner\r\n     */\r\n    function cmnt(trailingLine) {\r\n        var ret = null;\r\n        if (trailingLine === undefined) {\r\n            if (commentLine === line - 1 && (alternateCommentMode || commentType === \"*\" || commentLineEmpty)) {\r\n                ret = commentText;\r\n            }\r\n        } else {\r\n            /* istanbul ignore else */\r\n            if (commentLine < trailingLine) {\r\n                peek();\r\n            }\r\n            if (commentLine === trailingLine && !commentLineEmpty && (alternateCommentMode || commentType === \"/\")) {\r\n                ret = commentText;\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    return Object.defineProperty({\r\n        next: next,\r\n        peek: peek,\r\n        push: push,\r\n        skip: skip,\r\n        cmnt: cmnt\r\n    }, \"line\", {\r\n        get: function() { return line; }\r\n    });\r\n    /* eslint-enable callback-return */\r\n}\r\n","\"use strict\";\r\nmodule.exports = Type;\r\n\r\n// extends Namespace\r\nvar Namespace = require(23);\r\n((Type.prototype = Object.create(Namespace.prototype)).constructor = Type).className = \"Type\";\r\n\r\nvar Enum      = require(15),\r\n    OneOf     = require(25),\r\n    Field     = require(16),\r\n    MapField  = require(20),\r\n    Service   = require(33),\r\n    Message   = require(21),\r\n    Reader    = require(27),\r\n    Writer    = require(42),\r\n    util      = require(37),\r\n    encoder   = require(14),\r\n    decoder   = require(13),\r\n    verifier  = require(40),\r\n    converter = require(12),\r\n    wrappers  = require(41);\r\n\r\n/**\r\n * Constructs a new reflected message type instance.\r\n * @classdesc Reflected message type.\r\n * @extends NamespaceBase\r\n * @constructor\r\n * @param {string} name Message name\r\n * @param {Object.<string,*>} [options] Declared options\r\n */\r\nfunction Type(name, options) {\r\n    Namespace.call(this, name, options);\r\n\r\n    /**\r\n     * Message fields.\r\n     * @type {Object.<string,Field>}\r\n     */\r\n    this.fields = {};  // toJSON, marker\r\n\r\n    /**\r\n     * Oneofs declared within this namespace, if any.\r\n     * @type {Object.<string,OneOf>}\r\n     */\r\n    this.oneofs = undefined; // toJSON\r\n\r\n    /**\r\n     * Extension ranges, if any.\r\n     * @type {number[][]}\r\n     */\r\n    this.extensions = undefined; // toJSON\r\n\r\n    /**\r\n     * Reserved ranges, if any.\r\n     * @type {Array.<number[]|string>}\r\n     */\r\n    this.reserved = undefined; // toJSON\r\n\r\n    /*?\r\n     * Whether this type is a legacy group.\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.group = undefined; // toJSON\r\n\r\n    /**\r\n     * Cached fields by id.\r\n     * @type {Object.<number,Field>|null}\r\n     * @private\r\n     */\r\n    this._fieldsById = null;\r\n\r\n    /**\r\n     * Cached fields as an array.\r\n     * @type {Field[]|null}\r\n     * @private\r\n     */\r\n    this._fieldsArray = null;\r\n\r\n    /**\r\n     * Cached oneofs as an array.\r\n     * @type {OneOf[]|null}\r\n     * @private\r\n     */\r\n    this._oneofsArray = null;\r\n\r\n    /**\r\n     * Cached constructor.\r\n     * @type {Constructor<{}>}\r\n     * @private\r\n     */\r\n    this._ctor = null;\r\n}\r\n\r\nObject.defineProperties(Type.prototype, {\r\n\r\n    /**\r\n     * Message fields by id.\r\n     * @name Type#fieldsById\r\n     * @type {Object.<number,Field>}\r\n     * @readonly\r\n     */\r\n    fieldsById: {\r\n        get: function() {\r\n\r\n            /* istanbul ignore if */\r\n            if (this._fieldsById)\r\n                return this._fieldsById;\r\n\r\n            this._fieldsById = {};\r\n            for (var names = Object.keys(this.fields), i = 0; i < names.length; ++i) {\r\n                var field = this.fields[names[i]],\r\n                    id = field.id;\r\n\r\n                /* istanbul ignore if */\r\n                if (this._fieldsById[id])\r\n                    throw Error(\"duplicate id \" + id + \" in \" + this);\r\n\r\n                this._fieldsById[id] = field;\r\n            }\r\n            return this._fieldsById;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Fields of this message as an array for iteration.\r\n     * @name Type#fieldsArray\r\n     * @type {Field[]}\r\n     * @readonly\r\n     */\r\n    fieldsArray: {\r\n        get: function() {\r\n            return this._fieldsArray || (this._fieldsArray = util.toArray(this.fields));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Oneofs of this message as an array for iteration.\r\n     * @name Type#oneofsArray\r\n     * @type {OneOf[]}\r\n     * @readonly\r\n     */\r\n    oneofsArray: {\r\n        get: function() {\r\n            return this._oneofsArray || (this._oneofsArray = util.toArray(this.oneofs));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * The registered constructor, if any registered, otherwise a generic constructor.\r\n     * Assigning a function replaces the internal constructor. If the function does not extend {@link Message} yet, its prototype will be setup accordingly and static methods will be populated. If it already extends {@link Message}, it will just replace the internal constructor.\r\n     * @name Type#ctor\r\n     * @type {Constructor<{}>}\r\n     */\r\n    ctor: {\r\n        get: function() {\r\n            return this._ctor || (this.ctor = Type.generateConstructor(this)());\r\n        },\r\n        set: function(ctor) {\r\n\r\n            // Ensure proper prototype\r\n            var prototype = ctor.prototype;\r\n            if (!(prototype instanceof Message)) {\r\n                (ctor.prototype = new Message()).constructor = ctor;\r\n                util.merge(ctor.prototype, prototype);\r\n            }\r\n\r\n            // Classes and messages reference their reflected type\r\n            ctor.$type = ctor.prototype.$type = this;\r\n\r\n            // Mix in static methods\r\n            util.merge(ctor, Message, true);\r\n\r\n            this._ctor = ctor;\r\n\r\n            // Messages have non-enumerable default values on their prototype\r\n            var i = 0;\r\n            for (; i < /* initializes */ this.fieldsArray.length; ++i)\r\n                this._fieldsArray[i].resolve(); // ensures a proper value\r\n\r\n            // Messages have non-enumerable getters and setters for each virtual oneof field\r\n            var ctorProperties = {};\r\n            for (i = 0; i < /* initializes */ this.oneofsArray.length; ++i)\r\n                ctorProperties[this._oneofsArray[i].resolve().name] = {\r\n                    get: util.oneOfGetter(this._oneofsArray[i].oneof),\r\n                    set: util.oneOfSetter(this._oneofsArray[i].oneof)\r\n                };\r\n            if (i)\r\n                Object.defineProperties(ctor.prototype, ctorProperties);\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n * Generates a constructor function for the specified type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nType.generateConstructor = function generateConstructor(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    var gen = util.codegen([\"p\"], mtype.name);\r\n    // explicitly initialize mutable object/array fields so that these aren't just inherited from the prototype\r\n    for (var i = 0, field; i < mtype.fieldsArray.length; ++i)\r\n        if ((field = mtype._fieldsArray[i]).map) gen\r\n            (\"this%s={}\", util.safeProp(field.name));\r\n        else if (field.repeated) gen\r\n            (\"this%s=[]\", util.safeProp(field.name));\r\n    return gen\r\n    (\"if(p)for(var ks=Object.keys(p),i=0;i<ks.length;++i)if(p[ks[i]]!=null)\") // omit undefined or null\r\n        (\"this[ks[i]]=p[ks[i]]\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n};\r\n\r\nfunction clearCache(type) {\r\n    type._fieldsById = type._fieldsArray = type._oneofsArray = null;\r\n    delete type.encode;\r\n    delete type.decode;\r\n    delete type.verify;\r\n    return type;\r\n}\r\n\r\n/**\r\n * Message type descriptor.\r\n * @interface IType\r\n * @extends INamespace\r\n * @property {Object.<string,IOneOf>} [oneofs] Oneof descriptors\r\n * @property {Object.<string,IField>} fields Field descriptors\r\n * @property {number[][]} [extensions] Extension ranges\r\n * @property {number[][]} [reserved] Reserved ranges\r\n * @property {boolean} [group=false] Whether a legacy group or not\r\n */\r\n\r\n/**\r\n * Creates a message type from a message type descriptor.\r\n * @param {string} name Message name\r\n * @param {IType} json Message type descriptor\r\n * @returns {Type} Created message type\r\n */\r\nType.fromJSON = function fromJSON(name, json) {\r\n    var type = new Type(name, json.options);\r\n    type.extensions = json.extensions;\r\n    type.reserved = json.reserved;\r\n    var names = Object.keys(json.fields),\r\n        i = 0;\r\n    for (; i < names.length; ++i)\r\n        type.add(\r\n            ( typeof json.fields[names[i]].keyType !== \"undefined\"\r\n            ? MapField.fromJSON\r\n            : Field.fromJSON )(names[i], json.fields[names[i]])\r\n        );\r\n    if (json.oneofs)\r\n        for (names = Object.keys(json.oneofs), i = 0; i < names.length; ++i)\r\n            type.add(OneOf.fromJSON(names[i], json.oneofs[names[i]]));\r\n    if (json.nested)\r\n        for (names = Object.keys(json.nested), i = 0; i < names.length; ++i) {\r\n            var nested = json.nested[names[i]];\r\n            type.add( // most to least likely\r\n                ( nested.id !== undefined\r\n                ? Field.fromJSON\r\n                : nested.fields !== undefined\r\n                ? Type.fromJSON\r\n                : nested.values !== undefined\r\n                ? Enum.fromJSON\r\n                : nested.methods !== undefined\r\n                ? Service.fromJSON\r\n                : Namespace.fromJSON )(names[i], nested)\r\n            );\r\n        }\r\n    if (json.extensions && json.extensions.length)\r\n        type.extensions = json.extensions;\r\n    if (json.reserved && json.reserved.length)\r\n        type.reserved = json.reserved;\r\n    if (json.group)\r\n        type.group = true;\r\n    if (json.comment)\r\n        type.comment = json.comment;\r\n    return type;\r\n};\r\n\r\n/**\r\n * Converts this message type to a message type descriptor.\r\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\r\n * @returns {IType} Message type descriptor\r\n */\r\nType.prototype.toJSON = function toJSON(toJSONOptions) {\r\n    var inherited = Namespace.prototype.toJSON.call(this, toJSONOptions);\r\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\r\n    return util.toObject([\r\n        \"options\"    , inherited && inherited.options || undefined,\r\n        \"oneofs\"     , Namespace.arrayToJSON(this.oneofsArray, toJSONOptions),\r\n        \"fields\"     , Namespace.arrayToJSON(this.fieldsArray.filter(function(obj) { return !obj.declaringField; }), toJSONOptions) || {},\r\n        \"extensions\" , this.extensions && this.extensions.length ? this.extensions : undefined,\r\n        \"reserved\"   , this.reserved && this.reserved.length ? this.reserved : undefined,\r\n        \"group\"      , this.group || undefined,\r\n        \"nested\"     , inherited && inherited.nested || undefined,\r\n        \"comment\"    , keepComments ? this.comment : undefined\r\n    ]);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nType.prototype.resolveAll = function resolveAll() {\r\n    var fields = this.fieldsArray, i = 0;\r\n    while (i < fields.length)\r\n        fields[i++].resolve();\r\n    var oneofs = this.oneofsArray; i = 0;\r\n    while (i < oneofs.length)\r\n        oneofs[i++].resolve();\r\n    return Namespace.prototype.resolveAll.call(this);\r\n};\r\n\r\n/**\r\n * @override\r\n */\r\nType.prototype.get = function get(name) {\r\n    return this.fields[name]\r\n        || this.oneofs && this.oneofs[name]\r\n        || this.nested && this.nested[name]\r\n        || null;\r\n};\r\n\r\n/**\r\n * Adds a nested object to this type.\r\n * @param {ReflectionObject} object Nested object to add\r\n * @returns {Type} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If there is already a nested object with this name or, if a field, when there is already a field with this id\r\n */\r\nType.prototype.add = function add(object) {\r\n\r\n    if (this.get(object.name))\r\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\r\n\r\n    if (object instanceof Field && object.extend === undefined) {\r\n        // NOTE: Extension fields aren't actual fields on the declaring type, but nested objects.\r\n        // The root object takes care of adding distinct sister-fields to the respective extended\r\n        // type instead.\r\n\r\n        // avoids calling the getter if not absolutely necessary because it's called quite frequently\r\n        if (this._fieldsById ? /* istanbul ignore next */ this._fieldsById[object.id] : this.fieldsById[object.id])\r\n            throw Error(\"duplicate id \" + object.id + \" in \" + this);\r\n        if (this.isReservedId(object.id))\r\n            throw Error(\"id \" + object.id + \" is reserved in \" + this);\r\n        if (this.isReservedName(object.name))\r\n            throw Error(\"name '\" + object.name + \"' is reserved in \" + this);\r\n\r\n        if (object.parent)\r\n            object.parent.remove(object);\r\n        this.fields[object.name] = object;\r\n        object.message = this;\r\n        object.onAdd(this);\r\n        return clearCache(this);\r\n    }\r\n    if (object instanceof OneOf) {\r\n        if (!this.oneofs)\r\n            this.oneofs = {};\r\n        this.oneofs[object.name] = object;\r\n        object.onAdd(this);\r\n        return clearCache(this);\r\n    }\r\n    return Namespace.prototype.add.call(this, object);\r\n};\r\n\r\n/**\r\n * Removes a nested object from this type.\r\n * @param {ReflectionObject} object Nested object to remove\r\n * @returns {Type} `this`\r\n * @throws {TypeError} If arguments are invalid\r\n * @throws {Error} If `object` is not a member of this type\r\n */\r\nType.prototype.remove = function remove(object) {\r\n    if (object instanceof Field && object.extend === undefined) {\r\n        // See Type#add for the reason why extension fields are excluded here.\r\n\r\n        /* istanbul ignore if */\r\n        if (!this.fields || this.fields[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n\r\n        delete this.fields[object.name];\r\n        object.parent = null;\r\n        object.onRemove(this);\r\n        return clearCache(this);\r\n    }\r\n    if (object instanceof OneOf) {\r\n\r\n        /* istanbul ignore if */\r\n        if (!this.oneofs || this.oneofs[object.name] !== object)\r\n            throw Error(object + \" is not a member of \" + this);\r\n\r\n        delete this.oneofs[object.name];\r\n        object.parent = null;\r\n        object.onRemove(this);\r\n        return clearCache(this);\r\n    }\r\n    return Namespace.prototype.remove.call(this, object);\r\n};\r\n\r\n/**\r\n * Tests if the specified id is reserved.\r\n * @param {number} id Id to test\r\n * @returns {boolean} `true` if reserved, otherwise `false`\r\n */\r\nType.prototype.isReservedId = function isReservedId(id) {\r\n    return Namespace.isReservedId(this.reserved, id);\r\n};\r\n\r\n/**\r\n * Tests if the specified name is reserved.\r\n * @param {string} name Name to test\r\n * @returns {boolean} `true` if reserved, otherwise `false`\r\n */\r\nType.prototype.isReservedName = function isReservedName(name) {\r\n    return Namespace.isReservedName(this.reserved, name);\r\n};\r\n\r\n/**\r\n * Creates a new message of this type using the specified properties.\r\n * @param {Object.<string,*>} [properties] Properties to set\r\n * @returns {Message<{}>} Message instance\r\n */\r\nType.prototype.create = function create(properties) {\r\n    return new this.ctor(properties);\r\n};\r\n\r\n/**\r\n * Sets up {@link Type#encode|encode}, {@link Type#decode|decode} and {@link Type#verify|verify}.\r\n * @returns {Type} `this`\r\n */\r\nType.prototype.setup = function setup() {\r\n    // Sets up everything at once so that the prototype chain does not have to be re-evaluated\r\n    // multiple times (V8, soft-deopt prototype-check).\r\n\r\n    var fullName = this.fullName,\r\n        types    = [];\r\n    for (var i = 0; i < /* initializes */ this.fieldsArray.length; ++i)\r\n        types.push(this._fieldsArray[i].resolve().resolvedType);\r\n\r\n    // Replace setup methods with type-specific generated functions\r\n    this.encode = encoder(this)({\r\n        Writer : Writer,\r\n        types  : types,\r\n        util   : util\r\n    });\r\n    this.decode = decoder(this)({\r\n        Reader : Reader,\r\n        types  : types,\r\n        util   : util\r\n    });\r\n    this.verify = verifier(this)({\r\n        types : types,\r\n        util  : util\r\n    });\r\n    this.fromObject = converter.fromObject(this)({\r\n        types : types,\r\n        util  : util\r\n    });\r\n    this.toObject = converter.toObject(this)({\r\n        types : types,\r\n        util  : util\r\n    });\r\n\r\n    // Inject custom wrappers for common types\r\n    var wrapper = wrappers[fullName];\r\n    if (wrapper) {\r\n        var originalThis = Object.create(this);\r\n        // if (wrapper.fromObject) {\r\n            originalThis.fromObject = this.fromObject;\r\n            this.fromObject = wrapper.fromObject.bind(originalThis);\r\n        // }\r\n        // if (wrapper.toObject) {\r\n            originalThis.toObject = this.toObject;\r\n            this.toObject = wrapper.toObject.bind(originalThis);\r\n        // }\r\n    }\r\n\r\n    return this;\r\n};\r\n\r\n/**\r\n * Encodes a message of this type. Does not implicitly {@link Type#verify|verify} messages.\r\n * @param {Message<{}>|Object.<string,*>} message Message instance or plain object\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\r\nType.prototype.encode = function encode_setup(message, writer) {\r\n    return this.setup().encode(message, writer); // overrides this method\r\n};\r\n\r\n/**\r\n * Encodes a message of this type preceeded by its byte length as a varint. Does not implicitly {@link Type#verify|verify} messages.\r\n * @param {Message<{}>|Object.<string,*>} message Message instance or plain object\r\n * @param {Writer} [writer] Writer to encode to\r\n * @returns {Writer} writer\r\n */\r\nType.prototype.encodeDelimited = function encodeDelimited(message, writer) {\r\n    return this.encode(message, writer && writer.len ? writer.fork() : writer).ldelim();\r\n};\r\n\r\n/**\r\n * Decodes a message of this type.\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode from\r\n * @param {number} [length] Length of the message, if known beforehand\r\n * @returns {Message<{}>} Decoded message\r\n * @throws {Error} If the payload is not a reader or valid buffer\r\n * @throws {util.ProtocolError<{}>} If required fields are missing\r\n */\r\nType.prototype.decode = function decode_setup(reader, length) {\r\n    return this.setup().decode(reader, length); // overrides this method\r\n};\r\n\r\n/**\r\n * Decodes a message of this type preceeded by its byte length as a varint.\r\n * @param {Reader|Uint8Array} reader Reader or buffer to decode from\r\n * @returns {Message<{}>} Decoded message\r\n * @throws {Error} If the payload is not a reader or valid buffer\r\n * @throws {util.ProtocolError} If required fields are missing\r\n */\r\nType.prototype.decodeDelimited = function decodeDelimited(reader) {\r\n    if (!(reader instanceof Reader))\r\n        reader = Reader.create(reader);\r\n    return this.decode(reader, reader.uint32());\r\n};\r\n\r\n/**\r\n * Verifies that field values are valid and that required fields are present.\r\n * @param {Object.<string,*>} message Plain object to verify\r\n * @returns {null|string} `null` if valid, otherwise the reason why it is not\r\n */\r\nType.prototype.verify = function verify_setup(message) {\r\n    return this.setup().verify(message); // overrides this method\r\n};\r\n\r\n/**\r\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\r\n * @param {Object.<string,*>} object Plain object to convert\r\n * @returns {Message<{}>} Message instance\r\n */\r\nType.prototype.fromObject = function fromObject(object) {\r\n    return this.setup().fromObject(object);\r\n};\r\n\r\n/**\r\n * Conversion options as used by {@link Type#toObject} and {@link Message.toObject}.\r\n * @interface IConversionOptions\r\n * @property {Function} [longs] Long conversion type.\r\n * Valid values are `String` and `Number` (the global types).\r\n * Defaults to copy the present value, which is a possibly unsafe number without and a {@link Long} with a long library.\r\n * @property {Function} [enums] Enum value conversion type.\r\n * Only valid value is `String` (the global type).\r\n * Defaults to copy the present value, which is the numeric id.\r\n * @property {Function} [bytes] Bytes value conversion type.\r\n * Valid values are `Array` and (a base64 encoded) `String` (the global types).\r\n * Defaults to copy the present value, which usually is a Buffer under node and an Uint8Array in the browser.\r\n * @property {boolean} [defaults=false] Also sets default values on the resulting object\r\n * @property {boolean} [arrays=false] Sets empty arrays for missing repeated fields even if `defaults=false`\r\n * @property {boolean} [objects=false] Sets empty objects for missing map fields even if `defaults=false`\r\n * @property {boolean} [oneofs=false] Includes virtual oneof properties set to the present field's name, if any\r\n * @property {boolean} [json=false] Performs additional JSON compatibility conversions, i.e. NaN and Infinity to strings\r\n */\r\n\r\n/**\r\n * Creates a plain object from a message of this type. Also converts values to other types if specified.\r\n * @param {Message<{}>} message Message instance\r\n * @param {IConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} Plain object\r\n */\r\nType.prototype.toObject = function toObject(message, options) {\r\n    return this.setup().toObject(message, options);\r\n};\r\n\r\n/**\r\n * Decorator function as returned by {@link Type.d} (TypeScript).\r\n * @typedef TypeDecorator\r\n * @type {function}\r\n * @param {Constructor<T>} target Target constructor\r\n * @returns {undefined}\r\n * @template T extends Message<T>\r\n */\r\n\r\n/**\r\n * Type decorator (TypeScript).\r\n * @param {string} [typeName] Type name, defaults to the constructor's name\r\n * @returns {TypeDecorator<T>} Decorator function\r\n * @template T extends Message<T>\r\n */\r\nType.d = function decorateType(typeName) {\r\n    return function typeDecorator(target) {\r\n        util.decorateType(target, typeName);\r\n    };\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * Common type constants.\r\n * @namespace\r\n */\r\nvar types = exports;\r\n\r\nvar util = require(37);\r\n\r\nvar s = [\r\n    \"double\",   // 0\r\n    \"float\",    // 1\r\n    \"int32\",    // 2\r\n    \"uint32\",   // 3\r\n    \"sint32\",   // 4\r\n    \"fixed32\",  // 5\r\n    \"sfixed32\", // 6\r\n    \"int64\",    // 7\r\n    \"uint64\",   // 8\r\n    \"sint64\",   // 9\r\n    \"fixed64\",  // 10\r\n    \"sfixed64\", // 11\r\n    \"bool\",     // 12\r\n    \"string\",   // 13\r\n    \"bytes\"     // 14\r\n];\r\n\r\nfunction bake(values, offset) {\r\n    var i = 0, o = {};\r\n    offset |= 0;\r\n    while (i < values.length) o[s[i + offset]] = values[i++];\r\n    return o;\r\n}\r\n\r\n/**\r\n * Basic type wire types.\r\n * @type {Object.<string,number>}\r\n * @const\r\n * @property {number} double=1 Fixed64 wire type\r\n * @property {number} float=5 Fixed32 wire type\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n * @property {number} string=2 Ldelim wire type\r\n * @property {number} bytes=2 Ldelim wire type\r\n */\r\ntypes.basic = bake([\r\n    /* double   */ 1,\r\n    /* float    */ 5,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0,\r\n    /* string   */ 2,\r\n    /* bytes    */ 2\r\n]);\r\n\r\n/**\r\n * Basic type defaults.\r\n * @type {Object.<string,*>}\r\n * @const\r\n * @property {number} double=0 Double default\r\n * @property {number} float=0 Float default\r\n * @property {number} int32=0 Int32 default\r\n * @property {number} uint32=0 Uint32 default\r\n * @property {number} sint32=0 Sint32 default\r\n * @property {number} fixed32=0 Fixed32 default\r\n * @property {number} sfixed32=0 Sfixed32 default\r\n * @property {number} int64=0 Int64 default\r\n * @property {number} uint64=0 Uint64 default\r\n * @property {number} sint64=0 Sint32 default\r\n * @property {number} fixed64=0 Fixed64 default\r\n * @property {number} sfixed64=0 Sfixed64 default\r\n * @property {boolean} bool=false Bool default\r\n * @property {string} string=\"\" String default\r\n * @property {Array.<number>} bytes=Array(0) Bytes default\r\n * @property {null} message=null Message default\r\n */\r\ntypes.defaults = bake([\r\n    /* double   */ 0,\r\n    /* float    */ 0,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 0,\r\n    /* sfixed32 */ 0,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 0,\r\n    /* sfixed64 */ 0,\r\n    /* bool     */ false,\r\n    /* string   */ \"\",\r\n    /* bytes    */ util.emptyArray,\r\n    /* message  */ null\r\n]);\r\n\r\n/**\r\n * Basic long type wire types.\r\n * @type {Object.<string,number>}\r\n * @const\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n */\r\ntypes.long = bake([\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1\r\n], 7);\r\n\r\n/**\r\n * Allowed types for map keys with their associated wire type.\r\n * @type {Object.<string,number>}\r\n * @const\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n * @property {number} string=2 Ldelim wire type\r\n */\r\ntypes.mapKey = bake([\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0,\r\n    /* string   */ 2\r\n], 2);\r\n\r\n/**\r\n * Allowed types for packed repeated fields with their associated wire type.\r\n * @type {Object.<string,number>}\r\n * @const\r\n * @property {number} double=1 Fixed64 wire type\r\n * @property {number} float=5 Fixed32 wire type\r\n * @property {number} int32=0 Varint wire type\r\n * @property {number} uint32=0 Varint wire type\r\n * @property {number} sint32=0 Varint wire type\r\n * @property {number} fixed32=5 Fixed32 wire type\r\n * @property {number} sfixed32=5 Fixed32 wire type\r\n * @property {number} int64=0 Varint wire type\r\n * @property {number} uint64=0 Varint wire type\r\n * @property {number} sint64=0 Varint wire type\r\n * @property {number} fixed64=1 Fixed64 wire type\r\n * @property {number} sfixed64=1 Fixed64 wire type\r\n * @property {number} bool=0 Varint wire type\r\n */\r\ntypes.packed = bake([\r\n    /* double   */ 1,\r\n    /* float    */ 5,\r\n    /* int32    */ 0,\r\n    /* uint32   */ 0,\r\n    /* sint32   */ 0,\r\n    /* fixed32  */ 5,\r\n    /* sfixed32 */ 5,\r\n    /* int64    */ 0,\r\n    /* uint64   */ 0,\r\n    /* sint64   */ 0,\r\n    /* fixed64  */ 1,\r\n    /* sfixed64 */ 1,\r\n    /* bool     */ 0\r\n]);\r\n","\"use strict\";\r\n\r\n/**\r\n * Various utility functions.\r\n * @namespace\r\n */\r\nvar util = module.exports = require(39);\r\n\r\nvar roots = require(30);\r\n\r\nvar Type, // cyclic\r\n    Enum;\r\n\r\nutil.codegen = require(3);\r\nutil.fetch   = require(5);\r\nutil.path    = require(8);\r\n\r\n/**\r\n * Node's fs module if available.\r\n * @type {Object.<string,*>}\r\n */\r\nutil.fs = util.inquire(\"fs\");\r\n\r\n/**\r\n * Converts an object's values to an array.\r\n * @param {Object.<string,*>} object Object to convert\r\n * @returns {Array.<*>} Converted array\r\n */\r\nutil.toArray = function toArray(object) {\r\n    if (object) {\r\n        var keys  = Object.keys(object),\r\n            array = new Array(keys.length),\r\n            index = 0;\r\n        while (index < keys.length)\r\n            array[index] = object[keys[index++]];\r\n        return array;\r\n    }\r\n    return [];\r\n};\r\n\r\n/**\r\n * Converts an array of keys immediately followed by their respective value to an object, omitting undefined values.\r\n * @param {Array.<*>} array Array to convert\r\n * @returns {Object.<string,*>} Converted object\r\n */\r\nutil.toObject = function toObject(array) {\r\n    var object = {},\r\n        index  = 0;\r\n    while (index < array.length) {\r\n        var key = array[index++],\r\n            val = array[index++];\r\n        if (val !== undefined)\r\n            object[key] = val;\r\n    }\r\n    return object;\r\n};\r\n\r\nvar safePropBackslashRe = /\\\\/g,\r\n    safePropQuoteRe     = /\"/g;\r\n\r\n/**\r\n * Tests whether the specified name is a reserved word in JS.\r\n * @param {string} name Name to test\r\n * @returns {boolean} `true` if reserved, otherwise `false`\r\n */\r\nutil.isReserved = function isReserved(name) {\r\n    return /^(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)$/.test(name);\r\n};\r\n\r\n/**\r\n * Returns a safe property accessor for the specified property name.\r\n * @param {string} prop Property name\r\n * @returns {string} Safe accessor\r\n */\r\nutil.safeProp = function safeProp(prop) {\r\n    if (!/^[$\\w_]+$/.test(prop) || util.isReserved(prop))\r\n        return \"[\\\"\" + prop.replace(safePropBackslashRe, \"\\\\\\\\\").replace(safePropQuoteRe, \"\\\\\\\"\") + \"\\\"]\";\r\n    return \".\" + prop;\r\n};\r\n\r\n/**\r\n * Converts the first character of a string to upper case.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.ucFirst = function ucFirst(str) {\r\n    return str.charAt(0).toUpperCase() + str.substring(1);\r\n};\r\n\r\nvar camelCaseRe = /_([a-z])/g;\r\n\r\n/**\r\n * Converts a string to camel case.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.camelCase = function camelCase(str) {\r\n    return str.substring(0, 1)\r\n         + str.substring(1)\r\n               .replace(camelCaseRe, function($0, $1) { return $1.toUpperCase(); });\r\n};\r\n\r\n/**\r\n * Compares reflected fields by id.\r\n * @param {Field} a First field\r\n * @param {Field} b Second field\r\n * @returns {number} Comparison value\r\n */\r\nutil.compareFieldsById = function compareFieldsById(a, b) {\r\n    return a.id - b.id;\r\n};\r\n\r\n/**\r\n * Decorator helper for types (TypeScript).\r\n * @param {Constructor<T>} ctor Constructor function\r\n * @param {string} [typeName] Type name, defaults to the constructor's name\r\n * @returns {Type} Reflected type\r\n * @template T extends Message<T>\r\n * @property {Root} root Decorators root\r\n */\r\nutil.decorateType = function decorateType(ctor, typeName) {\r\n\r\n    /* istanbul ignore if */\r\n    if (ctor.$type) {\r\n        if (typeName && ctor.$type.name !== typeName) {\r\n            util.decorateRoot.remove(ctor.$type);\r\n            ctor.$type.name = typeName;\r\n            util.decorateRoot.add(ctor.$type);\r\n        }\r\n        return ctor.$type;\r\n    }\r\n\r\n    /* istanbul ignore next */\r\n    if (!Type)\r\n        Type = require(35);\r\n\r\n    var type = new Type(typeName || ctor.name);\r\n    util.decorateRoot.add(type);\r\n    type.ctor = ctor; // sets up .encode, .decode etc.\r\n    Object.defineProperty(ctor, \"$type\", { value: type, enumerable: false });\r\n    Object.defineProperty(ctor.prototype, \"$type\", { value: type, enumerable: false });\r\n    return type;\r\n};\r\n\r\nvar decorateEnumIndex = 0;\r\n\r\n/**\r\n * Decorator helper for enums (TypeScript).\r\n * @param {Object} object Enum object\r\n * @returns {Enum} Reflected enum\r\n */\r\nutil.decorateEnum = function decorateEnum(object) {\r\n\r\n    /* istanbul ignore if */\r\n    if (object.$type)\r\n        return object.$type;\r\n\r\n    /* istanbul ignore next */\r\n    if (!Enum)\r\n        Enum = require(15);\r\n\r\n    var enm = new Enum(\"Enum\" + decorateEnumIndex++, object);\r\n    util.decorateRoot.add(enm);\r\n    Object.defineProperty(object, \"$type\", { value: enm, enumerable: false });\r\n    return enm;\r\n};\r\n\r\n/**\r\n * Decorator root (TypeScript).\r\n * @name util.decorateRoot\r\n * @type {Root}\r\n * @readonly\r\n */\r\nObject.defineProperty(util, \"decorateRoot\", {\r\n    get: function() {\r\n        return roots[\"decorated\"] || (roots[\"decorated\"] = new (require(29))());\r\n    }\r\n});\r\n","\"use strict\";\r\nmodule.exports = LongBits;\r\n\r\nvar util = require(39);\r\n\r\n/**\r\n * Constructs new long bits.\r\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\r\n * @memberof util\r\n * @constructor\r\n * @param {number} lo Low 32 bits, unsigned\r\n * @param {number} hi High 32 bits, unsigned\r\n */\r\nfunction LongBits(lo, hi) {\r\n\r\n    // note that the casts below are theoretically unnecessary as of today, but older statically\r\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\r\n\r\n    /**\r\n     * Low bits.\r\n     * @type {number}\r\n     */\r\n    this.lo = lo >>> 0;\r\n\r\n    /**\r\n     * High bits.\r\n     * @type {number}\r\n     */\r\n    this.hi = hi >>> 0;\r\n}\r\n\r\n/**\r\n * Zero bits.\r\n * @memberof util.LongBits\r\n * @type {util.LongBits}\r\n */\r\nvar zero = LongBits.zero = new LongBits(0, 0);\r\n\r\nzero.toNumber = function() { return 0; };\r\nzero.zzEncode = zero.zzDecode = function() { return this; };\r\nzero.length = function() { return 1; };\r\n\r\n/**\r\n * Zero hash.\r\n * @memberof util.LongBits\r\n * @type {string}\r\n */\r\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\r\n\r\n/**\r\n * Constructs new long bits from the specified number.\r\n * @param {number} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.fromNumber = function fromNumber(value) {\r\n    if (value === 0)\r\n        return zero;\r\n    var sign = value < 0;\r\n    if (sign)\r\n        value = -value;\r\n    var lo = value >>> 0,\r\n        hi = (value - lo) / 4294967296 >>> 0;\r\n    if (sign) {\r\n        hi = ~hi >>> 0;\r\n        lo = ~lo >>> 0;\r\n        if (++lo > 4294967295) {\r\n            lo = 0;\r\n            if (++hi > 4294967295)\r\n                hi = 0;\r\n        }\r\n    }\r\n    return new LongBits(lo, hi);\r\n};\r\n\r\n/**\r\n * Constructs new long bits from a number, long or string.\r\n * @param {Long|number|string} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.from = function from(value) {\r\n    if (typeof value === \"number\")\r\n        return LongBits.fromNumber(value);\r\n    if (util.isString(value)) {\r\n        /* istanbul ignore else */\r\n        if (util.Long)\r\n            value = util.Long.fromString(value);\r\n        else\r\n            return LongBits.fromNumber(parseInt(value, 10));\r\n    }\r\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a possibly unsafe JavaScript number.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {number} Possibly unsafe number\r\n */\r\nLongBits.prototype.toNumber = function toNumber(unsigned) {\r\n    if (!unsigned && this.hi >>> 31) {\r\n        var lo = ~this.lo + 1 >>> 0,\r\n            hi = ~this.hi     >>> 0;\r\n        if (!lo)\r\n            hi = hi + 1 >>> 0;\r\n        return -(lo + hi * 4294967296);\r\n    }\r\n    return this.lo + this.hi * 4294967296;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a long.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long} Long\r\n */\r\nLongBits.prototype.toLong = function toLong(unsigned) {\r\n    return util.Long\r\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\r\n        /* istanbul ignore next */\r\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\r\n};\r\n\r\nvar charCodeAt = String.prototype.charCodeAt;\r\n\r\n/**\r\n * Constructs new long bits from the specified 8 characters long hash.\r\n * @param {string} hash Hash\r\n * @returns {util.LongBits} Bits\r\n */\r\nLongBits.fromHash = function fromHash(hash) {\r\n    if (hash === zeroHash)\r\n        return zero;\r\n    return new LongBits(\r\n        ( charCodeAt.call(hash, 0)\r\n        | charCodeAt.call(hash, 1) << 8\r\n        | charCodeAt.call(hash, 2) << 16\r\n        | charCodeAt.call(hash, 3) << 24) >>> 0\r\n    ,\r\n        ( charCodeAt.call(hash, 4)\r\n        | charCodeAt.call(hash, 5) << 8\r\n        | charCodeAt.call(hash, 6) << 16\r\n        | charCodeAt.call(hash, 7) << 24) >>> 0\r\n    );\r\n};\r\n\r\n/**\r\n * Converts this long bits to a 8 characters long hash.\r\n * @returns {string} Hash\r\n */\r\nLongBits.prototype.toHash = function toHash() {\r\n    return String.fromCharCode(\r\n        this.lo        & 255,\r\n        this.lo >>> 8  & 255,\r\n        this.lo >>> 16 & 255,\r\n        this.lo >>> 24      ,\r\n        this.hi        & 255,\r\n        this.hi >>> 8  & 255,\r\n        this.hi >>> 16 & 255,\r\n        this.hi >>> 24\r\n    );\r\n};\r\n\r\n/**\r\n * Zig-zag encodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBits.prototype.zzEncode = function zzEncode() {\r\n    var mask =   this.hi >> 31;\r\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\r\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Zig-zag decodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBits.prototype.zzDecode = function zzDecode() {\r\n    var mask = -(this.lo & 1);\r\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\r\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Calculates the length of this longbits when encoded as a varint.\r\n * @returns {number} Length\r\n */\r\nLongBits.prototype.length = function length() {\r\n    var part0 =  this.lo,\r\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\r\n        part2 =  this.hi >>> 24;\r\n    return part2 === 0\r\n         ? part1 === 0\r\n           ? part0 < 16384\r\n             ? part0 < 128 ? 1 : 2\r\n             : part0 < 2097152 ? 3 : 4\r\n           : part1 < 16384\r\n             ? part1 < 128 ? 5 : 6\r\n             : part1 < 2097152 ? 7 : 8\r\n         : part2 < 128 ? 9 : 10;\r\n};\r\n","\"use strict\";\r\nvar util = exports;\r\n\r\n// used to return a Promise where callback is omitted\r\nutil.asPromise = require(1);\r\n\r\n// converts to / from base64 encoded strings\r\nutil.base64 = require(2);\r\n\r\n// base class of rpc.Service\r\nutil.EventEmitter = require(4);\r\n\r\n// float handling accross browsers\r\nutil.float = require(6);\r\n\r\n// requires modules optionally and hides the call from bundlers\r\nutil.inquire = require(7);\r\n\r\n// converts to / from utf8 encoded strings\r\nutil.utf8 = require(10);\r\n\r\n// provides a node-like buffer pool in the browser\r\nutil.pool = require(9);\r\n\r\n// utility to work with the low and high bits of a 64 bit value\r\nutil.LongBits = require(38);\r\n\r\n// global object reference\r\nutil.global = typeof window !== \"undefined\" && window\r\n           || typeof global !== \"undefined\" && global\r\n           || typeof self   !== \"undefined\" && self\r\n           || this; // eslint-disable-line no-invalid-this\r\n\r\n/**\r\n * An immuable empty array.\r\n * @memberof util\r\n * @type {Array.<*>}\r\n * @const\r\n */\r\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\r\n\r\n/**\r\n * An immutable empty object.\r\n * @type {Object}\r\n * @const\r\n */\r\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\r\n\r\n/**\r\n * Whether running within node or not.\r\n * @memberof util\r\n * @type {boolean}\r\n * @const\r\n */\r\nutil.isNode = Boolean(util.global.process && util.global.process.versions && util.global.process.versions.node);\r\n\r\n/**\r\n * Tests if the specified value is an integer.\r\n * @function\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is an integer\r\n */\r\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\r\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a string.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a string\r\n */\r\nutil.isString = function isString(value) {\r\n    return typeof value === \"string\" || value instanceof String;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a non-null object.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a non-null object\r\n */\r\nutil.isObject = function isObject(value) {\r\n    return value && typeof value === \"object\";\r\n};\r\n\r\n/**\r\n * Checks if a property on a message is considered to be present.\r\n * This is an alias of {@link util.isSet}.\r\n * @function\r\n * @param {Object} obj Plain object or message instance\r\n * @param {string} prop Property name\r\n * @returns {boolean} `true` if considered to be present, otherwise `false`\r\n */\r\nutil.isset =\r\n\r\n/**\r\n * Checks if a property on a message is considered to be present.\r\n * @param {Object} obj Plain object or message instance\r\n * @param {string} prop Property name\r\n * @returns {boolean} `true` if considered to be present, otherwise `false`\r\n */\r\nutil.isSet = function isSet(obj, prop) {\r\n    var value = obj[prop];\r\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\r\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\r\n    return false;\r\n};\r\n\r\n/**\r\n * Any compatible Buffer instance.\r\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\r\n * @interface Buffer\r\n * @extends Uint8Array\r\n */\r\n\r\n/**\r\n * Node's Buffer class if available.\r\n * @type {Constructor<Buffer>}\r\n */\r\nutil.Buffer = (function() {\r\n    try {\r\n        var Buffer = util.inquire(\"buffer\").Buffer;\r\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\r\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\r\n    } catch (e) {\r\n        /* istanbul ignore next */\r\n        return null;\r\n    }\r\n})();\r\n\r\n// Internal alias of or polyfull for Buffer.from.\r\nutil._Buffer_from = null;\r\n\r\n// Internal alias of or polyfill for Buffer.allocUnsafe.\r\nutil._Buffer_allocUnsafe = null;\r\n\r\n/**\r\n * Creates a new buffer of whatever type supported by the environment.\r\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\r\n * @returns {Uint8Array|Buffer} Buffer\r\n */\r\nutil.newBuffer = function newBuffer(sizeOrArray) {\r\n    /* istanbul ignore next */\r\n    return typeof sizeOrArray === \"number\"\r\n        ? util.Buffer\r\n            ? util._Buffer_allocUnsafe(sizeOrArray)\r\n            : new util.Array(sizeOrArray)\r\n        : util.Buffer\r\n            ? util._Buffer_from(sizeOrArray)\r\n            : typeof Uint8Array === \"undefined\"\r\n                ? sizeOrArray\r\n                : new Uint8Array(sizeOrArray);\r\n};\r\n\r\n/**\r\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\r\n * @type {Constructor<Uint8Array>}\r\n */\r\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\r\n\r\n/**\r\n * Any compatible Long instance.\r\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\r\n * @interface Long\r\n * @property {number} low Low bits\r\n * @property {number} high High bits\r\n * @property {boolean} unsigned Whether unsigned or not\r\n */\r\n\r\n/**\r\n * Long.js's Long class if available.\r\n * @type {Constructor<Long>}\r\n */\r\nutil.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long\r\n         || /* istanbul ignore next */ util.global.Long\r\n         || util.inquire(\"long\");\r\n\r\n/**\r\n * Regular expression used to verify 2 bit (`bool`) map keys.\r\n * @type {RegExp}\r\n * @const\r\n */\r\nutil.key2Re = /^true|false|0|1$/;\r\n\r\n/**\r\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\r\n * @type {RegExp}\r\n * @const\r\n */\r\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\r\n\r\n/**\r\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\r\n * @type {RegExp}\r\n * @const\r\n */\r\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\r\n\r\n/**\r\n * Converts a number or long to an 8 characters long hash string.\r\n * @param {Long|number} value Value to convert\r\n * @returns {string} Hash\r\n */\r\nutil.longToHash = function longToHash(value) {\r\n    return value\r\n        ? util.LongBits.from(value).toHash()\r\n        : util.LongBits.zeroHash;\r\n};\r\n\r\n/**\r\n * Converts an 8 characters long hash string to a long or number.\r\n * @param {string} hash Hash\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long|number} Original value\r\n */\r\nutil.longFromHash = function longFromHash(hash, unsigned) {\r\n    var bits = util.LongBits.fromHash(hash);\r\n    if (util.Long)\r\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\r\n    return bits.toNumber(Boolean(unsigned));\r\n};\r\n\r\n/**\r\n * Merges the properties of the source object into the destination object.\r\n * @memberof util\r\n * @param {Object.<string,*>} dst Destination object\r\n * @param {Object.<string,*>} src Source object\r\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\r\n * @returns {Object.<string,*>} Destination object\r\n */\r\nfunction merge(dst, src, ifNotSet) { // used by converters\r\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\r\n        if (dst[keys[i]] === undefined || !ifNotSet)\r\n            dst[keys[i]] = src[keys[i]];\r\n    return dst;\r\n}\r\n\r\nutil.merge = merge;\r\n\r\n/**\r\n * Converts the first character of a string to lower case.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.lcFirst = function lcFirst(str) {\r\n    return str.charAt(0).toLowerCase() + str.substring(1);\r\n};\r\n\r\n/**\r\n * Creates a custom error constructor.\r\n * @memberof util\r\n * @param {string} name Error name\r\n * @returns {Constructor<Error>} Custom error constructor\r\n */\r\nfunction newError(name) {\r\n\r\n    function CustomError(message, properties) {\r\n\r\n        if (!(this instanceof CustomError))\r\n            return new CustomError(message, properties);\r\n\r\n        // Error.call(this, message);\r\n        // ^ just returns a new error instance because the ctor can be called as a function\r\n\r\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\r\n\r\n        /* istanbul ignore next */\r\n        if (Error.captureStackTrace) // node\r\n            Error.captureStackTrace(this, CustomError);\r\n        else\r\n            Object.defineProperty(this, \"stack\", { value: (new Error()).stack || \"\" });\r\n\r\n        if (properties)\r\n            merge(this, properties);\r\n    }\r\n\r\n    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;\r\n\r\n    Object.defineProperty(CustomError.prototype, \"name\", { get: function() { return name; } });\r\n\r\n    CustomError.prototype.toString = function toString() {\r\n        return this.name + \": \" + this.message;\r\n    };\r\n\r\n    return CustomError;\r\n}\r\n\r\nutil.newError = newError;\r\n\r\n/**\r\n * Constructs a new protocol error.\r\n * @classdesc Error subclass indicating a protocol specifc error.\r\n * @memberof util\r\n * @extends Error\r\n * @template T extends Message<T>\r\n * @constructor\r\n * @param {string} message Error message\r\n * @param {Object.<string,*>} [properties] Additional properties\r\n * @example\r\n * try {\r\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\r\n * } catch (e) {\r\n *     if (e instanceof ProtocolError && e.instance)\r\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\r\n * }\r\n */\r\nutil.ProtocolError = newError(\"ProtocolError\");\r\n\r\n/**\r\n * So far decoded message instance.\r\n * @name util.ProtocolError#instance\r\n * @type {Message<T>}\r\n */\r\n\r\n/**\r\n * A OneOf getter as returned by {@link util.oneOfGetter}.\r\n * @typedef OneOfGetter\r\n * @type {function}\r\n * @returns {string|undefined} Set field name, if any\r\n */\r\n\r\n/**\r\n * Builds a getter for a oneof's present field name.\r\n * @param {string[]} fieldNames Field names\r\n * @returns {OneOfGetter} Unbound getter\r\n */\r\nutil.oneOfGetter = function getOneOf(fieldNames) {\r\n    var fieldMap = {};\r\n    for (var i = 0; i < fieldNames.length; ++i)\r\n        fieldMap[fieldNames[i]] = 1;\r\n\r\n    /**\r\n     * @returns {string|undefined} Set field name, if any\r\n     * @this Object\r\n     * @ignore\r\n     */\r\n    return function() { // eslint-disable-line consistent-return\r\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\r\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\r\n                return keys[i];\r\n    };\r\n};\r\n\r\n/**\r\n * A OneOf setter as returned by {@link util.oneOfSetter}.\r\n * @typedef OneOfSetter\r\n * @type {function}\r\n * @param {string|undefined} value Field name\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Builds a setter for a oneof's present field name.\r\n * @param {string[]} fieldNames Field names\r\n * @returns {OneOfSetter} Unbound setter\r\n */\r\nutil.oneOfSetter = function setOneOf(fieldNames) {\r\n\r\n    /**\r\n     * @param {string} name Field name\r\n     * @returns {undefined}\r\n     * @this Object\r\n     * @ignore\r\n     */\r\n    return function(name) {\r\n        for (var i = 0; i < fieldNames.length; ++i)\r\n            if (fieldNames[i] !== name)\r\n                delete this[fieldNames[i]];\r\n    };\r\n};\r\n\r\n/**\r\n * Default conversion options used for {@link Message#toJSON} implementations.\r\n *\r\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\r\n *\r\n * - Longs become strings\r\n * - Enums become string keys\r\n * - Bytes become base64 encoded strings\r\n * - (Sub-)Messages become plain objects\r\n * - Maps become plain objects with all string keys\r\n * - Repeated fields become arrays\r\n * - NaN and Infinity for float and double fields become strings\r\n *\r\n * @type {IConversionOptions}\r\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\r\n */\r\nutil.toJSONOptions = {\r\n    longs: String,\r\n    enums: String,\r\n    bytes: String,\r\n    json: true\r\n};\r\n\r\n// Sets up buffer utility according to the environment (called in index-minimal)\r\nutil._configure = function() {\r\n    var Buffer = util.Buffer;\r\n    /* istanbul ignore if */\r\n    if (!Buffer) {\r\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\r\n        return;\r\n    }\r\n    // because node 4.x buffers are incompatible & immutable\r\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\r\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\r\n        /* istanbul ignore next */\r\n        function Buffer_from(value, encoding) {\r\n            return new Buffer(value, encoding);\r\n        };\r\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\r\n        /* istanbul ignore next */\r\n        function Buffer_allocUnsafe(size) {\r\n            return new Buffer(size);\r\n        };\r\n};\r\n","\"use strict\";\r\nmodule.exports = verifier;\r\n\r\nvar Enum      = require(15),\r\n    util      = require(37);\r\n\r\nfunction invalid(field, expected) {\r\n    return field.name + \": \" + expected + (field.repeated && expected !== \"array\" ? \"[]\" : field.map && expected !== \"object\" ? \"{k:\"+field.keyType+\"}\" : \"\") + \" expected\";\r\n}\r\n\r\n/**\r\n * Generates a partial value verifier.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {number} fieldIndex Field index\r\n * @param {string} ref Variable reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genVerifyValue(gen, field, fieldIndex, ref) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    if (field.resolvedType) {\r\n        if (field.resolvedType instanceof Enum) { gen\r\n            (\"switch(%s){\", ref)\r\n                (\"default:\")\r\n                    (\"return%j\", invalid(field, \"enum value\"));\r\n            for (var keys = Object.keys(field.resolvedType.values), j = 0; j < keys.length; ++j) gen\r\n                (\"case %i:\", field.resolvedType.values[keys[j]]);\r\n            gen\r\n                    (\"break\")\r\n            (\"}\");\r\n        } else {\r\n            gen\r\n            (\"{\")\r\n                (\"var e=types[%i].verify(%s);\", fieldIndex, ref)\r\n                (\"if(e)\")\r\n                    (\"return%j+e\", field.name + \".\")\r\n            (\"}\");\r\n        }\r\n    } else {\r\n        switch (field.type) {\r\n            case \"int32\":\r\n            case \"uint32\":\r\n            case \"sint32\":\r\n            case \"fixed32\":\r\n            case \"sfixed32\": gen\r\n                (\"if(!util.isInteger(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"integer\"));\r\n                break;\r\n            case \"int64\":\r\n            case \"uint64\":\r\n            case \"sint64\":\r\n            case \"fixed64\":\r\n            case \"sfixed64\": gen\r\n                (\"if(!util.isInteger(%s)&&!(%s&&util.isInteger(%s.low)&&util.isInteger(%s.high)))\", ref, ref, ref, ref)\r\n                    (\"return%j\", invalid(field, \"integer|Long\"));\r\n                break;\r\n            case \"float\":\r\n            case \"double\": gen\r\n                (\"if(typeof %s!==\\\"number\\\")\", ref)\r\n                    (\"return%j\", invalid(field, \"number\"));\r\n                break;\r\n            case \"bool\": gen\r\n                (\"if(typeof %s!==\\\"boolean\\\")\", ref)\r\n                    (\"return%j\", invalid(field, \"boolean\"));\r\n                break;\r\n            case \"string\": gen\r\n                (\"if(!util.isString(%s))\", ref)\r\n                    (\"return%j\", invalid(field, \"string\"));\r\n                break;\r\n            case \"bytes\": gen\r\n                (\"if(!(%s&&typeof %s.length===\\\"number\\\"||util.isString(%s)))\", ref, ref, ref)\r\n                    (\"return%j\", invalid(field, \"buffer\"));\r\n                break;\r\n        }\r\n    }\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n\r\n/**\r\n * Generates a partial key verifier.\r\n * @param {Codegen} gen Codegen instance\r\n * @param {Field} field Reflected field\r\n * @param {string} ref Variable reference\r\n * @returns {Codegen} Codegen instance\r\n * @ignore\r\n */\r\nfunction genVerifyKey(gen, field, ref) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n    switch (field.keyType) {\r\n        case \"int32\":\r\n        case \"uint32\":\r\n        case \"sint32\":\r\n        case \"fixed32\":\r\n        case \"sfixed32\": gen\r\n            (\"if(!util.key32Re.test(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"integer key\"));\r\n            break;\r\n        case \"int64\":\r\n        case \"uint64\":\r\n        case \"sint64\":\r\n        case \"fixed64\":\r\n        case \"sfixed64\": gen\r\n            (\"if(!util.key64Re.test(%s))\", ref) // see comment above: x is ok, d is not\r\n                (\"return%j\", invalid(field, \"integer|Long key\"));\r\n            break;\r\n        case \"bool\": gen\r\n            (\"if(!util.key2Re.test(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"boolean key\"));\r\n            break;\r\n    }\r\n    return gen;\r\n    /* eslint-enable no-unexpected-multiline */\r\n}\r\n\r\n/**\r\n * Generates a verifier specific to the specified message type.\r\n * @param {Type} mtype Message type\r\n * @returns {Codegen} Codegen instance\r\n */\r\nfunction verifier(mtype) {\r\n    /* eslint-disable no-unexpected-multiline */\r\n\r\n    var gen = util.codegen([\"m\"], mtype.name + \"$verify\")\r\n    (\"if(typeof m!==\\\"object\\\"||m===null)\")\r\n        (\"return%j\", \"object expected\");\r\n    var oneofs = mtype.oneofsArray,\r\n        seenFirstField = {};\r\n    if (oneofs.length) gen\r\n    (\"var p={}\");\r\n\r\n    for (var i = 0; i < /* initializes */ mtype.fieldsArray.length; ++i) {\r\n        var field = mtype._fieldsArray[i].resolve(),\r\n            ref   = \"m\" + util.safeProp(field.name);\r\n\r\n        if (field.optional) gen\r\n        (\"if(%s!=null&&m.hasOwnProperty(%j)){\", ref, field.name); // !== undefined && !== null\r\n\r\n        // map fields\r\n        if (field.map) { gen\r\n            (\"if(!util.isObject(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"object\"))\r\n            (\"var k=Object.keys(%s)\", ref)\r\n            (\"for(var i=0;i<k.length;++i){\");\r\n                genVerifyKey(gen, field, \"k[i]\");\r\n                genVerifyValue(gen, field, i, ref + \"[k[i]]\")\r\n            (\"}\");\r\n\r\n        // repeated fields\r\n        } else if (field.repeated) { gen\r\n            (\"if(!Array.isArray(%s))\", ref)\r\n                (\"return%j\", invalid(field, \"array\"))\r\n            (\"for(var i=0;i<%s.length;++i){\", ref);\r\n                genVerifyValue(gen, field, i, ref + \"[i]\")\r\n            (\"}\");\r\n\r\n        // required or present fields\r\n        } else {\r\n            if (field.partOf) {\r\n                var oneofProp = util.safeProp(field.partOf.name);\r\n                if (seenFirstField[field.partOf.name] === 1) gen\r\n            (\"if(p%s===1)\", oneofProp)\r\n                (\"return%j\", field.partOf.name + \": multiple values\");\r\n                seenFirstField[field.partOf.name] = 1;\r\n                gen\r\n            (\"p%s=1\", oneofProp);\r\n            }\r\n            genVerifyValue(gen, field, i, ref);\r\n        }\r\n        if (field.optional) gen\r\n        (\"}\");\r\n    }\r\n    return gen\r\n    (\"return null\");\r\n    /* eslint-enable no-unexpected-multiline */\r\n}","\"use strict\";\r\n\r\n/**\r\n * Wrappers for common types.\r\n * @type {Object.<string,IWrapper>}\r\n * @const\r\n */\r\nvar wrappers = exports;\r\n\r\nvar Message = require(21);\r\n\r\n/**\r\n * From object converter part of an {@link IWrapper}.\r\n * @typedef WrapperFromObjectConverter\r\n * @type {function}\r\n * @param {Object.<string,*>} object Plain object\r\n * @returns {Message<{}>} Message instance\r\n * @this Type\r\n */\r\n\r\n/**\r\n * To object converter part of an {@link IWrapper}.\r\n * @typedef WrapperToObjectConverter\r\n * @type {function}\r\n * @param {Message<{}>} message Message instance\r\n * @param {IConversionOptions} [options] Conversion options\r\n * @returns {Object.<string,*>} Plain object\r\n * @this Type\r\n */\r\n\r\n/**\r\n * Common type wrapper part of {@link wrappers}.\r\n * @interface IWrapper\r\n * @property {WrapperFromObjectConverter} [fromObject] From object converter\r\n * @property {WrapperToObjectConverter} [toObject] To object converter\r\n */\r\n\r\n// Custom wrapper for Any\r\nwrappers[\".google.protobuf.Any\"] = {\r\n\r\n    fromObject: function(object) {\r\n\r\n        // unwrap value type if mapped\r\n        if (object && object[\"@type\"]) {\r\n            var type = this.lookup(object[\"@type\"]);\r\n            /* istanbul ignore else */\r\n            if (type) {\r\n                // type_url does not accept leading \".\"\r\n                var type_url = object[\"@type\"].charAt(0) === \".\" ?\r\n                    object[\"@type\"].substr(1) : object[\"@type\"];\r\n                // type_url prefix is optional, but path seperator is required\r\n                return this.create({\r\n                    type_url: \"/\" + type_url,\r\n                    value: type.encode(type.fromObject(object)).finish()\r\n                });\r\n            }\r\n        }\r\n\r\n        return this.fromObject(object);\r\n    },\r\n\r\n    toObject: function(message, options) {\r\n\r\n        // decode value if requested and unmapped\r\n        if (options && options.json && message.type_url && message.value) {\r\n            // Only use fully qualified type name after the last '/'\r\n            var name = message.type_url.substring(message.type_url.lastIndexOf(\"/\") + 1);\r\n            var type = this.lookup(name);\r\n            /* istanbul ignore else */\r\n            if (type)\r\n                message = type.decode(message.value);\r\n        }\r\n\r\n        // wrap value if unmapped\r\n        if (!(message instanceof this.ctor) && message instanceof Message) {\r\n            var object = message.$type.toObject(message, options);\r\n            object[\"@type\"] = message.$type.fullName;\r\n            return object;\r\n        }\r\n\r\n        return this.toObject(message, options);\r\n    }\r\n};\r\n","\"use strict\";\r\nmodule.exports = Writer;\r\n\r\nvar util      = require(39);\r\n\r\nvar BufferWriter; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    base64    = util.base64,\r\n    utf8      = util.utf8;\r\n\r\n/**\r\n * Constructs a new writer operation instance.\r\n * @classdesc Scheduled writer operation.\r\n * @constructor\r\n * @param {function(*, Uint8Array, number)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {*} val Value to write\r\n * @ignore\r\n */\r\nfunction Op(fn, len, val) {\r\n\r\n    /**\r\n     * Function to call.\r\n     * @type {function(Uint8Array, number, *)}\r\n     */\r\n    this.fn = fn;\r\n\r\n    /**\r\n     * Value byte length.\r\n     * @type {number}\r\n     */\r\n    this.len = len;\r\n\r\n    /**\r\n     * Next operation.\r\n     * @type {Writer.Op|undefined}\r\n     */\r\n    this.next = undefined;\r\n\r\n    /**\r\n     * Value to write.\r\n     * @type {*}\r\n     */\r\n    this.val = val; // type varies\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction noop() {} // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Constructs a new writer state instance.\r\n * @classdesc Copied writer state.\r\n * @memberof Writer\r\n * @constructor\r\n * @param {Writer} writer Writer to copy state from\r\n * @ignore\r\n */\r\nfunction State(writer) {\r\n\r\n    /**\r\n     * Current head.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.head = writer.head;\r\n\r\n    /**\r\n     * Current tail.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.tail = writer.tail;\r\n\r\n    /**\r\n     * Current buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = writer.len;\r\n\r\n    /**\r\n     * Next state.\r\n     * @type {State|null}\r\n     */\r\n    this.next = writer.states;\r\n}\r\n\r\n/**\r\n * Constructs a new writer instance.\r\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n */\r\nfunction Writer() {\r\n\r\n    /**\r\n     * Current length.\r\n     * @type {number}\r\n     */\r\n    this.len = 0;\r\n\r\n    /**\r\n     * Operations head.\r\n     * @type {Object}\r\n     */\r\n    this.head = new Op(noop, 0, 0);\r\n\r\n    /**\r\n     * Operations tail\r\n     * @type {Object}\r\n     */\r\n    this.tail = this.head;\r\n\r\n    /**\r\n     * Linked forked states.\r\n     * @type {Object|null}\r\n     */\r\n    this.states = null;\r\n\r\n    // When a value is written, the writer calculates its byte length and puts it into a linked\r\n    // list of operations to perform when finish() is called. This both allows us to allocate\r\n    // buffers of the exact required size and reduces the amount of work we have to do compared\r\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\r\n    // part is just a linked list walk calling operations with already prepared values.\r\n}\r\n\r\n/**\r\n * Creates a new writer.\r\n * @function\r\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\r\n */\r\nWriter.create = util.Buffer\r\n    ? function create_buffer_setup() {\r\n        return (Writer.create = function create_buffer() {\r\n            return new BufferWriter();\r\n        })();\r\n    }\r\n    /* istanbul ignore next */\r\n    : function create_array() {\r\n        return new Writer();\r\n    };\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nWriter.alloc = function alloc(size) {\r\n    return new util.Array(size);\r\n};\r\n\r\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\r\n/* istanbul ignore else */\r\nif (util.Array !== Array)\r\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\r\n\r\n/**\r\n * Pushes a new operation to the queue.\r\n * @param {function(Uint8Array, number, *)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @returns {Writer} `this`\r\n * @private\r\n */\r\nWriter.prototype._push = function push(fn, len, val) {\r\n    this.tail = this.tail.next = new Op(fn, len, val);\r\n    this.len += len;\r\n    return this;\r\n};\r\n\r\nfunction writeByte(val, buf, pos) {\r\n    buf[pos] = val & 255;\r\n}\r\n\r\nfunction writeVarint32(val, buf, pos) {\r\n    while (val > 127) {\r\n        buf[pos++] = val & 127 | 128;\r\n        val >>>= 7;\r\n    }\r\n    buf[pos] = val;\r\n}\r\n\r\n/**\r\n * Constructs a new varint writer operation instance.\r\n * @classdesc Scheduled varint writer operation.\r\n * @extends Op\r\n * @constructor\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @ignore\r\n */\r\nfunction VarintOp(len, val) {\r\n    this.len = len;\r\n    this.next = undefined;\r\n    this.val = val;\r\n}\r\n\r\nVarintOp.prototype = Object.create(Op.prototype);\r\nVarintOp.prototype.fn = writeVarint32;\r\n\r\n/**\r\n * Writes an unsigned 32 bit value as a varint.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.uint32 = function write_uint32(value) {\r\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\r\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\r\n    this.len += (this.tail = this.tail.next = new VarintOp(\r\n        (value = value >>> 0)\r\n                < 128       ? 1\r\n        : value < 16384     ? 2\r\n        : value < 2097152   ? 3\r\n        : value < 268435456 ? 4\r\n        :                     5,\r\n    value)).len;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Writes a signed 32 bit value as a varint.\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.int32 = function write_int32(value) {\r\n    return value < 0\r\n        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\r\n        : this.uint32(value);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as a varint, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.sint32 = function write_sint32(value) {\r\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\r\n};\r\n\r\nfunction writeVarint64(val, buf, pos) {\r\n    while (val.hi) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\r\n        val.hi >>>= 7;\r\n    }\r\n    while (val.lo > 127) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = val.lo >>> 7;\r\n    }\r\n    buf[pos++] = val.lo;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 64 bit value as a varint.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.uint64 = function write_uint64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this._push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint.\r\n * @function\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.int64 = Writer.prototype.uint64;\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.sint64 = function write_sint64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this._push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a boolish value as a varint.\r\n * @param {boolean} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.bool = function write_bool(value) {\r\n    return this._push(writeByte, 1, value ? 1 : 0);\r\n};\r\n\r\nfunction writeFixed32(val, buf, pos) {\r\n    buf[pos    ] =  val         & 255;\r\n    buf[pos + 1] =  val >>> 8   & 255;\r\n    buf[pos + 2] =  val >>> 16  & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 32 bit value as fixed 32 bits.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.fixed32 = function write_fixed32(value) {\r\n    return this._push(writeFixed32, 4, value >>> 0);\r\n};\r\n\r\n/**\r\n * Writes a signed 32 bit value as fixed 32 bits.\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\r\n\r\n/**\r\n * Writes an unsigned 64 bit value as fixed 64 bits.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.fixed64 = function write_fixed64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\r\n};\r\n\r\n/**\r\n * Writes a signed 64 bit value as fixed 64 bits.\r\n * @function\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\r\n\r\n/**\r\n * Writes a float (32 bit).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.float = function write_float(value) {\r\n    return this._push(util.float.writeFloatLE, 4, value);\r\n};\r\n\r\n/**\r\n * Writes a double (64 bit float).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.double = function write_double(value) {\r\n    return this._push(util.float.writeDoubleLE, 8, value);\r\n};\r\n\r\nvar writeBytes = util.Array.prototype.set\r\n    ? function writeBytes_set(val, buf, pos) {\r\n        buf.set(val, pos); // also works for plain array values\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytes_for(val, buf, pos) {\r\n        for (var i = 0; i < val.length; ++i)\r\n            buf[pos + i] = val[i];\r\n    };\r\n\r\n/**\r\n * Writes a sequence of bytes.\r\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.bytes = function write_bytes(value) {\r\n    var len = value.length >>> 0;\r\n    if (!len)\r\n        return this._push(writeByte, 1, 0);\r\n    if (util.isString(value)) {\r\n        var buf = Writer.alloc(len = base64.length(value));\r\n        base64.decode(value, buf, 0);\r\n        value = buf;\r\n    }\r\n    return this.uint32(len)._push(writeBytes, len, value);\r\n};\r\n\r\n/**\r\n * Writes a string.\r\n * @param {string} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.string = function write_string(value) {\r\n    var len = utf8.length(value);\r\n    return len\r\n        ? this.uint32(len)._push(utf8.write, len, value)\r\n        : this._push(writeByte, 1, 0);\r\n};\r\n\r\n/**\r\n * Forks this writer's state by pushing it to a stack.\r\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.fork = function fork() {\r\n    this.states = new State(this);\r\n    this.head = this.tail = new Op(noop, 0, 0);\r\n    this.len = 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets this instance to the last state.\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.reset = function reset() {\r\n    if (this.states) {\r\n        this.head   = this.states.head;\r\n        this.tail   = this.states.tail;\r\n        this.len    = this.states.len;\r\n        this.states = this.states.next;\r\n    } else {\r\n        this.head = this.tail = new Op(noop, 0, 0);\r\n        this.len  = 0;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.ldelim = function ldelim() {\r\n    var head = this.head,\r\n        tail = this.tail,\r\n        len  = this.len;\r\n    this.reset().uint32(len);\r\n    if (len) {\r\n        this.tail.next = head.next; // skip noop\r\n        this.tail = tail;\r\n        this.len += len;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Finishes the write operation.\r\n * @returns {Uint8Array} Finished buffer\r\n */\r\nWriter.prototype.finish = function finish() {\r\n    var head = this.head.next, // skip noop\r\n        buf  = this.constructor.alloc(this.len),\r\n        pos  = 0;\r\n    while (head) {\r\n        head.fn(head.val, buf, pos);\r\n        pos += head.len;\r\n        head = head.next;\r\n    }\r\n    // this.head = this.tail = null;\r\n    return buf;\r\n};\r\n\r\nWriter._configure = function(BufferWriter_) {\r\n    BufferWriter = BufferWriter_;\r\n};\r\n","\"use strict\";\r\nmodule.exports = BufferWriter;\r\n\r\n// extends Writer\r\nvar Writer = require(42);\r\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\r\n\r\nvar util = require(39);\r\n\r\nvar Buffer = util.Buffer;\r\n\r\n/**\r\n * Constructs a new buffer writer instance.\r\n * @classdesc Wire format writer using node buffers.\r\n * @extends Writer\r\n * @constructor\r\n */\r\nfunction BufferWriter() {\r\n    Writer.call(this);\r\n}\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Buffer} Buffer\r\n */\r\nBufferWriter.alloc = function alloc_buffer(size) {\r\n    return (BufferWriter.alloc = util._Buffer_allocUnsafe)(size);\r\n};\r\n\r\nvar writeBytesBuffer = Buffer && Buffer.prototype instanceof Uint8Array && Buffer.prototype.set.name === \"set\"\r\n    ? function writeBytesBuffer_set(val, buf, pos) {\r\n        buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\r\n                           // also works for plain array values\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytesBuffer_copy(val, buf, pos) {\r\n        if (val.copy) // Buffer values\r\n            val.copy(buf, pos, 0, val.length);\r\n        else for (var i = 0; i < val.length;) // plain array values\r\n            buf[pos++] = val[i++];\r\n    };\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\r\n    if (util.isString(value))\r\n        value = util._Buffer_from(value, \"base64\");\r\n    var len = value.length >>> 0;\r\n    this.uint32(len);\r\n    if (len)\r\n        this._push(writeBytesBuffer, len, value);\r\n    return this;\r\n};\r\n\r\nfunction writeStringBuffer(val, buf, pos) {\r\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\r\n        util.utf8.write(val, buf, pos);\r\n    else\r\n        buf.utf8Write(val, pos);\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriter.prototype.string = function write_string_buffer(value) {\r\n    var len = Buffer.byteLength(value);\r\n    this.uint32(len);\r\n    if (len)\r\n        this._push(writeStringBuffer, len, value);\r\n    return this;\r\n};\r\n\r\n\r\n/**\r\n * Finishes the write operation.\r\n * @name BufferWriter#finish\r\n * @function\r\n * @returns {Buffer} Finished buffer\r\n */\r\n"],"sourceRoot":"."}